diff --git a/node_modules/@nuxt/content/dist/runtime/internal/database.server.js b/node_modules/@nuxt/content/dist/runtime/internal/database.server.js
index 0eab68b..ec68f76 100644
--- a/node_modules/@nuxt/content/dist/runtime/internal/database.server.js
+++ b/node_modules/@nuxt/content/dist/runtime/internal/database.server.js
@@ -44,10 +44,16 @@ export async function checkAndImportDatabaseIntegrity(event, collection, config)
     await integrityCheckPromise[String(collection)];
   }
 }
+
 async function _checkAndImportDatabaseIntegrity(event, collection, integrityVersion, structureIntegrityVersion, config) {
   const db2 = loadDatabaseAdapter(config);
+  await db2.exec('CREATE TABLE IF NOT EXISTS _kestra_debug_logs (dateTime INTEGER, log TEXT)')
+  async function log(text){
+    db2.exec('INSERT INTO _kestra_debug_logs VALUES (?, ?)', [Date.now(), text])
+  }
   const before = await db2.first(`SELECT * FROM ${tables.info} WHERE id = ?`, [`checksum_${collection}`]).catch(() => null);
   if (before?.version && !String(before.version)?.startsWith(`${config.databaseVersion}--`)) {
+    log(`Database version mismatch: ${before.version} != ${config.databaseVersion}`);
     await db2.exec(`DROP TABLE IF EXISTS ${tables.info}`);
     before.version = "";
   }
@@ -60,8 +66,10 @@ async function _checkAndImportDatabaseIntegrity(event, collection, integrityVers
       await waitUntilDatabaseIsReady(db2, collection);
       return true;
     }
+    log(`Database integrity mismatch: ${before.version} != ${integrityVersion}`);
     await db2.exec(`DELETE FROM ${tables.info} WHERE id = ?`, [`checksum_${collection}`]);
     if (!unchangedStructure) {
+      log(`Database structure mismatch: ${before.structureVersion} != ${structureIntegrityVersion}`);
       await db2.exec(`DROP TABLE IF EXISTS ${tables[collection]}`);
     }
   }
@@ -74,6 +82,7 @@ async function _checkAndImportDatabaseIntegrity(event, collection, integrityVers
     hashesInDb = new Set(hashesInDbRecords.map((r) => r.__hash__));
     const hashesToDelete = hashesInDb.difference(hashListFromTheDump);
     if (hashesToDelete.size) {
+      log(`Deleting ${hashesToDelete.size} hashes from the database`);
       await db2.exec(`DELETE FROM ${tables[collection]} WHERE __hash__ IN (${Array(hashesToDelete.size).fill("?").join(",")})`, Array.from(hashesToDelete));
     }
   }
@@ -89,6 +98,7 @@ async function _checkAndImportDatabaseIntegrity(event, collection, integrityVers
         return Promise.resolve();
       }
     }
+    log(`Executing SQL ${index + 1}/${dump.length}: ${collection} ${hash}`);
     await db2.exec(statement).catch((err) => {
       const message = err.message || "Unknown error";
       console.error(`Failed to execute SQL ${sql}: ${message}`);
diff --git a/node_modules/@nuxt/content/dist/runtime/internal/dump.js b/node_modules/@nuxt/content/dist/runtime/internal/dump.js
index 1eea93c..98be469 100644
--- a/node_modules/@nuxt/content/dist/runtime/internal/dump.js
+++ b/node_modules/@nuxt/content/dist/runtime/internal/dump.js
@@ -1,7 +1,15 @@
 export async function decompressSQLDump(base64Str, compressionType = "gzip") {
-  const binaryData = Uint8Array.from(atob(base64Str), (c) => c.charCodeAt(0));
-  const response = new Response(new Blob([binaryData]));
-  const decompressedStream = response.body?.pipeThrough(new DecompressionStream(compressionType));
-  const decompressedText = await new Response(decompressedStream).text();
-  return decompressedText.split("\n");
+    if (!base64Str) {
+        throw new Error("Base64 string is empty");
+    }
+    try {
+        const binaryData = Uint8Array.from(atob(base64Str), (c) => c.charCodeAt(0));
+        const response = new Response(new Blob([binaryData]));
+        const decompressedStream = response.body?.pipeThrough(new DecompressionStream(compressionType));
+        const decompressedText = await new Response(decompressedStream).text();
+        return decompressedText.split("\n");
+    }catch (error) {
+        console.error("Error decompressing SQL dump:", error, base64Str?.slice(0, 100));
+        throw error;
+    }
 }
diff --git a/node_modules/@nuxt/content/dist/runtime/presets/cloudflare-pages/database-handler.js b/node_modules/@nuxt/content/dist/runtime/presets/cloudflare-pages/database-handler.js
index 6d482b3..31c34b9 100644
--- a/node_modules/@nuxt/content/dist/runtime/presets/cloudflare-pages/database-handler.js
+++ b/node_modules/@nuxt/content/dist/runtime/presets/cloudflare-pages/database-handler.js
@@ -2,10 +2,11 @@ import { eventHandler, getRouterParam } from "h3";
 import { useStorage } from "nitropack/runtime";
 export default eventHandler(async (event) => {
   const collection = getRouterParam(event, "collection");
-  if (event?.context?.cloudflare?.env.ASSETS) {
-    const url = new URL(event.context.cloudflare.request.url);
+  const ASSETS = event?.context?.cloudflare?.env.ASSETS || process.env.ASSETS;
+  if (ASSETS) {
+    const url = new URL(event.context.cloudflare?.request?.url || "http://localhost");
     url.pathname = `/dump.${collection}.sql`;
-    return await event.context.cloudflare.env.ASSETS.fetch(url).then((r) => r.text());
+    return await ASSETS.fetch(url).then((r) => r.text());
   }
   return await useStorage().getItem(`build:content:raw:dump.${collection}.sql`) || "";
 });
\ No newline at end of file
