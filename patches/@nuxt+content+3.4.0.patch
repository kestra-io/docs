diff --git a/node_modules/@nuxt/content/dist/runtime/internal/database.server.js b/node_modules/@nuxt/content/dist/runtime/internal/database.server.js
index 0eab68b..1b71241 100644
--- a/node_modules/@nuxt/content/dist/runtime/internal/database.server.js
+++ b/node_modules/@nuxt/content/dist/runtime/internal/database.server.js
@@ -44,10 +44,16 @@ export async function checkAndImportDatabaseIntegrity(event, collection, config)
     await integrityCheckPromise[String(collection)];
   }
 }
+
 async function _checkAndImportDatabaseIntegrity(event, collection, integrityVersion, structureIntegrityVersion, config) {
   const db2 = loadDatabaseAdapter(config);
+  await db2.exec('CREATE TABLE IF NOT EXISTS _kestra_debug_logs (dateTime NUMBER, log TEXT)')
+  async function log(text){
+    db2.exec('INSERT INTO _kestra_debug_logs (dateTime, log) VALUES (?, ?)', [Date.now(), text])
+  }
   const before = await db2.first(`SELECT * FROM ${tables.info} WHERE id = ?`, [`checksum_${collection}`]).catch(() => null);
   if (before?.version && !String(before.version)?.startsWith(`${config.databaseVersion}--`)) {
+    log(`Database version mismatch: ${before.version} != ${config.databaseVersion}`);
     await db2.exec(`DROP TABLE IF EXISTS ${tables.info}`);
     before.version = "";
   }
@@ -60,8 +66,10 @@ async function _checkAndImportDatabaseIntegrity(event, collection, integrityVers
       await waitUntilDatabaseIsReady(db2, collection);
       return true;
     }
+    log(`Database integrity mismatch: ${before.version} != ${integrityVersion}`);
     await db2.exec(`DELETE FROM ${tables.info} WHERE id = ?`, [`checksum_${collection}`]);
     if (!unchangedStructure) {
+      log(`Database structure mismatch: ${before.structureVersion} != ${structureIntegrityVersion}`);
       await db2.exec(`DROP TABLE IF EXISTS ${tables[collection]}`);
     }
   }
@@ -74,6 +82,7 @@ async function _checkAndImportDatabaseIntegrity(event, collection, integrityVers
     hashesInDb = new Set(hashesInDbRecords.map((r) => r.__hash__));
     const hashesToDelete = hashesInDb.difference(hashListFromTheDump);
     if (hashesToDelete.size) {
+      log(`Deleting ${hashesToDelete.size} hashes from the database`);
       await db2.exec(`DELETE FROM ${tables[collection]} WHERE __hash__ IN (${Array(hashesToDelete.size).fill("?").join(",")})`, Array.from(hashesToDelete));
     }
   }
@@ -89,6 +98,7 @@ async function _checkAndImportDatabaseIntegrity(event, collection, integrityVers
         return Promise.resolve();
       }
     }
+    log(`Executing SQL ${index + 1}/${dump.length}: ${hash}`);
     await db2.exec(statement).catch((err) => {
       const message = err.message || "Unknown error";
       console.error(`Failed to execute SQL ${sql}: ${message}`);
