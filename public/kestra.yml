openapi: 3.0.1
info:
  title: Kestra
  license:
    name: Apache 2.0
    url: https://raw.githubusercontent.com/kestra-io/kestra/master/LICENSE
tags:
- name: Flows
  description: Flows API
- name: Templates
  description: Templates API
- name: Executions
  description: Executions API
- name: Logs
  description: Logs API
- name: Plugins
  description: Plugins API
- name: Stats
  description: Stats API
- name: Misc
  description: Misc API
- name: Blueprints
  description: Blueprints API
- name: Blueprint Tags
  description: Blueprint Tags API
- name: Metrics
  description: Metrics API
paths:
  /api/v1/basicAuth:
    post:
      tags:
      - Misc
      summary: Add basic auth to current instance
      operationId: addBasicAuth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MiscController.BasicAuthCredentials"
        required: true
      responses:
        "200":
          description: addBasicAuth 200 response
  /api/v1/blueprints/community:
    get:
      tags:
      - Blueprints
      summary: List all blueprints
      operationId: blueprints
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: string
          nullable: true
      - name: tags
        in: query
        description: A tags filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      responses:
        "200":
          description: blueprints 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_BlueprintController.BlueprintItem_"
  /api/v1/blueprints/community/tags:
    get:
      tags:
      - Blueprint Tags
      summary: List blueprint tags matching the filter
      operationId: blueprintTags
      parameters:
      - name: q
        in: query
        description: A string filter to get tags with matching blueprints only
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: blueprintTags 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlueprintController.BlueprintTagItem"
  /api/v1/blueprints/community/{id}:
    get:
      tags:
      - Blueprints
      summary: Get a blueprint
      operationId: blueprint
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprint 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintController.BlueprintItemWithFlow"
  /api/v1/blueprints/community/{id}/flow:
    get:
      tags:
      - Blueprints
      summary: Get a blueprint flow
      operationId: blueprintFlow
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprintFlow 200 response
          content:
            application/yaml:
              schema:
                type: string
  /api/v1/blueprints/community/{id}/graph:
    get:
      tags:
      - Blueprints
      summary: Get a blueprint graph
      operationId: blueprintGraph
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprintGraph 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v1/configs:
    get:
      tags:
      - Misc
      summary: Get current configurations
      operationId: configuration
      responses:
        "200":
          description: configuration 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MiscController.Configuration"
  /api/v1/executions:
    get:
      tags:
      - Executions
      summary: Search for executions for a flow
      operationId: findByFlowId
      parameters:
      - name: namespace
        in: query
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: query
        description: The flow id
        required: true
        schema:
          type: string
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: findByFlowId 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Execution_"
  /api/v1/executions/by-ids:
    delete:
      tags:
      - Executions
      summary: Delete a list of executions
      operationId: deleteByIds
      parameters:
      - name: includeNonTerminated
        in: query
        description: Whether to delete non-terminated executions
        schema:
          type: boolean
          nullable: true
          default: false
      - name: deleteLogs
        in: query
        description: Whether to delete execution logs
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteMetrics
        in: query
        description: Whether to delete execution metrics
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteStorage
        in: query
        description: Whether to delete execution files in the internal storage
        required: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Deleted with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/by-query:
    delete:
      tags:
      - Executions
      summary: Delete executions filter by query parameters
      operationId: deleteByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: includeNonTerminated
        in: query
        description: Whether to delete non-terminated executions
        schema:
          type: boolean
          nullable: true
          default: false
      - name: deleteLogs
        in: query
        description: Whether to delete execution logs
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteMetrics
        in: query
        description: Whether to delete execution metrics
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteStorage
        in: query
        description: Whether to delete execution files in the internal storage
        required: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: deleteByQuery 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/executions/change-status/by-ids:
    post:
      tags:
      - Executions
      summary: Change status of executions by id
      operationId: changeStatusById
      parameters:
      - name: newStatus
        in: query
        description: The new status of the executions
        required: true
        schema:
          $ref: "#/components/schemas/State.Type"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Changed status with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/change-status/by-query:
    post:
      tags:
      - Executions
      summary: Change executions status by query parameters
      operationId: changeStatusByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: newStatus
        in: query
        description: The new status of the executions
        required: true
        schema:
          $ref: "#/components/schemas/State.Type"
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Changed status with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/flows/{namespace}/{flowId}:
    get:
      tags:
      - Executions
      summary: Get flow information's for an execution
      operationId: getFlowForExecution
      parameters:
      - name: namespace
        in: path
        description: The namespace of the flow
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: getFlowForExecution 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowForExecution"
  /api/v1/executions/kill/by-ids:
    delete:
      tags:
      - Executions
      summary: Kill a list of executions
      operationId: killByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Killed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/kill/by-query:
    delete:
      tags:
      - Executions
      summary: Kill executions filter by query parameters
      operationId: killByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      responses:
        "200":
          description: killByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/labels/by-ids:
    post:
      tags:
      - Executions
      summary: Set labels on a list of executions
      operationId: setLabelsByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionController.SetLabelsByIdsRequest"
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Killed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/labels/by-query:
    post:
      tags:
      - Executions
      summary: Set label on executions filter by query parameters
      operationId: setLabelsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Label"
        required: true
      responses:
        "200":
          description: setLabelsByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/namespaces:
    get:
      tags:
      - Executions
      summary: Get all namespaces that have executable flows
      operationId: listDistinctNamespace
      responses:
        "200":
          description: listDistinctNamespace 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/executions/namespaces/{namespace}/flows:
    get:
      tags:
      - Executions
      summary: Get all flow ids for a namespace
      operationId: getFlowsByNamespace
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowsByNamespace 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowForExecution"
  /api/v1/executions/replay/by-ids:
    post:
      tags:
      - Executions
      summary: Create new executions from old ones. Keep the flow revision
      operationId: replayByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Replayed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/replay/by-query:
    post:
      tags:
      - Executions
      summary: Create new executions from old ones filter by query parameters. Keep
        the flow revision
      operationId: replayByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      responses:
        "200":
          description: replayByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/restart/by-ids:
    post:
      tags:
      - Executions
      summary: Restart a list of executions
      operationId: restartByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Restarted with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/restart/by-query:
    post:
      tags:
      - Executions
      summary: Restart executions filter by query parameters
      operationId: restartByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      responses:
        "200":
          description: restartByQuery 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/executions/resume/by-ids:
    post:
      tags:
      - Executions
      summary: Resume a list of paused executions
      operationId: resumeByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Resumed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/resume/by-query:
    post:
      tags:
      - Executions
      summary: Resume executions filter by query parameters
      operationId: resumeByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      responses:
        "200":
          description: resumeByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/search:
    get:
      tags:
      - Executions
      summary: Search for executions
      operationId: find
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      responses:
        "200":
          description: find 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Execution_"
  /api/v1/executions/trigger/{namespace}/{id}:
    post:
      tags:
      - Executions
      summary: Trigger a new execution for a flow
      operationId: trigger
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: wait
        in: query
        description: If the server will wait the end of the execution
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: The flow revision or latest if null
        schema:
          type: integer
          format: int32
          nullable: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              nullable: true
              items:
                type: string
                format: binary
      responses:
        "409":
          description: if the flow is disabled
      deprecated: true
  /api/v1/executions/webhook/{namespace}/{id}/{key}:
    get:
      tags:
      - Executions
      summary: Trigger a new execution by GET webhook trigger
      operationId: webhookTriggerGet
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerGet 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
    put:
      tags:
      - Executions
      summary: Trigger a new execution by PUT webhook trigger
      operationId: webhookTriggerPut
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerPut 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
    post:
      tags:
      - Executions
      summary: Trigger a new execution by POST webhook trigger
      operationId: webhookTriggerPost
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerPost 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/executions/{executionId}:
    get:
      tags:
      - Executions
      summary: Get an execution
      operationId: get
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: get 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
    delete:
      tags:
      - Executions
      summary: Delete an execution
      operationId: delete
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: deleteLogs
        in: query
        description: Whether to delete execution logs
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteMetrics
        in: query
        description: Whether to delete execution metrics
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteStorage
        in: query
        description: Whether to delete execution files in the internal storage
        required: true
        schema:
          type: boolean
          default: true
      responses:
        "204":
          description: On success
  /api/v1/executions/{executionId}/change-status:
    post:
      tags:
      - Executions
      summary: Change the status of an execution
      operationId: changeStatus
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: status
        in: query
        description: The new status of the execution
        required: true
        schema:
          $ref: "#/components/schemas/State.Type"
      responses:
        "200":
          description: changeStatus 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/executions/{executionId}/eval/{taskRunId}:
    post:
      tags:
      - Executions
      summary: Evaluate a variable expression for this taskrun
      operationId: eval
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: taskRunId
        in: path
        description: The taskrun id
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: eval 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionController.EvalResult"
  /api/v1/executions/{executionId}/file:
    get:
      tags:
      - Executions
      summary: Download file for an execution
      operationId: file
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: file 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/v1/executions/{executionId}/file/metas:
    get:
      tags:
      - Executions
      summary: Get file meta information for an execution
      operationId: filesize
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: filesize 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileMetas"
  /api/v1/executions/{executionId}/file/preview:
    get:
      tags:
      - Executions
      summary: Get file preview for an execution
      operationId: filePreview
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      - name: maxRows
        in: query
        description: The max row returns
        schema:
          type: integer
          format: int32
          nullable: true
      - name: encoding
        in: query
        description: The file encoding as Java charset name. Defaults to UTF-8
        required: true
        schema:
          type: string
          default: UTF-8
        example: ISO-8859-1
      responses:
        "200":
          description: filePreview 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/{executionId}/flow:
    get:
      tags:
      - Executions
      summary: Get flow information's for an execution
      operationId: getFlowForExecutionById
      parameters:
      - name: executionId
        in: path
        description: The execution that you want flow information's
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowForExecutionById 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowForExecution"
  /api/v1/executions/{executionId}/follow:
    get:
      tags:
      - Executions
      summary: Follow an execution
      operationId: follow
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: follow 200 response
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/Event_Execution_"
  /api/v1/executions/{executionId}/graph:
    get:
      tags:
      - Executions
      summary: Generate a graph for an execution
      operationId: flowGraph
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: subflows
        in: query
        description: The subflow tasks to display
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: flowGraph 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowGraph"
  /api/v1/executions/{executionId}/kill:
    delete:
      tags:
      - Executions
      summary: Kill an execution
      operationId: kill
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: isOnKillCascade
        in: query
        description: Specifies whether killing the execution also kill all subflow
          executions.
        required: true
        schema:
          type: boolean
          default: true
      responses:
        "202":
          description: Execution kill was requested successfully
        "409":
          description: if the executions is already finished
        "404":
          description: if the executions is not found
  /api/v1/executions/{executionId}/labels:
    post:
      tags:
      - Executions
      summary: Add or update labels of a terminated execution
      operationId: setLabels
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Label"
        required: true
      responses:
        "404":
          description: If the execution cannot be found
        "400":
          description: If the execution is not terminated
  /api/v1/executions/{executionId}/replay:
    post:
      tags:
      - Executions
      summary: Create a new execution from an old one and start it from a specified
        task run id
      operationId: replay
      parameters:
      - name: executionId
        in: path
        description: the original execution id to clone
        required: true
        schema:
          type: string
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: revision
        in: query
        description: The flow revision to use for new execution
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: replay 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/executions/{executionId}/restart:
    post:
      tags:
      - Executions
      summary: Restart a new execution from an old one
      operationId: restart
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision to use for new execution
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: restart 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/executions/{executionId}/resume:
    post:
      tags:
      - Executions
      summary: Resume a paused execution.
      operationId: resume
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              nullable: true
              items:
                type: string
                format: binary
      responses:
        "204":
          description: On success
        "409":
          description: if the executions is not paused
  /api/v1/executions/{executionId}/resume/validate:
    post:
      tags:
      - Executions
      summary: Validate inputs to resume a paused execution.
      operationId: validateInputsOnResume
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              nullable: true
              items:
                type: string
                format: binary
      responses:
        "204":
          description: On success
        "409":
          description: if the executions is not paused
  /api/v1/executions/{executionId}/state:
    post:
      tags:
      - Executions
      summary: Change state for a taskrun in an execution
      operationId: changeState
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionController.StateRequest"
        required: true
      responses:
        "200":
          description: changeState 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/executions/{namespace}/{id}:
    post:
      tags:
      - Executions
      summary: Create a new execution for a flow
      operationId: create
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: wait
        in: query
        description: If the server will wait the end of the execution
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: The flow revision or latest if null
        schema:
          type: integer
          format: int32
          nullable: true
      - name: scheduleDate
        in: query
        description: Schedule the flow on a specific date
        schema:
          type: string
          format: date-time
          nullable: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              nullable: true
              items:
                type: string
                format: binary
      responses:
        "409":
          description: if the flow is disabled
  /api/v1/executions/{namespace}/{id}/validate:
    post:
      tags:
      - Executions
      summary: Validate the creation of a new execution for a flow
      operationId: validateInputsOnCreate
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: revision
        in: query
        description: The flow revision or latest if null
        schema:
          type: integer
          format: int32
          nullable: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              nullable: true
              items:
                type: string
                format: binary
      responses:
        "409":
          description: if the flow is disabled
  /api/v1/flows:
    post:
      tags:
      - Flows
      summary: Create a flow from json object
      operationId: create_1
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/Flow"
          application/x-yaml:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: create_1 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Flow"
                - $ref: "#/components/schemas/FlowWithSource"
              example: null
      deprecated: true
  /api/v1/flows/bulk:
    post:
      tags:
      - Flows
      summary: Update from multiples yaml sources
      description: |-
        All flow will be created / updated for this namespace.
        Flow that already created but not in `flows` will be deleted if the query delete is `true`
      operationId: bulkUpdate
      parameters:
      - name: delete
        in: query
        description: If missing flow should be deleted
        required: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
              nullable: true
      responses:
        "200":
          description: bulkUpdate 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowWithSource"
  /api/v1/flows/delete/by-ids:
    delete:
      tags:
      - Flows
      summary: Delete flows by their IDs.
      operationId: deleteByIds_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: deleteByIds_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/flows/delete/by-query:
    delete:
      tags:
      - Flows
      summary: Delete flows returned by the query parameters.
      operationId: deleteByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: deleteByQuery_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/flows/disable/by-ids:
    post:
      tags:
      - Flows
      summary: Disable flows by their IDs.
      operationId: disableByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: disableByIds 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/flows/disable/by-query:
    post:
      tags:
      - Flows
      summary: Disable flows returned by the query parameters.
      operationId: disableByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: disableByQuery 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/flows/distinct-namespaces:
    get:
      tags:
      - Flows
      summary: List all distinct namespaces
      operationId: listDistinctNamespace_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: listDistinctNamespace_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/flows/enable/by-ids:
    post:
      tags:
      - Flows
      summary: Enable flows by their IDs.
      operationId: enableByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: enableByIds 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/flows/enable/by-query:
    post:
      tags:
      - Flows
      summary: Enable flows returned by the query parameters.
      operationId: enableByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: enableByQuery 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/flows/export/by-ids:
    post:
      tags:
      - Flows
      summary: Export flows as a ZIP archive of yaml sources.
      operationId: exportByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: exportByIds 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/flows/export/by-query:
    get:
      tags:
      - Flows
      summary: Export flows as a ZIP archive of yaml sources.
      operationId: exportByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: exportByQuery 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/flows/graph:
    post:
      tags:
      - Flows
      summary: Generate a graph for a flow source
      operationId: flowGraphSource
      parameters:
      - name: subflows
        in: query
        description: The subflow tasks to display
        schema:
          type: array
          nullable: true
          items:
            type: string
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: flowGraphSource 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowGraph"
  /api/v1/flows/import:
    post:
      tags:
      - Flows
      summary: Import flows as a ZIP archive of yaml sources or a multi-objects YAML
        file.
      operationId: importFlows
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileUpload:
                  type: string
                  description: "The file to import, can be a ZIP archive or a multi-objects\
                    \ YAML file"
                  format: binary
            encoding:
              fileUpload:
                contentType: application/octet-stream
        required: true
      responses:
        "204":
          description: On success
  /api/v1/flows/search:
    get:
      tags:
      - Flows
      summary: Search for flows
      operationId: find_1
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Flow_"
  /api/v1/flows/source:
    get:
      tags:
      - Flows
      summary: Search for flows source code
      operationId: source
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: source 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_SearchResult_Flow__"
  /api/v1/flows/validate:
    post:
      tags:
      - Flows
      summary: Validate a list of flows
      operationId: validateFlows
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateFlows 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/flows/validate/task:
    post:
      tags:
      - Flows
      summary: Validate a list of flows
      operationId: validateTask
      parameters:
      - name: section
        in: query
        description: Type of task
        required: true
        schema:
          $ref: "#/components/schemas/FlowController.TaskValidationType"
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
          application/json:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: validateTask 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/flows/validate/trigger:
    post:
      tags:
      - Flows
      summary: Validate trigger
      operationId: validateTrigger
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateTrigger 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/flows/{namespace}:
    get:
      tags:
      - Flows
      summary: Retrieve all flows from a given namespace
      operationId: getFlowsByNamespace_1
      parameters:
      - name: namespace
        in: path
        description: Namespace to filter flows
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowsByNamespace_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Flow"
    post:
      tags:
      - Flows
      summary: Update a complete namespace from json object
      description: |-
        All flow will be created / updated for this namespace.
        Flow that already created but not in `flows` will be deleted if the query delete is `true`
      operationId: updateNamespace
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: delete
        in: query
        description: If missing flow should be deleted
        required: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Flow"
          application/x-yaml:
            schema:
              type: string
              nullable: true
            example: null
        required: true
      responses:
        "200":
          description: updateNamespace 200 response
          content:
            application/json:
              schema:
                oneOf:
                - type: array
                  items:
                    $ref: "#/components/schemas/Flow"
                - type: array
                  items:
                    $ref: "#/components/schemas/FlowWithSource"
              example: null
      deprecated: true
  /api/v1/flows/{namespace}/{id}:
    get:
      tags:
      - Flows
      summary: Get a flow
      operationId: index
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Include the source code
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: Get latest revision by default
        schema:
          type: integer
          format: int32
          nullable: true
      - name: allowDeleted
        in: query
        description: Get flow even if deleted
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: index 200 response
          content:
            application/json:
              schema:
                type: object
    put:
      tags:
      - Flows
      summary: Update a flow
      operationId: update
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/Flow"
          application/x-yaml:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: update 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Flow"
                - $ref: "#/components/schemas/FlowWithSource"
              example: null
      deprecated: true
    delete:
      tags:
      - Flows
      summary: Delete a flow
      operationId: delete_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/flows/{namespace}/{id}/dependencies:
    get:
      tags:
      - Flows
      summary: Get flow dependencies
      operationId: dependencies
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: destinationOnly
        in: query
        description: "if true, list only destination dependencies, otherwise list\
          \ also source dependencies"
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: dependencies 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowTopologyGraph"
  /api/v1/flows/{namespace}/{id}/graph:
    get:
      tags:
      - Flows
      summary: Generate a graph for a flow
      operationId: flowGraph_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      - name: subflows
        in: query
        description: The subflow tasks to display
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: flowGraph_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowGraph"
  /api/v1/flows/{namespace}/{id}/revisions:
    get:
      tags:
      - Flows
      summary: Get revisions for a flow
      operationId: revisions
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: revisions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowWithSource"
  /api/v1/flows/{namespace}/{id}/tasks/{taskId}:
    get:
      tags:
      - Flows
      summary: Get a flow task
      operationId: flowTask
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: flowTask 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
  /api/v1/flows/{namespace}/{id}/{taskId}:
    patch:
      tags:
      - Flows
      summary: Update a single task on a flow
      operationId: updateTask
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        required: true
      responses:
        "200":
          description: updateTask 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flow"
      deprecated: true
  /api/v1/logs/search:
    get:
      tags:
      - Logs
      summary: Search for logs
      operationId: find_2
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: triggerId
        in: query
        description: A trigger id filter
        schema:
          type: string
          nullable: true
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      responses:
        "200":
          description: find_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_LogEntry_"
  /api/v1/logs/{executionId}:
    get:
      tags:
      - Logs
      summary: "Get logs for a specific execution, taskrun or task"
      operationId: findByExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: findByExecution 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogEntry"
    delete:
      tags:
      - Logs
      summary: "Delete logs for a specific execution, taskrun or task"
      operationId: delete_2
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: delete_2 200 response
  /api/v1/logs/{executionId}/download:
    get:
      tags:
      - Logs
      summary: "Download logs for a specific execution, taskrun or task"
      operationId: download
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: download 200 response
          content:
            text/plain:
              schema:
                type: string
                format: binary
  /api/v1/logs/{executionId}/follow:
    get:
      tags:
      - Logs
      summary: Follow logs for a specific execution
      operationId: follow_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      responses:
        "200":
          description: follow_1 200 response
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/Event_LogEntry_"
  /api/v1/logs/{namespace}/{flowId}:
    delete:
      tags:
      - Logs
      summary: "Delete logs for a specific execution, taskrun or task"
      operationId: deleteFromFlow
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        schema:
          type: string
      - name: triggerId
        in: query
        description: The trigger id
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: deleteFromFlow 200 response
  /api/v1/metrics/aggregates/{namespace}/{flowId}/{metric}:
    get:
      tags:
      - Metrics
      summary: Get metrics aggregations for a specific flow
      operationId: aggregateByFlowId
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: metric
        in: path
        description: The metric name
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: "The start datetime, default to now - 30 days"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: "The end datetime, default to now"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: aggregation
        in: query
        description: "The type of aggregation: avg, sum, min or max"
        required: true
        schema:
          type: string
          default: sum
      responses:
        "200":
          description: aggregateByFlowId 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricAggregations"
  /api/v1/metrics/aggregates/{namespace}/{flowId}/{taskId}/{metric}:
    get:
      tags:
      - Metrics
      summary: Get metrics aggregations for a specific flow
      operationId: aggregateByFlowIdAndTaskId
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task Id
        required: true
        schema:
          type: string
      - name: metric
        in: path
        description: The metric name
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: "The start datetime, default to now - 30 days"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: "The end datetime, default to now"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: aggregation
        in: query
        description: "The type of aggregation: avg, sum, min or max"
        required: true
        schema:
          type: string
          default: sum
      responses:
        "200":
          description: aggregateByFlowIdAndTaskId 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricAggregations"
  /api/v1/metrics/names/{namespace}/{flowId}:
    get:
      tags:
      - Metrics
      summary: Get metrics names for a specific flow
      operationId: flowMetrics
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: flowMetrics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/metrics/names/{namespace}/{flowId}/{taskId}:
    get:
      tags:
      - Metrics
      summary: Get metrics names for a specific task in a flow
      operationId: taskMetrics
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: taskMetrics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/metrics/tasks/{namespace}/{flowId}:
    get:
      tags:
      - Metrics
      summary: "Get tasks id that have metrics for a specific flow, include deleted\
        \ or renamed tasks"
      operationId: tasks
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: tasks 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/metrics/{executionId}:
    get:
      tags:
      - Metrics
      summary: Get metrics for a specific execution
      operationId: findByExecution_1
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: findByExecution_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_MetricEntry_"
  /api/v1/namespaces/search:
    get:
      tags:
      - Namespaces
      summary: Search for namespaces
      operationId: find_3
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: existing
        in: query
        description: Return only existing namespace
        schema:
          type: boolean
          nullable: true
          default: false
      responses:
        "200":
          description: find_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_NamespaceWithDisabled_"
  /api/v1/namespaces/{id}:
    get:
      tags:
      - Namespaces
      summary: Get a namespace
      operationId: index_1
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Namespace"
  /api/v1/namespaces/{namespace}/dependencies:
    get:
      tags:
      - Flows
      summary: Get flow dependencies
      operationId: dependencies_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: destinationOnly
        in: query
        description: "if true, list only destination dependencies, otherwise list\
          \ also source dependencies"
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: dependencies_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowTopologyGraph"
  /api/v1/namespaces/{namespace}/files:
    get:
      tags:
      - Files
      summary: Get namespace file content
      operationId: file_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
      responses:
        "200":
          description: file_1 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    put:
      tags:
      - Files
      summary: Move a file or directory
      operationId: move
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: from
        in: query
        description: The internal storage uri to move from
        required: true
        schema:
          type: string
          format: uri
      - name: to
        in: query
        description: The internal storage uri to move to
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: move 200 response
    post:
      tags:
      - Files
      summary: Create a file
      operationId: createFile
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileContent:
                  type: string
                  format: binary
            encoding:
              fileContent:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: createFile 200 response
    delete:
      tags:
      - Files
      summary: Delete a file or directory
      operationId: delete_3
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri of the file / directory to delete
        required: true
        schema:
          type: string
      responses:
        "200":
          description: delete_3 200 response
  /api/v1/namespaces/{namespace}/files/directory:
    get:
      tags:
      - Files
      summary: List directory content
      operationId: list
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: list 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileAttributes"
    post:
      tags:
      - Files
      summary: Create a directory
      operationId: createDirectory
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: createDirectory 200 response
  /api/v1/namespaces/{namespace}/files/export:
    get:
      tags:
      - Files
      summary: Export namespace files as a ZIP
      operationId: export
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: export 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/namespaces/{namespace}/files/search:
    get:
      tags:
      - Files
      summary: Find files which path contain the given string in their URI
      operationId: search
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: The string the file path should contain
        required: true
        schema:
          type: string
      responses:
        "200":
          description: search 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/namespaces/{namespace}/files/stats:
    get:
      tags:
      - Files
      summary: "Get namespace file stats such as size, creation & modification dates\
        \ and type"
      operationId: stats
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: stats 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileAttributes"
  /api/v1/namespaces/{namespace}/kv:
    get:
      tags:
      - KV
      summary: List all keys for a namespace
      operationId: list_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: list_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KVEntry"
    delete:
      tags:
      - KV
      summary: Bulk-delete multiple key/value pairs from the given namespace.
      operationId: deleteKeys
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KVController.ApiDeleteBulkRequest"
        required: true
      responses:
        "200":
          description: deleteKeys 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KVController.ApiDeleteBulkResponse"
  /api/v1/namespaces/{namespace}/kv/{key}:
    get:
      tags:
      - KV
      summary: Get value for a key
      operationId: get_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The key
        required: true
        schema:
          type: string
      responses:
        "200":
          description: get_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KVController.TypedValue"
    put:
      tags:
      - KV
      summary: Puts a key-value pair in store
      operationId: put
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The key
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: put 200 response
    delete:
      tags:
      - KV
      summary: Delete a key-value pair
      operationId: delete_4
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The key
        required: true
        schema:
          type: string
      responses:
        "200":
          description: delete_4 200 response
          content:
            application/json:
              schema:
                type: boolean
  /api/v1/plugins:
    get:
      tags:
      - Plugins
      summary: Get list of plugins
      operationId: search_1
      responses:
        "200":
          description: search_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plugin"
  /api/v1/plugins/groups/subgroups:
    get:
      tags:
      - Plugins
      summary: Get plugins group by subgroups
      operationId: subgroups
      responses:
        "200":
          description: subgroups 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plugin"
  /api/v1/plugins/icons:
    get:
      tags:
      - Plugins
      summary: Get plugins icons
      operationId: icons
      responses:
        "200":
          description: icons 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/PluginIcon"
  /api/v1/plugins/icons/groups:
    get:
      tags:
      - Plugins
      summary: Get plugins icons
      operationId: pluginGroupIcons
      responses:
        "200":
          description: pluginGroupIcons 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/PluginIcon"
  /api/v1/plugins/inputs:
    get:
      tags:
      - Plugins
      summary: Get all types for an inputs
      operationId: inputs
      responses:
        "200":
          description: inputs 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InputType"
  /api/v1/plugins/inputs/{type}:
    get:
      tags:
      - Plugins
      summary: Get all json schemas for a type
      description: "The schema will be output as [http://json-schema.org/draft-07/schema](Json\
        \ Schema Draft 7)"
      operationId: inputSchemas
      parameters:
      - name: type
        in: path
        description: The schema needed
        required: true
        schema:
          $ref: "#/components/schemas/Type"
      responses:
        "200":
          description: inputSchemas 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationWithSchema"
  /api/v1/plugins/schemas/{type}:
    get:
      tags:
      - Plugins
      summary: Get all json schemas for a type
      description: "The schema will be output as [http://json-schema.org/draft-07/schema](Json\
        \ Schema Draft 7)"
      operationId: schemas
      parameters:
      - name: type
        in: path
        description: The schema needed
        required: true
        schema:
          $ref: "#/components/schemas/SchemaType"
      - name: arrayOf
        in: query
        description: If schema should be an array of requested type
        schema:
          type: boolean
          nullable: true
          default: false
      responses:
        "200":
          description: schemas 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v1/plugins/{cls}:
    get:
      tags:
      - Plugins
      summary: Get plugin documentation
      operationId: pluginDocumentation
      parameters:
      - name: cls
        in: path
        description: The plugin full class name
        required: true
        schema:
          type: string
      - name: all
        in: query
        description: Include all the properties
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: pluginDocumentation 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationWithSchema"
  /api/v1/stats/executions/daily:
    post:
      tags:
      - Stats
      summary: Get daily statistics for executions
      operationId: dailyStatistics
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.StatisticRequest"
        required: true
      responses:
        "200":
          description: dailyStatistics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DailyExecutionStatistics"
  /api/v1/stats/executions/daily/group-by-flow:
    post:
      tags:
      - Stats
      summary: Get daily statistics for executions group by namespaces and flows
      operationId: dailyGroupByFlowStatistics
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.ByFlowStatisticRequest"
        required: true
      responses:
        "200":
          description: dailyGroupByFlowStatistics 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      $ref: "#/components/schemas/DailyExecutionStatistics"
  /api/v1/stats/executions/daily/group-by-namespace:
    post:
      tags:
      - Stats
      summary: Get daily statistics for executions grouped by namespace
      operationId: dailyStatisticsGroupByNamespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.ByNamespaceStatisticRequest"
        required: true
      responses:
        "200":
          description: dailyStatisticsGroupByNamespace 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/ExecutionCountStatistics"
  /api/v1/stats/executions/latest/group-by-flow:
    post:
      tags:
      - Stats
      summary: Get latest execution by flows
      operationId: lastExecutions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.LastExecutionsRequest"
        required: true
      responses:
        "200":
          description: lastExecutions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Execution"
  /api/v1/stats/logs/daily:
    post:
      tags:
      - Stats
      summary: Get daily statistics for logs
      operationId: logsDailyStatistics
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.LogStatisticRequest"
        required: true
      responses:
        "200":
          description: logsDailyStatistics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogStatistics"
  /api/v1/stats/summary:
    post:
      tags:
      - Stats
      summary: Get summary statistics
      operationId: summary
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.SummaryRequest"
        required: true
      responses:
        "200":
          description: summary 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SummaryStatistics"
  /api/v1/stats/taskruns/daily:
    post:
      tags:
      - Stats
      summary: Get daily statistics for taskRuns
      operationId: taskRunsDailyStatistics
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.StatisticRequest"
        required: true
      responses:
        "200":
          description: taskRunsDailyStatistics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DailyExecutionStatistics"
  /api/v1/taskruns/search:
    get:
      tags:
      - Executions
      summary: Search for taskruns
      operationId: findTaskRun
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      responses:
        "200":
          description: findTaskRun 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_TaskRun_"
  /api/v1/templates:
    post:
      tags:
      - Templates
      summary: Create a template
      operationId: create_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
        required: true
      responses:
        "200":
          description: create_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
  /api/v1/templates/delete/by-ids:
    delete:
      tags:
      - Templates
      summary: Delete templates by their IDs.
      operationId: deleteByIds_2
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: deleteByIds_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/templates/delete/by-query:
    delete:
      tags:
      - Templates
      summary: Delete templates returned by the query parameters.
      operationId: deleteByQuery_2
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: deleteByQuery_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/templates/distinct-namespaces:
    get:
      tags:
      - Templates
      summary: List all distinct namespaces
      operationId: listDistinctNamespace_2
      responses:
        "200":
          description: listDistinctNamespace_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/templates/export/by-ids:
    post:
      tags:
      - Templates
      summary: Export templates as a ZIP archive of yaml sources.
      operationId: exportByIds_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: exportByIds_1 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/templates/export/by-query:
    get:
      tags:
      - Templates
      summary: Export templates as a ZIP archive of yaml sources.
      operationId: exportByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: exportByQuery_1 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/templates/import:
    post:
      tags:
      - Templates
      summary: Import templates as a ZIP archive of yaml sources or a multi-objects
        YAML file.
      operationId: importTemplates
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileUpload:
                  type: string
                  description: "The file to import, can be a ZIP archive or a multi-objects\
                    \ YAML file"
                  format: binary
            encoding:
              fileUpload:
                contentType: application/octet-stream
        required: true
      responses:
        "204":
          description: On success
  /api/v1/templates/search:
    get:
      tags:
      - Templates
      summary: Search for templates
      operationId: find_4
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Template_"
  /api/v1/templates/validate:
    post:
      tags:
      - Templates
      summary: Validate a list of templates
      operationId: validateTemplates
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateTemplates 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/templates/{namespace}:
    post:
      tags:
      - Templates
      summary: Update a complete namespace from json object
      description: |-
        All Template will be created / updated for this namespace.
        Template already created but not in `templates` will be deleted if the query delete is `true`
      operationId: updateNamespace_1
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: delete
        in: query
        description: If missing template should be deleted
        required: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Template"
        required: true
      responses:
        "200":
          description: updateNamespace_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Template"
  /api/v1/templates/{namespace}/{id}:
    get:
      tags:
      - Templates
      summary: Get a template
      operationId: index_2
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
    put:
      tags:
      - Templates
      summary: Update a template
      operationId: update_1
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
        required: true
      responses:
        "200":
          description: update_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
    delete:
      tags:
      - Templates
      summary: Delete a template
      operationId: delete_5
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/triggers:
    put:
      tags:
      - Triggers
      summary: Update a trigger
      operationId: update_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: update_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/triggers/backfill/delete:
    post:
      tags:
      - Triggers
      summary: Delete a backfill
      operationId: deleteBackfill
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: deleteBackfill 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/triggers/backfill/delete/by-query:
    post:
      tags:
      - Triggers
      summary: Delete backfill for given triggers
      operationId: deleteBackfillByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: deleteBackfillByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/backfill/delete/by-triggers:
    post:
      tags:
      - Triggers
      summary: Delete backfill for given triggers
      operationId: deleteBackfillByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: deleteBackfillByIds 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/backfill/pause:
    put:
      tags:
      - Triggers
      summary: Pause a backfill
      operationId: pauseBackfill
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: pauseBackfill 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/triggers/backfill/pause/by-query:
    post:
      tags:
      - Triggers
      summary: Pause backfill for given triggers
      operationId: pauseBackfillByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: pauseBackfillByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/backfill/pause/by-triggers:
    post:
      tags:
      - Triggers
      summary: Pause backfill for given triggers
      operationId: pauseBackfillByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: pauseBackfillByIds 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/backfill/unpause:
    put:
      tags:
      - Triggers
      summary: Unpause a backfill
      operationId: unpauseBackfill
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: unpauseBackfill 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/triggers/backfill/unpause/by-query:
    post:
      tags:
      - Triggers
      summary: Unpause backfill for given triggers
      operationId: unpauseBackfillByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: unpauseBackfillByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/backfill/unpause/by-triggers:
    post:
      tags:
      - Triggers
      summary: Unpause backfill for given triggers
      operationId: unpauseBackfillByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: unpauseBackfillByIds 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/restart:
    post:
      tags:
      - Triggers
      summary: Restart a trigger
      operationId: restart_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: restart_1 200 response
  /api/v1/triggers/search:
    get:
      tags:
      - Triggers
      summary: Search for triggers
      operationId: search_2
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: workerId
        in: query
        description: The identifier of the worker currently evaluating the trigger
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: The flow identifier
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: search_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_TriggerController.Triggers_"
  /api/v1/triggers/set-disabled/by-query:
    post:
      tags:
      - Triggers
      summary: Delete backfill for given triggers
      operationId: setDisabledByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: disabled
        in: query
        description: The disabled state
        required: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: setDisabledByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/set-disabled/by-triggers:
    post:
      tags:
      - Triggers
      summary: Delete backfill for given triggers
      operationId: setDisabledByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TriggerController.SetDisabledRequest"
        required: true
      responses:
        "200":
          description: setDisabledByIds 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/unlock/by-query:
    post:
      tags:
      - Triggers
      summary: Unlock triggers by query parameters
      operationId: unlockByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: unlockByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/unlock/by-triggers:
    post:
      tags:
      - Triggers
      summary: Unlock given triggers
      operationId: unlockByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: unlockByIds 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/{namespace}/{flowId}:
    get:
      tags:
      - Triggers
      summary: Get all triggers for a flow
      operationId: find_5
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_5 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Trigger_"
  /api/v1/triggers/{namespace}/{flowId}/{triggerId}/restart:
    post:
      tags:
      - Triggers
      summary: Restart a trigger
      operationId: restart_2
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: triggerId
        in: path
        description: The trigger id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: restart_2 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/{namespace}/{flowId}/{triggerId}/unlock:
    post:
      tags:
      - Triggers
      summary: Unlock a trigger
      operationId: unlock
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: triggerId
        in: path
        description: The trigger id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: unlock 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/usages/all:
    get:
      tags:
      - Misc
      summary: Get instance usage information
      operationId: usages
      responses:
        "200":
          description: usages 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usage"
  /api/v1/{tenant}/basicAuth:
    post:
      tags:
      - Misc
      summary: Add basic auth to current instance
      operationId: addBasicAuth_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MiscController.BasicAuthCredentials"
        required: true
      responses:
        "200":
          description: addBasicAuth_1 200 response
  /api/v1/{tenant}/configs:
    get:
      tags:
      - Misc
      summary: Get current configurations
      operationId: configuration_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: configuration_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MiscController.Configuration"
  /api/v1/{tenant}/usages/all:
    get:
      tags:
      - Misc
      summary: Get instance usage information
      operationId: usages_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: usages_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usage"
components:
  schemas:
    AbstractCollection_BlueprintController.BlueprintItem_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Execution_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Flow_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_LogEntry_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_MetricEntry_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_NamespaceWithDisabled_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_SearchResult_Flow__:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_TaskRun_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Template_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_TriggerController.Triggers_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Trigger_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractFlow:
      required:
      - deleted
      - disabled
      - id
      - namespace
      type: object
      properties:
        id:
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9._-]*"
          type: string
        namespace:
          maxLength: 150
          minLength: 1
          pattern: "^[a-z0-9][a-z0-9._-]*"
          type: string
        revision:
          minimum: 1
          type: integer
          format: int32
        inputs:
          type: array
          items:
            $ref: "#/components/schemas/Input_Object_"
        disabled:
          type: boolean
        deleted:
          type: boolean
    AbstractGraph:
      type: object
      properties:
        uid:
          type: string
        type:
          type: string
        error:
          type: boolean
    AbstractList_BlueprintController.BlueprintItem_:
      $ref: "#/components/schemas/AbstractCollection_BlueprintController.BlueprintItem_"
    AbstractList_Execution_:
      $ref: "#/components/schemas/AbstractCollection_Execution_"
    AbstractList_Flow_:
      $ref: "#/components/schemas/AbstractCollection_Flow_"
    AbstractList_LogEntry_:
      $ref: "#/components/schemas/AbstractCollection_LogEntry_"
    AbstractList_MetricEntry_:
      $ref: "#/components/schemas/AbstractCollection_MetricEntry_"
    AbstractList_NamespaceWithDisabled_:
      $ref: "#/components/schemas/AbstractCollection_NamespaceWithDisabled_"
    AbstractList_SearchResult_Flow__:
      $ref: "#/components/schemas/AbstractCollection_SearchResult_Flow__"
    AbstractList_TaskRun_:
      $ref: "#/components/schemas/AbstractCollection_TaskRun_"
    AbstractList_Template_:
      $ref: "#/components/schemas/AbstractCollection_Template_"
    AbstractList_TriggerController.Triggers_:
      $ref: "#/components/schemas/AbstractCollection_TriggerController.Triggers_"
    AbstractList_Trigger_:
      $ref: "#/components/schemas/AbstractCollection_Trigger_"
    AbstractMetricEntry_Object_:
      required:
      - name
      type: object
      properties:
        type:
          type: string
        value: {}
        name:
          type: string
        tags:
          type: object
          additionalProperties:
            type: string
        timestamp:
          type: string
          format: date-time
    AbstractRetry:
      type: object
    AbstractTrigger:
      required:
      - disabled
      - id
      - type
      type: object
      properties:
        minLogLevel:
          deprecated: true
          allOf:
          - $ref: "#/components/schemas/Level"
        id:
          title: A unique ID for the whole flow.
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          title: The class name for this current trigger.
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
        description:
          type: string
        conditions:
          title: List of conditions in order to limit the flow trigger.
          type: array
          items:
            $ref: "#/components/schemas/Condition"
        disabled:
          type: boolean
        workerGroup:
          $ref: "#/components/schemas/WorkerGroup"
        logLevel:
          $ref: "#/components/schemas/Level"
        labels:
          title: The labels to pass to the execution created.
          type: array
          items:
            $ref: "#/components/schemas/Label"
        stopAfter:
          title: List of execution states after which a trigger should be stopped
            (a.k.a. disabled).
          type: array
          items:
            $ref: "#/components/schemas/State.Type"
        logToFile:
          type: boolean
    AbstractTriggerForExecution:
      required:
      - id
      - type
      type: object
      properties:
        id:
          title: A unique ID for the whole flow.
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          title: The class name for this current trigger.
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
    ArrayListTotal_BlueprintController.BlueprintItem_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_BlueprintController.BlueprintItem_"
      - $ref: "#/components/schemas/AbstractList_BlueprintController.BlueprintItem_"
      - $ref: "#/components/schemas/AbstractCollection_BlueprintController.BlueprintItem_"
      - properties:
          first:
            $ref: "#/components/schemas/BlueprintController.BlueprintItem"
          last:
            $ref: "#/components/schemas/BlueprintController.BlueprintItem"
          empty:
            type: boolean
          total:
            type: integer
            format: int64
    ArrayListTotal_Execution_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_Execution_"
      - $ref: "#/components/schemas/AbstractList_Execution_"
      - $ref: "#/components/schemas/AbstractCollection_Execution_"
      - properties:
          first:
            $ref: "#/components/schemas/Execution"
          last:
            $ref: "#/components/schemas/Execution"
          empty:
            type: boolean
          total:
            type: integer
            format: int64
    ArrayListTotal_Flow_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_Flow_"
      - $ref: "#/components/schemas/AbstractList_Flow_"
      - $ref: "#/components/schemas/AbstractCollection_Flow_"
      - properties:
          first:
            $ref: "#/components/schemas/Flow"
          last:
            $ref: "#/components/schemas/Flow"
          empty:
            type: boolean
          total:
            type: integer
            format: int64
    ArrayListTotal_LogEntry_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_LogEntry_"
      - $ref: "#/components/schemas/AbstractList_LogEntry_"
      - $ref: "#/components/schemas/AbstractCollection_LogEntry_"
      - properties:
          first:
            $ref: "#/components/schemas/LogEntry"
          last:
            $ref: "#/components/schemas/LogEntry"
          empty:
            type: boolean
          total:
            type: integer
            format: int64
    ArrayListTotal_MetricEntry_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_MetricEntry_"
      - $ref: "#/components/schemas/AbstractList_MetricEntry_"
      - $ref: "#/components/schemas/AbstractCollection_MetricEntry_"
      - properties:
          first:
            $ref: "#/components/schemas/MetricEntry"
          last:
            $ref: "#/components/schemas/MetricEntry"
          empty:
            type: boolean
          total:
            type: integer
            format: int64
    ArrayListTotal_NamespaceWithDisabled_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_NamespaceWithDisabled_"
      - $ref: "#/components/schemas/AbstractList_NamespaceWithDisabled_"
      - $ref: "#/components/schemas/AbstractCollection_NamespaceWithDisabled_"
      - properties:
          first:
            $ref: "#/components/schemas/NamespaceWithDisabled"
          last:
            $ref: "#/components/schemas/NamespaceWithDisabled"
          empty:
            type: boolean
          total:
            type: integer
            format: int64
    ArrayListTotal_SearchResult_Flow__:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_SearchResult_Flow__"
      - $ref: "#/components/schemas/AbstractList_SearchResult_Flow__"
      - $ref: "#/components/schemas/AbstractCollection_SearchResult_Flow__"
      - properties:
          first:
            $ref: "#/components/schemas/SearchResult_Flow_"
          last:
            $ref: "#/components/schemas/SearchResult_Flow_"
          empty:
            type: boolean
          total:
            type: integer
            format: int64
    ArrayListTotal_TaskRun_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_TaskRun_"
      - $ref: "#/components/schemas/AbstractList_TaskRun_"
      - $ref: "#/components/schemas/AbstractCollection_TaskRun_"
      - properties:
          first:
            $ref: "#/components/schemas/TaskRun"
          last:
            $ref: "#/components/schemas/TaskRun"
          empty:
            type: boolean
          total:
            type: integer
            format: int64
    ArrayListTotal_Template_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_Template_"
      - $ref: "#/components/schemas/AbstractList_Template_"
      - $ref: "#/components/schemas/AbstractCollection_Template_"
      - properties:
          first:
            $ref: "#/components/schemas/Template"
          last:
            $ref: "#/components/schemas/Template"
          empty:
            type: boolean
          total:
            type: integer
            format: int64
    ArrayListTotal_TriggerController.Triggers_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_TriggerController.Triggers_"
      - $ref: "#/components/schemas/AbstractList_TriggerController.Triggers_"
      - $ref: "#/components/schemas/AbstractCollection_TriggerController.Triggers_"
      - properties:
          first:
            $ref: "#/components/schemas/TriggerController.Triggers"
          last:
            $ref: "#/components/schemas/TriggerController.Triggers"
          empty:
            type: boolean
          total:
            type: integer
            format: int64
    ArrayListTotal_Trigger_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_Trigger_"
      - $ref: "#/components/schemas/AbstractList_Trigger_"
      - $ref: "#/components/schemas/AbstractCollection_Trigger_"
      - properties:
          first:
            $ref: "#/components/schemas/Trigger"
          last:
            $ref: "#/components/schemas/Trigger"
          empty:
            type: boolean
          total:
            type: integer
            format: int64
    ArrayList_BlueprintController.BlueprintItem_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_BlueprintController.BlueprintItem_"
      - $ref: "#/components/schemas/AbstractCollection_BlueprintController.BlueprintItem_"
      - properties:
          first:
            $ref: "#/components/schemas/BlueprintController.BlueprintItem"
          last:
            $ref: "#/components/schemas/BlueprintController.BlueprintItem"
          empty:
            type: boolean
    ArrayList_Execution_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_Execution_"
      - $ref: "#/components/schemas/AbstractCollection_Execution_"
      - properties:
          first:
            $ref: "#/components/schemas/Execution"
          last:
            $ref: "#/components/schemas/Execution"
          empty:
            type: boolean
    ArrayList_Flow_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_Flow_"
      - $ref: "#/components/schemas/AbstractCollection_Flow_"
      - properties:
          first:
            $ref: "#/components/schemas/Flow"
          last:
            $ref: "#/components/schemas/Flow"
          empty:
            type: boolean
    ArrayList_LogEntry_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_LogEntry_"
      - $ref: "#/components/schemas/AbstractCollection_LogEntry_"
      - properties:
          first:
            $ref: "#/components/schemas/LogEntry"
          last:
            $ref: "#/components/schemas/LogEntry"
          empty:
            type: boolean
    ArrayList_MetricEntry_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_MetricEntry_"
      - $ref: "#/components/schemas/AbstractCollection_MetricEntry_"
      - properties:
          first:
            $ref: "#/components/schemas/MetricEntry"
          last:
            $ref: "#/components/schemas/MetricEntry"
          empty:
            type: boolean
    ArrayList_NamespaceWithDisabled_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_NamespaceWithDisabled_"
      - $ref: "#/components/schemas/AbstractCollection_NamespaceWithDisabled_"
      - properties:
          first:
            $ref: "#/components/schemas/NamespaceWithDisabled"
          last:
            $ref: "#/components/schemas/NamespaceWithDisabled"
          empty:
            type: boolean
    ArrayList_SearchResult_Flow__:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_SearchResult_Flow__"
      - $ref: "#/components/schemas/AbstractCollection_SearchResult_Flow__"
      - properties:
          first:
            $ref: "#/components/schemas/SearchResult_Flow_"
          last:
            $ref: "#/components/schemas/SearchResult_Flow_"
          empty:
            type: boolean
    ArrayList_TaskRun_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_TaskRun_"
      - $ref: "#/components/schemas/AbstractCollection_TaskRun_"
      - properties:
          first:
            $ref: "#/components/schemas/TaskRun"
          last:
            $ref: "#/components/schemas/TaskRun"
          empty:
            type: boolean
    ArrayList_Template_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_Template_"
      - $ref: "#/components/schemas/AbstractCollection_Template_"
      - properties:
          first:
            $ref: "#/components/schemas/Template"
          last:
            $ref: "#/components/schemas/Template"
          empty:
            type: boolean
    ArrayList_TriggerController.Triggers_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_TriggerController.Triggers_"
      - $ref: "#/components/schemas/AbstractCollection_TriggerController.Triggers_"
      - properties:
          first:
            $ref: "#/components/schemas/TriggerController.Triggers"
          last:
            $ref: "#/components/schemas/TriggerController.Triggers"
          empty:
            type: boolean
    ArrayList_Trigger_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_Trigger_"
      - $ref: "#/components/schemas/AbstractCollection_Trigger_"
      - properties:
          first:
            $ref: "#/components/schemas/Trigger"
          last:
            $ref: "#/components/schemas/Trigger"
          empty:
            type: boolean
    Backfill:
      title: A backfill configuration.
      required:
      - start
      type: object
      properties:
        start:
          title: The start date.
          type: string
          format: date-time
        end:
          title: The end date.
          type: string
          format: date-time
        currentDate:
          title: The current date of the backfill being done.
          type: string
          format: date-time
        paused:
          title: Whether the backfill is paused.
          type: boolean
        inputs:
          title: The inputs to pass to the backfilled executions.
          allOf:
          - type: object
            additionalProperties: true
          - {}
        labels:
          title: The labels to pass to the backfilled executions.
          type: array
          items:
            $ref: "#/components/schemas/Label"
        previousNextExecutionDate:
          title: The nextExecutionDate before the backfill was created.
          type: string
          format: date-time
    BlueprintController.BlueprintItem:
      required:
      - description
      - id
      - includedTasks
      - publishedAt
      - tags
      - title
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        includedTasks:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        publishedAt:
          type: string
          format: date-time
    BlueprintController.BlueprintItemWithFlow:
      type: object
      allOf:
      - $ref: "#/components/schemas/BlueprintController.BlueprintItem"
      - properties:
          flow:
            type: string
    BlueprintController.BlueprintTagItem:
      required:
      - id
      - name
      - publishedAt
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        publishedAt:
          type: string
          format: date-time
    BulkErrorResponse:
      type: object
      properties:
        message:
          type: string
        invalids: {}
    BulkResponse:
      type: object
      properties:
        count:
          type: integer
          format: int32
    Collection_Object_:
      type: object
      properties:
        empty:
          type: boolean
    Concurrency:
      required:
      - behavior
      - limit
      type: object
      properties:
        limit:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          format: int32
        behavior:
          $ref: "#/components/schemas/Concurrency.Behavior"
    Concurrency.Behavior:
      type: string
      enum:
      - QUEUE
      - CANCEL
      - FAIL
    Condition:
      required:
      - type
      type: object
      properties:
        type:
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
    ConfigurationUsage:
      type: object
      properties:
        repositoryType:
          type: string
        queueType:
          type: string
        storageType:
          type: string
        secretType:
          type: string
        javaSecurityEnabled:
          type: boolean
    DailyExecutionStatistics:
      required:
      - duration
      - executionCounts
      - groupBy
      - startDate
      type: object
      properties:
        startDate:
          type: string
          format: date-time
        duration:
          $ref: "#/components/schemas/DailyExecutionStatistics.Duration"
        executionCounts:
          properties:
            CREATED:
              type: integer
              format: int64
            RUNNING:
              type: integer
              format: int64
            PAUSED:
              type: integer
              format: int64
            RESTARTED:
              type: integer
              format: int64
            KILLING:
              type: integer
              format: int64
            SUCCESS:
              type: integer
              format: int64
            WARNING:
              type: integer
              format: int64
            FAILED:
              type: integer
              format: int64
            KILLED:
              type: integer
              format: int64
            CANCELLED:
              type: integer
              format: int64
            QUEUED:
              type: integer
              format: int64
            RETRYING:
              type: integer
              format: int64
            RETRIED:
              type: integer
              format: int64
            SKIPPED:
              type: integer
              format: int64
        groupBy:
          type: string
    DailyExecutionStatistics.Duration:
      required:
      - avg
      - count
      - max
      - min
      - sum
      type: object
      properties:
        min:
          type: string
        avg:
          type: string
        max:
          type: string
        sum:
          type: string
        count:
          type: integer
          format: int64
    DependsOn:
      type: object
      properties:
        inputs:
          type: array
          nullable: true
          items:
            type: string
        condition:
          type: string
          nullable: true
    DocumentationWithSchema:
      type: object
      properties:
        markdown:
          type: string
        schema:
          $ref: "#/components/schemas/Schema"
    Event_Execution_:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Execution"
        id:
          type: string
        name:
          type: string
        comment:
          type: string
        retry:
          type: string
    Event_LogEntry_:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/LogEntry"
        id:
          type: string
        name:
          type: string
        comment:
          type: string
        retry:
          type: string
    ExecutableTask.SubflowId:
      required:
      - flowId
      - namespace
      - revision
      type: object
      properties:
        namespace:
          type: string
        flowId:
          type: string
        revision:
          type: integer
          format: int32
          nullable: true
    Execution:
      required:
      - deleted
      - error
      - flowId
      - flowRevision
      - id
      - inputs
      - labels
      - metadata
      - namespace
      - originalId
      - outputs
      - parentId
      - scheduleDate
      - state
      - taskRunList
      - trigger
      - variables
      type: object
      properties:
        id:
          type: string
        namespace:
          type: string
        flowId:
          type: string
        flowRevision:
          type: integer
          format: int32
        taskRunList:
          type: array
          items:
            $ref: "#/components/schemas/TaskRun"
        inputs:
          type: object
          additionalProperties: true
        outputs:
          type: object
          additionalProperties: true
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
        variables:
          type: object
          additionalProperties: true
        state:
          $ref: "#/components/schemas/State"
        parentId:
          type: string
        originalId:
          type: string
        trigger:
          $ref: "#/components/schemas/ExecutionTrigger"
        deleted:
          type: boolean
        metadata:
          $ref: "#/components/schemas/ExecutionMetadata"
        scheduleDate:
          type: string
          format: date-time
          nullable: true
        error:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionError"
    ExecutionController.EvalResult:
      type: object
      properties:
        result:
          type: string
        error:
          type: string
        stackTrace:
          type: string
    ExecutionController.SetLabelsByIdsRequest:
      required:
      - executionLabels
      - executionsId
      type: object
      properties:
        executionsId:
          type: array
          items:
            type: string
        executionLabels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
    ExecutionController.StateRequest:
      required:
      - state
      - taskRunId
      type: object
      properties:
        taskRunId:
          type: string
        state:
          $ref: "#/components/schemas/State.Type"
    ExecutionCountStatistics:
      required:
      - counts
      - total
      type: object
      properties:
        counts:
          properties:
            CREATED:
              type: integer
              format: int64
            RUNNING:
              type: integer
              format: int64
            PAUSED:
              type: integer
              format: int64
            RESTARTED:
              type: integer
              format: int64
            KILLING:
              type: integer
              format: int64
            SUCCESS:
              type: integer
              format: int64
            WARNING:
              type: integer
              format: int64
            FAILED:
              type: integer
              format: int64
            KILLED:
              type: integer
              format: int64
            CANCELLED:
              type: integer
              format: int64
            QUEUED:
              type: integer
              format: int64
            RETRYING:
              type: integer
              format: int64
            RETRIED:
              type: integer
              format: int64
            SKIPPED:
              type: integer
              format: int64
        total:
          type: integer
          format: int64
    ExecutionError:
      required:
      - message
      - stacktrace
      type: object
      properties:
        message:
          type: string
        stacktrace:
          type: string
    ExecutionMetadata:
      required:
      - attemptNumber
      - originalCreatedDate
      type: object
      properties:
        attemptNumber:
          type: integer
          format: int32
        originalCreatedDate:
          type: string
          format: date-time
    ExecutionRepositoryInterface.ChildFilter:
      type: string
      enum:
      - CHILD
      - MAIN
    ExecutionRepositoryInterface.FlowFilter:
      required:
      - id
      - namespace
      type: object
      properties:
        namespace:
          type: string
        id:
          type: string
    ExecutionTrigger:
      required:
      - id
      - logFile
      - type
      - variables
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        variables:
          type: object
          additionalProperties: true
        logFile:
          type: string
          format: uri
    ExecutionUsage:
      type: object
      properties:
        dailyExecutionsCount:
          type: array
          items:
            $ref: "#/components/schemas/DailyExecutionStatistics"
        dailyTaskRunsCount:
          type: array
          items:
            $ref: "#/components/schemas/DailyExecutionStatistics"
    FileAttributes:
      type: object
      properties:
        fileName:
          type: string
        lastModifiedTime:
          type: integer
          format: int64
        creationTime:
          type: integer
          format: int64
        type:
          $ref: "#/components/schemas/FileAttributes.FileType"
        size:
          type: integer
          format: int64
        metadata:
          type: object
          additionalProperties:
            type: string
    FileAttributes.FileType:
      type: string
      enum:
      - File
      - Directory
    FileMetas:
      required:
      - size
      type: object
      properties:
        size:
          type: integer
          format: int64
    Flow:
      required:
      - deleted
      - tasks
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractFlow"
      - properties:
          deleted:
            type: boolean
          taskDefaults:
            type: array
            deprecated: true
            items:
              $ref: "#/components/schemas/PluginDefault"
          description:
            type: string
          labels:
            type: object
            allOf:
            - oneOf:
              - $ref: "#/components/schemas/List_Object_"
              - $ref: "#/components/schemas/Map_Object.Object_"
            oneOf:
            - $ref: "#/components/schemas/List_Object_"
            - $ref: "#/components/schemas/Map_Object.Object_"
          variables:
            type: object
            additionalProperties: true
          tasks:
            minItems: 1
            type: array
            items:
              $ref: "#/components/schemas/Task"
          errors:
            type: array
            items:
              $ref: "#/components/schemas/Task"
          listeners:
            type: array
            deprecated: true
            items:
              $ref: "#/components/schemas/Listener"
          triggers:
            type: array
            items:
              $ref: "#/components/schemas/AbstractTrigger"
          pluginDefaults:
            type: array
            items:
              $ref: "#/components/schemas/PluginDefault"
          concurrency:
            $ref: "#/components/schemas/Concurrency"
          outputs:
            title: Output values available and exposes to other flows.
            type: array
            description: Output values make information about the execution of your
              Flow available and expose for other Kestra flows to use. Output values
              are similar to return values in programming languages.
            items:
              $ref: "#/components/schemas/Output"
          retry:
            $ref: "#/components/schemas/AbstractRetry"
    FlowController.TaskValidationType:
      type: string
      enum:
      - TASKS
      - TRIGGERS
    FlowForExecution:
      required:
      - deleted
      - tasks
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractFlow"
      - properties:
          deleted:
            type: boolean
          tasks:
            minItems: 1
            type: array
            items:
              $ref: "#/components/schemas/TaskForExecution"
          triggers:
            type: array
            items:
              $ref: "#/components/schemas/AbstractTriggerForExecution"
    FlowGraph:
      required:
      - clusters
      - edges
      - flowables
      - nodes
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/AbstractGraph"
        edges:
          type: array
          items:
            $ref: "#/components/schemas/FlowGraph.Edge"
        clusters:
          type: array
          items:
            $ref: "#/components/schemas/FlowGraph.Cluster"
        flowables:
          type: array
          items:
            type: string
    FlowGraph.Cluster:
      required:
      - cluster
      - end
      - nodes
      - parents
      - start
      type: object
      properties:
        cluster:
          $ref: "#/components/schemas/AbstractGraph"
        nodes:
          type: array
          items:
            type: string
        parents:
          type: array
          items:
            type: string
        start:
          type: string
        end:
          type: string
    FlowGraph.Edge:
      required:
      - relation
      - source
      - target
      type: object
      properties:
        source:
          type: string
        target:
          type: string
        relation:
          $ref: "#/components/schemas/Relation"
    FlowNode:
      required:
      - id
      - namespace
      - uid
      type: object
      properties:
        uid:
          type: string
        namespace:
          type: string
        id:
          type: string
    FlowRelation:
      type: string
      enum:
      - FLOW_TASK
      - FLOW_TRIGGER
    FlowScope:
      type: string
      enum:
      - USER
      - SYSTEM
    FlowTopologyGraph:
      required:
      - edges
      - nodes
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/FlowNode"
        edges:
          type: array
          items:
            $ref: "#/components/schemas/FlowTopologyGraph.Edge"
    FlowTopologyGraph.Edge:
      required:
      - relation
      - source
      - target
      type: object
      properties:
        source:
          type: string
        target:
          type: string
        relation:
          $ref: "#/components/schemas/FlowRelation"
    FlowUsage:
      type: object
      properties:
        count:
          type: integer
          format: int32
        namespacesCount:
          type: integer
          format: int64
        taskTypeCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
        triggerTypeCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
        taskRunnerTypeCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
    FlowWithSource:
      required:
      - deleted
      type: object
      allOf:
      - $ref: "#/components/schemas/Flow"
      - $ref: "#/components/schemas/AbstractFlow"
      - properties:
          deleted:
            type: boolean
          source:
            type: string
    HostUsage:
      type: object
      properties:
        uuid:
          type: string
        hardware:
          $ref: "#/components/schemas/HostUsage.Hardware"
        os:
          $ref: "#/components/schemas/HostUsage.Os"
        jvm:
          $ref: "#/components/schemas/HostUsage.Jvm"
    HostUsage.Hardware:
      type: object
      properties:
        logicalProcessorCount:
          type: integer
          format: int32
        physicalProcessorCount:
          type: integer
          format: int64
        maxFreq:
          type: integer
          format: int64
        memory:
          type: integer
          format: int64
        knownVmMacAddr:
          type: boolean
        knownDockerMacAddr:
          type: boolean
    HostUsage.Jvm:
      type: object
      properties:
        name:
          type: string
        vendor:
          type: string
        version:
          type: string
    HostUsage.Os:
      type: object
      properties:
        family:
          type: string
        version:
          type: string
        codeName:
          type: string
        buildNumber:
          type: string
    IdWithNamespace:
      type: object
      properties:
        namespace:
          type: string
        id:
          type: string
    InputType:
      required:
      - cls
      - type
      type: object
      properties:
        type:
          type: string
        cls:
          type: string
    Input_Object_:
      required:
      - id
      - type
      type: object
      properties:
        name:
          type: string
          deprecated: true
        id:
          title: The ID of the input.
          minLength: 1
          pattern: "^[a-zA-Z0-9][.a-zA-Z0-9_-]*"
          type: string
        type:
          title: The type of the input.
          allOf:
          - $ref: "#/components/schemas/Type"
        description:
          title: The description of the input.
          type: string
        dependsOn:
          title: The dependencies of the input.
          allOf:
          - $ref: "#/components/schemas/DependsOn"
        required:
          type: boolean
        defaults:
          title: The default value to use if no value is specified.
        displayName:
          title: The display name of the input.
          maxLength: 64
          type: string
    KVController.ApiDeleteBulkRequest:
      required:
      - keys
      type: object
      properties:
        keys:
          type: array
          items:
            type: string
      description: API Request for the bulk-delete operation.
    KVController.ApiDeleteBulkResponse:
      required:
      - keys
      type: object
      properties:
        keys:
          type: array
          items:
            type: string
      description: API Response for the bulk-delete operation.
    KVController.TypedValue:
      required:
      - type
      - value
      type: object
      properties:
        type:
          $ref: "#/components/schemas/KVType"
        value: {}
    KVEntry:
      required:
      - creationDate
      - expirationDate
      - key
      - updateDate
      type: object
      properties:
        key:
          type: string
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        expirationDate:
          type: string
          format: date-time
    KVType:
      type: string
      enum:
      - STRING
      - NUMBER
      - BOOLEAN
      - DATETIME
      - DATE
      - DURATION
      - JSON
    Label:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Level:
      type: string
      enum:
      - ERROR
      - WARN
      - INFO
      - DEBUG
      - TRACE
    List_Object_:
      type: object
      allOf:
      - $ref: "#/components/schemas/SequencedCollection_Object_"
      - $ref: "#/components/schemas/Collection_Object_"
      - properties:
          empty:
            type: boolean
          first: {}
          last: {}
    Listener:
      required:
      - conditions
      - description
      - tasks
      type: object
      properties:
        description:
          type: string
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/Condition"
        tasks:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Task"
    LogEntry:
      required:
      - attemptNumber
      - deleted
      - executionId
      - flowId
      - level
      - message
      - namespace
      - taskId
      - taskRunId
      - thread
      - timestamp
      - triggerId
      type: object
      properties:
        namespace:
          type: string
        flowId:
          type: string
        taskId:
          type: string
          nullable: true
        executionId:
          type: string
          nullable: true
        taskRunId:
          type: string
          nullable: true
        attemptNumber:
          type: integer
          format: int32
          nullable: true
        triggerId:
          type: string
          nullable: true
        timestamp:
          type: string
          format: date-time
        level:
          $ref: "#/components/schemas/Level"
        thread:
          type: string
        message:
          type: string
        deleted:
          type: boolean
    LogStatistics:
      required:
      - counts
      - groupBy
      - timestamp
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        counts:
          properties:
            ERROR:
              type: integer
              format: int64
            WARN:
              type: integer
              format: int64
            INFO:
              type: integer
              format: int64
            DEBUG:
              type: integer
              format: int64
            TRACE:
              type: integer
              format: int64
        groupBy:
          type: string
    Map_Object.Object_:
      type: object
      properties:
        empty:
          type: boolean
    MetricAggregation:
      required:
      - date
      - name
      - value
      type: object
      properties:
        name:
          type: string
        value:
          type: number
          format: double
        date:
          type: string
          format: date-time
    MetricAggregations:
      required:
      - aggregations
      - groupBy
      type: object
      properties:
        groupBy:
          type: string
        aggregations:
          type: array
          items:
            $ref: "#/components/schemas/MetricAggregation"
    MetricEntry:
      required:
      - deleted
      - executionId
      - flowId
      - name
      - namespace
      - tags
      - taskId
      - taskRunId
      - timestamp
      - type
      - value
      type: object
      properties:
        namespace:
          type: string
        flowId:
          type: string
        taskId:
          type: string
          nullable: true
        executionId:
          type: string
          nullable: true
        taskRunId:
          type: string
          nullable: true
        type:
          type: string
        name:
          type: string
        value:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
        tags:
          type: object
          additionalProperties:
            type: string
          nullable: true
        deleted:
          type: boolean
    MiscController.BasicAuthCredentials:
      required:
      - password
      - uid
      - username
      type: object
      properties:
        uid:
          type: string
        username:
          type: string
        password:
          type: string
    MiscController.Configuration:
      type: object
      properties:
        uuid:
          type: string
        version:
          type: string
        commitId:
          type: string
        commitDate:
          type: string
          format: date-time
        isTaskRunEnabled:
          type: boolean
        isAnonymousUsageEnabled:
          type: boolean
        isTemplateEnabled:
          type: boolean
        environment:
          $ref: "#/components/schemas/MiscController.Environment"
        preview:
          $ref: "#/components/schemas/MiscController.Preview"
        isBasicAuthEnabled:
          type: boolean
        systemNamespace:
          type: string
    MiscController.Environment:
      required:
      - color
      - name
      type: object
      properties:
        name:
          type: string
        color:
          type: string
    MiscController.Preview:
      required:
      - initial
      - max
      type: object
      properties:
        initial:
          type: integer
          format: int32
        max:
          type: integer
          format: int32
    Namespace:
      required:
      - deleted
      - id
      type: object
      properties:
        id:
          pattern: "^[a-z0-9][a-z0-9._-]*"
          type: string
        deleted:
          type: boolean
    NamespaceWithDisabled:
      required:
      - deleted
      - disabled
      - id
      type: object
      allOf:
      - $ref: "#/components/schemas/Namespace"
      - properties:
          id:
            pattern: "^[a-z0-9][a-z0-9._-]*"
            type: string
          deleted:
            type: boolean
          disabled:
            type: boolean
    Output:
      required:
      - id
      - type
      - value
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][.a-zA-Z0-9_-]*"
          type: string
        description:
          type: string
        value: {}
        type:
          $ref: "#/components/schemas/Type"
    PagedResults_BlueprintController.BlueprintItem_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_BlueprintController.BlueprintItem_"
        total:
          type: integer
          format: int64
    PagedResults_Execution_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_Execution_"
        total:
          type: integer
          format: int64
    PagedResults_Flow_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_Flow_"
        total:
          type: integer
          format: int64
    PagedResults_LogEntry_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_LogEntry_"
        total:
          type: integer
          format: int64
    PagedResults_MetricEntry_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_MetricEntry_"
        total:
          type: integer
          format: int64
    PagedResults_NamespaceWithDisabled_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_NamespaceWithDisabled_"
        total:
          type: integer
          format: int64
    PagedResults_SearchResult_Flow__:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_SearchResult_Flow__"
        total:
          type: integer
          format: int64
    PagedResults_TaskRun_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_TaskRun_"
        total:
          type: integer
          format: int64
    PagedResults_Template_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_Template_"
        total:
          type: integer
          format: int64
    PagedResults_TriggerController.Triggers_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_TriggerController.Triggers_"
        total:
          type: integer
          format: int64
    PagedResults_Trigger_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_Trigger_"
        total:
          type: integer
          format: int64
    Plugin:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
        license:
          type: string
        longDescription:
          type: string
        group:
          type: string
        version:
          type: string
        manifest:
          type: object
          additionalProperties:
            type: string
        tasks:
          type: array
          items:
            type: string
        triggers:
          type: array
          items:
            type: string
        conditions:
          type: array
          items:
            type: string
        controllers:
          type: array
          items:
            type: string
        storages:
          type: array
          items:
            type: string
        secrets:
          type: array
          items:
            type: string
        taskRunners:
          type: array
          items:
            type: string
        guides:
          type: array
          items:
            type: string
        aliases:
          type: array
          items:
            type: string
        categories:
          type: array
          items:
            $ref: "#/components/schemas/PluginSubGroup.PluginCategory"
        subGroup:
          type: string
    PluginDefault:
      required:
      - forced
      - type
      - values
      type: object
      properties:
        type:
          type: string
        forced:
          type: boolean
        values:
          type: object
          additionalProperties: true
    PluginIcon:
      type: object
      properties:
        name:
          type: string
        icon:
          type: string
        flowable:
          type: boolean
    PluginSubGroup.PluginCategory:
      type: string
      enum:
      - DATABASE
      - MESSAGING
      - SCRIPT
      - TRANSFORMATION
      - BATCH
      - ALERTING
      - CLOUD
      - STORAGE
      - OTHER
      - TOOL
      - AI
      - CORE
      - INGESTION
      - BI
    PluginUsage:
      type: object
      properties:
        manifest:
          type: object
          additionalProperties:
            type: string
    Relation:
      required:
      - relationType
      - value
      type: object
      properties:
        relationType:
          $ref: "#/components/schemas/RelationType"
        value:
          type: string
    RelationType:
      type: string
      enum:
      - SEQUENTIAL
      - CHOICE
      - ERROR
      - PARALLEL
      - DYNAMIC
    Schema:
      type: object
      properties:
        properties:
          type: object
          additionalProperties: true
        outputs:
          type: object
          additionalProperties: true
        definitions:
          type: object
          additionalProperties: true
    SchemaType:
      type: string
      enum:
      - flow
      - template
      - task
      - trigger
      - plugindefault
    SearchResult_Flow_:
      required:
      - fragments
      - model
      type: object
      properties:
        model:
          $ref: "#/components/schemas/Flow"
        fragments:
          type: array
          items:
            type: string
    SequencedCollection_Object_:
      type: object
      allOf:
      - $ref: "#/components/schemas/Collection_Object_"
      - properties:
          first: {}
          last: {}
    ServerType:
      type: string
      enum:
      - EXECUTOR
      - INDEXER
      - SCHEDULER
      - STANDALONE
      - WEBSERVER
      - WORKER
    ServiceUsage:
      required:
      - dailyStatistics
      type: object
      properties:
        dailyStatistics:
          type: array
          items:
            $ref: "#/components/schemas/ServiceUsage.DailyServiceStatistics"
    ServiceUsage.DailyServiceStatistics:
      required:
      - type
      - values
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            $ref: "#/components/schemas/ServiceUsage.DailyStatistics"
    ServiceUsage.DailyStatistics:
      required:
      - avg
      - date
      - max
      - min
      type: object
      properties:
        date:
          type: string
          format: date
        min:
          type: integer
          format: int64
        max:
          type: integer
          format: int64
        avg:
          type: integer
          format: int64
    State:
      required:
      - current
      type: object
      properties:
        duration:
          type: string
          readOnly: true
        startDate:
          type: string
          format: date-time
          readOnly: true
        endDate:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        current:
          $ref: "#/components/schemas/State.Type"
        histories:
          type: array
          items:
            $ref: "#/components/schemas/State.History"
    State.History:
      required:
      - date
      - state
      type: object
      properties:
        state:
          $ref: "#/components/schemas/State.Type"
        date:
          type: string
          format: date-time
    State.Type:
      type: string
      enum:
      - CREATED
      - RUNNING
      - PAUSED
      - RESTARTED
      - KILLING
      - SUCCESS
      - WARNING
      - FAILED
      - KILLED
      - CANCELLED
      - QUEUED
      - RETRYING
      - RETRIED
      - SKIPPED
    StatsController.ByFlowStatisticRequest:
      type: object
      properties:
        q:
          type: string
          nullable: true
        namespace:
          type: string
          nullable: true
        flowId:
          type: string
          nullable: true
        flows:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/ExecutionRepositoryInterface.FlowFilter"
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        namespaceOnly:
          type: boolean
          nullable: true
    StatsController.ByNamespaceStatisticRequest:
      type: object
      properties:
        namespace:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
    StatsController.LastExecutionsRequest:
      type: object
      properties:
        flows:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/ExecutionRepositoryInterface.FlowFilter"
    StatsController.LogStatisticRequest:
      type: object
      properties:
        q:
          type: string
          nullable: true
        namespace:
          type: string
          nullable: true
        flowId:
          type: string
          nullable: true
        logLevel:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
    StatsController.StatisticRequest:
      type: object
      properties:
        q:
          type: string
          nullable: true
        scope:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
        namespace:
          type: string
          nullable: true
        flowId:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        state:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
    StatsController.SummaryRequest:
      type: object
      properties:
        namespace:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
    SummaryStatistics:
      required:
      - flows
      - triggers
      type: object
      properties:
        flows:
          type: integer
          format: int32
        triggers:
          type: integer
          format: int32
    Task:
      required:
      - id
      - type
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
        description:
          type: string
        retry:
          $ref: "#/components/schemas/AbstractRetry"
        timeout:
          type: string
        disabled:
          type: boolean
        workerGroup:
          $ref: "#/components/schemas/WorkerGroup"
        logLevel:
          $ref: "#/components/schemas/Level"
        allowFailure:
          type: boolean
        logToFile:
          type: boolean
        runIf:
          type: string
        allowWarning:
          type: boolean
    TaskForExecution:
      required:
      - id
      - type
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/TaskForExecution"
        inputs:
          type: array
          items:
            $ref: "#/components/schemas/Input_Object_"
        subflowId:
          $ref: "#/components/schemas/ExecutableTask.SubflowId"
    TaskRun:
      required:
      - attempts
      - error
      - executionId
      - flowId
      - id
      - iteration
      - namespace
      - outputs
      - parentTaskRunId
      - state
      - taskId
      - value
      type: object
      properties:
        items:
          type: string
          deprecated: true
        id:
          type: string
        executionId:
          type: string
        namespace:
          type: string
        flowId:
          type: string
        taskId:
          type: string
        parentTaskRunId:
          type: string
        value:
          type: string
        attempts:
          type: array
          items:
            $ref: "#/components/schemas/TaskRunAttempt"
        outputs:
          type: object
          additionalProperties: true
        state:
          $ref: "#/components/schemas/State"
        iteration:
          type: integer
          format: int32
        error:
          $ref: "#/components/schemas/ExecutionError"
    TaskRunAttempt:
      required:
      - logFile
      - state
      type: object
      properties:
        metrics:
          type: array
          deprecated: true
          items:
            $ref: "#/components/schemas/AbstractMetricEntry_Object_"
        state:
          $ref: "#/components/schemas/State"
        logFile:
          type: string
          format: uri
    Template:
      required:
      - deleted
      - description
      - errors
      - id
      - namespace
      - tasks
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9._-]*"
          type: string
        namespace:
          pattern: "^[a-z0-9][a-z0-9._-]*"
          type: string
        description:
          type: string
        tasks:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Task"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Task"
        deleted:
          type: boolean
    Trigger:
      type: object
      allOf:
      - $ref: "#/components/schemas/TriggerContext"
      - properties:
          executionId:
            type: string
            nullable: true
          executionCurrentState:
            nullable: true
            allOf:
            - $ref: "#/components/schemas/State.Type"
          updatedDate:
            type: string
            format: date-time
            nullable: true
          evaluateRunningDate:
            type: string
            format: date-time
            nullable: true
          workerId:
            type: string
            nullable: true
    TriggerContext:
      required:
      - date
      - flowId
      - namespace
      - triggerId
      type: object
      properties:
        disabled:
          type: boolean
        tenantId:
          pattern: "^[a-z0-9][a-z0-9_-]"
          type: string
        namespace:
          type: string
        flowId:
          type: string
        triggerId:
          type: string
        date:
          type: string
          format: date-time
        nextExecutionDate:
          type: string
          format: date-time
          nullable: true
        backfill:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Backfill"
        stopAfter:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
    TriggerController.SetDisabledRequest:
      required:
      - disabled
      - triggers
      type: object
      properties:
        triggers:
          type: array
          items:
            $ref: "#/components/schemas/Trigger"
        disabled:
          type: boolean
    TriggerController.Triggers:
      required:
      - abstractTrigger
      - triggerContext
      type: object
      properties:
        abstractTrigger:
          $ref: "#/components/schemas/AbstractTrigger"
        triggerContext:
          $ref: "#/components/schemas/Trigger"
    Type:
      type: string
      enum:
      - STRING
      - ENUM
      - SELECT
      - INT
      - FLOAT
      - BOOLEAN
      - DATETIME
      - DATE
      - TIME
      - DURATION
      - FILE
      - JSON
      - URI
      - SECRET
      - ARRAY
      - MULTISELECT
      - YAML
      - EMAIL
    Usage:
      required:
      - configurations
      - environments
      - executions
      - flows
      - host
      - instanceUuid
      - plugins
      - serverType
      - services
      - startTime
      - startUuid
      - uri
      - uuid
      - version
      - zoneId
      type: object
      properties:
        uuid:
          type: string
        startUuid:
          type: string
        instanceUuid:
          type: string
        serverType:
          $ref: "#/components/schemas/ServerType"
        version:
          type: string
        zoneId:
          type: string
        uri:
          type: string
          nullable: true
        environments:
          type: array
          nullable: true
          items:
            type: string
        startTime:
          type: string
          format: date-time
        host:
          $ref: "#/components/schemas/HostUsage"
        configurations:
          $ref: "#/components/schemas/ConfigurationUsage"
        plugins:
          type: array
          items:
            $ref: "#/components/schemas/PluginUsage"
        flows:
          $ref: "#/components/schemas/FlowUsage"
        executions:
          $ref: "#/components/schemas/ExecutionUsage"
        services:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ServiceUsage"
    ValidateConstraintViolation:
      required:
      - constraints
      - deprecationPaths
      - flow
      - index
      - namespace
      - outdated
      - warnings
      type: object
      properties:
        flow:
          type: string
        namespace:
          type: string
        index:
          type: integer
          format: int32
        constraints:
          type: string
        outdated:
          type: boolean
        deprecationPaths:
          type: array
          items:
            type: string
        warnings:
          type: array
          items:
            type: string
    WorkerGroup:
      type: object
      properties:
        key:
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
