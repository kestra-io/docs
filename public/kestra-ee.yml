openapi: 3.0.1
info:
  title: Kestra EE
  description: |-
    All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/>
    This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
tags:
- name: Flows
  description: Flows api
- name: Templates
  description: Templates api
- name: Executions
  description: Executions api
- name: Logs
  description: Logs api
- name: Namespaces
  description: Namespaces api
- name: Users
  description: Users api
- name: Groups
  description: Groups api
- name: Bindings
  description: Bindings api
- name: Roles
  description: Roles api
- name: Audit Logs
  description: Audit Logs api
- name: Auths
  description: Auth api
- name: Stats
  description: Stats api
- name: Tenants
  description: Tenants api
- name: Misc
  description: Misc api
paths:
  /api/v1/acls/actions:
    get:
      tags:
      - Misc
      summary: Get list of actions
      operationId: actions
      responses:
        "200":
          description: actions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
  /api/v1/acls/actions/{tenant}:
    get:
      tags:
      - Misc
      summary: Get list of actions
      operationId: actions_1
      responses:
        "200":
          description: actions_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Action'
  /api/v1/acls/permissions:
    get:
      tags:
      - Misc
      summary: Get list of permissions
      operationId: permissions
      responses:
        "200":
          description: permissions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
  /api/v1/acls/permissions/{tenant}:
    get:
      tags:
      - Misc
      summary: Get list of permissions
      operationId: permissions_1
      responses:
        "200":
          description: permissions_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Permission'
  /api/v1/auditlogs/find:
    post:
      tags:
      - Audit Logs
      summary: Find audit logs
      operationId: find
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditLogController.FindRequest'
        required: true
      responses:
        "200":
          description: find 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogController.AuditLogWithUser'
  /api/v1/auditlogs/find/{tenant}:
    post:
      tags:
      - Audit Logs
      summary: Find audit logs
      operationId: find_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuditLogController.FindRequest'
        required: true
      responses:
        "200":
          description: find_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditLogController.AuditLogWithUser'
  /api/v1/auditlogs/search:
    get:
      tags:
      - Audit Logs
      summary: Search for audit logs
      operationId: search
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: executionId
        in: query
        description: An execution filter
        schema:
          type: string
          nullable: true
      - name: userId
        in: query
        description: A user id filter
        schema:
          type: string
          nullable: true
      - name: id
        in: query
        description: A id filter
        schema:
          type: string
          nullable: true
      - name: permission
        in: query
        description: A permission filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Permission'
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      responses:
        "200":
          description: search 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_AuditLogController.AuditLogWithUser_'
  /api/v1/auditlogs/search/{tenant}:
    get:
      tags:
      - Audit Logs
      summary: Search for audit logs
      operationId: search_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: executionId
        in: query
        description: An execution filter
        schema:
          type: string
          nullable: true
      - name: userId
        in: query
        description: A user id filter
        schema:
          type: string
          nullable: true
      - name: id
        in: query
        description: A id filter
        schema:
          type: string
          nullable: true
      - name: permission
        in: query
        description: A permission filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Permission'
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      responses:
        "200":
          description: search_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_AuditLogController.AuditLogWithUser_'
  /api/v1/auths:
    get:
      tags:
      - Auths
      summary: Get list of authentification methods
      operationId: index
      responses:
        "200":
          description: index 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthController.Auth'
  /api/v1/basicAuth:
    post:
      tags:
      - Misc
      summary: Add basic auth to current instance
      operationId: addBasicAuth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MiscController.BasicAuthCredentials'
        required: true
      responses:
        "200":
          description: addBasicAuth 200 response
  /api/v1/basicAuth/{tenant}:
    post:
      tags:
      - Misc
      summary: Add basic auth to current instance
      operationId: addBasicAuth_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MiscController.BasicAuthCredentials'
        required: true
      responses:
        "200":
          description: addBasicAuth_1 200 response
  /api/v1/bindings:
    post:
      tags:
      - Bindings
      summary: Create a binding
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Binding'
        required: true
      responses:
        "200":
          description: create 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractBindingController.BindingDetail'
  /api/v1/bindings/search:
    get:
      tags:
      - Bindings
      summary: Search for bindings
      operationId: find_2
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: Binding type filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Binding.Type'
      - name: id
        in: query
        description: External id filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_AbstractBindingController.BindingDetail_'
  /api/v1/bindings/search/{tenant}:
    get:
      tags:
      - Bindings
      summary: Search for bindings
      operationId: find_3
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: Binding type filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Binding.Type'
      - name: id
        in: query
        description: External id filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_AbstractBindingController.BindingDetail_'
  /api/v1/bindings/{id}:
    get:
      tags:
      - Bindings
      summary: Get a binding
      operationId: index_1
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractBindingController.BindingDetail'
    delete:
      tags:
      - Bindings
      summary: Delete a binding
      operationId: delete
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/bindings/{id}/{tenant}:
    get:
      tags:
      - Bindings
      summary: Get a binding
      operationId: index_2
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractBindingController.BindingDetail'
    delete:
      tags:
      - Bindings
      summary: Delete a binding
      operationId: delete_1
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/bindings/{tenant}:
    post:
      tags:
      - Bindings
      summary: Create a binding
      operationId: create_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Binding'
        required: true
      responses:
        "200":
          description: create_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractBindingController.BindingDetail'
  /api/v1/blueprints/community:
    get:
      tags:
      - Blueprints
      summary: List all blueprints
      operationId: blueprints
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: string
          nullable: true
      - name: tags
        in: query
        description: A tags filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        "200":
          description: blueprints 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_BlueprintController.BlueprintItem_'
  /api/v1/blueprints/community/tags:
    get:
      tags:
      - Blueprint Tags
      summary: List blueprint tags matching the filter
      operationId: blueprintTags
      parameters:
      - name: q
        in: query
        description: A string filter to get tags with matching blueprints only
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: blueprintTags 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlueprintController.BlueprintTagItem'
  /api/v1/blueprints/community/tags/{tenant}:
    get:
      tags:
      - Blueprint Tags
      summary: List blueprint tags matching the filter
      operationId: blueprintTags_1
      parameters:
      - name: q
        in: query
        description: A string filter to get tags with matching blueprints only
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: blueprintTags_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlueprintController.BlueprintTagItem'
  /api/v1/blueprints/community/{id}:
    get:
      tags:
      - blueprints
      summary: Get a blueprint
      operationId: blueprint
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprint 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintController.BlueprintItemWithFlow'
  /api/v1/blueprints/community/{id}/flow:
    get:
      tags:
      - blueprints
      summary: Get a blueprint flow
      operationId: blueprintFlow
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprintFlow 200 response
          content:
            application/yaml:
              schema:
                type: string
  /api/v1/blueprints/community/{id}/flow/{tenant}:
    get:
      tags:
      - blueprints
      summary: Get a blueprint flow
      operationId: blueprintFlow_1
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprintFlow_1 200 response
          content:
            application/yaml:
              schema:
                type: string
  /api/v1/blueprints/community/{id}/graph:
    get:
      tags:
      - blueprints
      summary: Get a blueprint graph
      operationId: blueprintGraph
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprintGraph 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v1/blueprints/community/{id}/graph/{tenant}:
    get:
      tags:
      - blueprints
      summary: Get a blueprint graph
      operationId: blueprintGraph_1
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprintGraph_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v1/blueprints/community/{id}/{tenant}:
    get:
      tags:
      - blueprints
      summary: Get a blueprint
      operationId: blueprint_1
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprint_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintController.BlueprintItemWithFlow'
  /api/v1/blueprints/community/{tenant}:
    get:
      tags:
      - Blueprints
      summary: List all blueprints
      operationId: blueprints_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: string
          nullable: true
      - name: tags
        in: query
        description: A tags filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        "200":
          description: blueprints_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_BlueprintController.BlueprintItem_'
  /api/v1/blueprints/custom:
    get:
      tags:
      - Blueprints
      summary: List all internal blueprints
      operationId: internalBlueprints
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: string
          nullable: true
      - name: tags
        in: query
        description: A tags filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        "200":
          description: internalBlueprints 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Blueprint_'
    post:
      tags:
      - Blueprints
      summary: Create a new internal blueprint
      operationId: createInternalBlueprints
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlueprintWithFlow'
        required: true
      responses:
        "200":
          description: createInternalBlueprints 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintWithFlow'
  /api/v1/blueprints/custom/tags:
    get:
      tags:
      - Blueprint Tags
      summary: List all internal blueprint tags
      operationId: internalBlueprintTags
      parameters:
      - name: q
        in: query
        description: A string filter to get tags with matching blueprints only
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: internalBlueprintTags 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/blueprints/custom/tags/{tenant}:
    get:
      tags:
      - Blueprint Tags
      summary: List all internal blueprint tags
      operationId: internalBlueprintTags_1
      parameters:
      - name: q
        in: query
        description: A string filter to get tags with matching blueprints only
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: internalBlueprintTags_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/blueprints/custom/{id}:
    get:
      tags:
      - blueprints
      summary: Get an internal blueprint
      operationId: internalBlueprint
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprint 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintWithFlow'
    put:
      tags:
      - Blueprints
      summary: Update an internal blueprint
      operationId: updateInternalBlueprints
      parameters:
      - name: id
        in: path
        description: The id of the internal blueprint to update
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlueprintWithFlow'
        required: true
      responses:
        "200":
          description: updateInternalBlueprints 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintWithFlow'
    delete:
      tags:
      - Blueprints
      summary: Delete an internal blueprint
      operationId: internalBlueprints_1
      parameters:
      - name: id
        in: path
        description: The internal blueprint id to delete
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprints_1 200 response
  /api/v1/blueprints/custom/{id}/flow:
    get:
      tags:
      - blueprints
      summary: Get an internal blueprint flow
      operationId: internalBlueprintFlow
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprintFlow 200 response
          content:
            application/yaml:
              schema:
                type: string
  /api/v1/blueprints/custom/{id}/flow/{tenant}:
    get:
      tags:
      - blueprints
      summary: Get an internal blueprint flow
      operationId: internalBlueprintFlow_1
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprintFlow_1 200 response
          content:
            application/yaml:
              schema:
                type: string
  /api/v1/blueprints/custom/{id}/{tenant}:
    get:
      tags:
      - blueprints
      summary: Get an internal blueprint
      operationId: internalBlueprint_1
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprint_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintWithFlow'
    put:
      tags:
      - Blueprints
      summary: Update an internal blueprint
      operationId: updateInternalBlueprints_1
      parameters:
      - name: id
        in: path
        description: The id of the internal blueprint to update
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlueprintWithFlow'
        required: true
      responses:
        "200":
          description: updateInternalBlueprints_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintWithFlow'
    delete:
      tags:
      - Blueprints
      summary: Delete an internal blueprint
      operationId: internalBlueprints_2
      parameters:
      - name: id
        in: path
        description: The internal blueprint id to delete
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprints_2 200 response
  /api/v1/blueprints/custom/{tenant}:
    get:
      tags:
      - Blueprints
      summary: List all internal blueprints
      operationId: internalBlueprints_3
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: string
          nullable: true
      - name: tags
        in: query
        description: A tags filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        "200":
          description: internalBlueprints_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Blueprint_'
    post:
      tags:
      - Blueprints
      summary: Create a new internal blueprint
      operationId: createInternalBlueprints_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlueprintWithFlow'
        required: true
      responses:
        "200":
          description: createInternalBlueprints_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlueprintWithFlow'
  /api/v1/cluster/services/active:
    get:
      tags:
      - Services
      summary: Get details about active services
      operationId: active
      responses:
        "200":
          description: active 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterController.ApiActiveServiceList'
  /api/v1/cluster/services/active/{tenant}:
    get:
      tags:
      - Services
      summary: Get details about active services
      operationId: active_1
      responses:
        "200":
          description: active_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterController.ApiActiveServiceList'
  /api/v1/cluster/services/search:
    get:
      tags:
      - Services
      summary: Search for service
      operationId: find_4
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: state
        in: query
        description: The state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Service.ServiceState'
      - name: type
        in: query
        description: The server type filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Service.ServiceType'
      responses:
        "200":
          description: find_4 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_ClusterController.ApiServiceInstance_'
  /api/v1/cluster/services/search/{tenant}:
    get:
      tags:
      - Services
      summary: Search for service
      operationId: find_5
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: state
        in: query
        description: The state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Service.ServiceState'
      - name: type
        in: query
        description: The server type filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/Service.ServiceType'
      responses:
        "200":
          description: find_5 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_ClusterController.ApiServiceInstance_'
  /api/v1/cluster/services/{id}:
    get:
      tags:
      - Services
      summary: Get details about a service
      operationId: index_3
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInstance'
  /api/v1/cluster/services/{id}/{tenant}:
    get:
      tags:
      - Services
      summary: Get details about a service
      operationId: index_4
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_4 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceInstance'
  /api/v1/configs:
    get:
      tags:
      - Misc
      summary: Get current configurations
      operationId: configuration
      responses:
        "200":
          description: configuration 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MiscController.ConfigurationEe'
  /api/v1/configs/{tenant}:
    get:
      tags:
      - Misc
      summary: Get current configurations
      operationId: configuration_1
      responses:
        "200":
          description: configuration_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MiscController.ConfigurationEe'
  /api/v1/executions:
    get:
      tags:
      - Executions
      summary: Search for executions for a flow
      operationId: findByFlowId
      parameters:
      - name: namespace
        in: query
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: query
        description: The flow id
        required: true
        schema:
          type: string
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: findByFlowId 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Execution_'
  /api/v1/executions/by-ids:
    delete:
      tags:
      - Executions
      summary: Delete a list of executions
      operationId: deleteByIds
      parameters:
      - name: includeNonTerminated
        in: query
        description: Specificies whether to delete non-terminated executions
        schema:
          type: boolean
          nullable: true
          default: false
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
        "422":
          description: Deleted with errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkErrorResponse'
  /api/v1/executions/by-ids/{tenant}:
    delete:
      tags:
      - Executions
      summary: Delete a list of executions
      operationId: deleteByIds_1
      parameters:
      - name: includeNonTerminated
        in: query
        description: Specificies whether to delete non-terminated executions
        schema:
          type: boolean
          nullable: true
          default: false
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
        "422":
          description: Deleted with errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkErrorResponse'
  /api/v1/executions/by-query:
    delete:
      tags:
      - Executions
      summary: Delete executions filter by query parameters
      operationId: deleteByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Duration'
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      - name: includeNonTerminated
        in: query
        description: Specificies whether to delete non-terminated executions
        schema:
          type: boolean
          nullable: true
          default: false
      responses:
        "200":
          description: deleteByQuery 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/executions/by-query/{tenant}:
    delete:
      tags:
      - Executions
      summary: Delete executions filter by query parameters
      operationId: deleteByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Duration'
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      - name: includeNonTerminated
        in: query
        description: Specificies whether to delete non-terminated executions
        schema:
          type: boolean
          nullable: true
          default: false
      responses:
        "200":
          description: deleteByQuery_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/executions/flows/{namespace}/{flowId}:
    get:
      tags:
      - Executions
      summary: Get flow information's for an execution
      operationId: getFlowForExecution
      parameters:
      - name: namespace
        in: path
        description: The namespace of the flow
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: getFlowForExecution 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowForExecution'
  /api/v1/executions/flows/{namespace}/{flowId}/{tenant}:
    get:
      tags:
      - Executions
      summary: Get flow information's for an execution
      operationId: getFlowForExecution_1
      parameters:
      - name: namespace
        in: path
        description: The namespace of the flow
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: getFlowForExecution_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowForExecution'
  /api/v1/executions/kill/by-ids:
    delete:
      tags:
      - Executions
      summary: Kill a list of executions
      operationId: killByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
        "422":
          description: Killed with errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkErrorResponse'
  /api/v1/executions/kill/by-ids/{tenant}:
    delete:
      tags:
      - Executions
      summary: Kill a list of executions
      operationId: killByIds_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
        "422":
          description: Killed with errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkErrorResponse'
  /api/v1/executions/kill/by-query:
    delete:
      tags:
      - Executions
      summary: Kill executions filter by query parameters
      operationId: killByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Duration'
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      responses:
        "200":
          description: killByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/kill/by-query/{tenant}:
    delete:
      tags:
      - Executions
      summary: Kill executions filter by query parameters
      operationId: killByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Duration'
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      responses:
        "200":
          description: killByQuery_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/labels/by-ids:
    post:
      tags:
      - Executions
      summary: Set labels on a list of executions
      operationId: setLabelsByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutionController.SetLabelsByIdsRequest'
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
        "422":
          description: Killed with errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkErrorResponse'
  /api/v1/executions/labels/by-ids/{tenant}:
    post:
      tags:
      - Executions
      summary: Set labels on a list of executions
      operationId: setLabelsByIds_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutionController.SetLabelsByIdsRequest'
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
        "422":
          description: Killed with errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkErrorResponse'
  /api/v1/executions/labels/by-query:
    post:
      tags:
      - Executions
      summary: Set label on executions filter by query parameters
      operationId: setLabelsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Duration'
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Label'
        required: true
      responses:
        "200":
          description: setLabelsByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/labels/by-query/{tenant}:
    post:
      tags:
      - Executions
      summary: Set label on executions filter by query parameters
      operationId: setLabelsByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Duration'
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Label'
        required: true
      responses:
        "200":
          description: setLabelsByQuery_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/namespaces:
    get:
      tags:
      - Executions
      summary: Get all namespaces that have executable flows
      operationId: listDistinctNamespace
      responses:
        "200":
          description: listDistinctNamespace 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/executions/namespaces/{namespace}/flows:
    get:
      tags:
      - Executions
      summary: Get all flow ids for a namespace
      operationId: getFlowsByNamespace
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowsByNamespace 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlowForExecution'
  /api/v1/executions/namespaces/{namespace}/flows/{tenant}:
    get:
      tags:
      - Executions
      summary: Get all flow ids for a namespace
      operationId: getFlowsByNamespace_1
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowsByNamespace_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlowForExecution'
  /api/v1/executions/namespaces/{tenant}:
    get:
      tags:
      - Executions
      summary: Get all namespaces that have executable flows
      operationId: listDistinctNamespace_1
      responses:
        "200":
          description: listDistinctNamespace_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/executions/replay/by-ids:
    post:
      tags:
      - Executions
      summary: Create new executions from old ones. Keep the flow revision
      operationId: replayByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
        "422":
          description: Replayed with errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkErrorResponse'
  /api/v1/executions/replay/by-ids/{tenant}:
    post:
      tags:
      - Executions
      summary: Create new executions from old ones. Keep the flow revision
      operationId: replayByIds_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
        "422":
          description: Replayed with errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkErrorResponse'
  /api/v1/executions/replay/by-query:
    post:
      tags:
      - Executions
      summary: Create new executions from old ones filter by query parameters. Keep
        the flow revision
      operationId: replayByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Duration'
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      responses:
        "200":
          description: replayByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/replay/by-query/{tenant}:
    post:
      tags:
      - Executions
      summary: Create new executions from old ones filter by query parameters. Keep
        the flow revision
      operationId: replayByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Duration'
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      responses:
        "200":
          description: replayByQuery_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/restart/by-ids:
    post:
      tags:
      - Executions
      summary: Restart a list of executions
      operationId: restartByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
        "422":
          description: Restarted with errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkErrorResponse'
  /api/v1/executions/restart/by-ids/{tenant}:
    post:
      tags:
      - Executions
      summary: Restart a list of executions
      operationId: restartByIds_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
        "422":
          description: Restarted with errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkErrorResponse'
  /api/v1/executions/restart/by-query:
    post:
      tags:
      - Executions
      summary: Restart executions filter by query parameters
      operationId: restartByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Duration'
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      responses:
        "200":
          description: restartByQuery 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/executions/restart/by-query/{tenant}:
    post:
      tags:
      - Executions
      summary: Restart executions filter by query parameters
      operationId: restartByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Duration'
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      responses:
        "200":
          description: restartByQuery_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/executions/resume/by-ids:
    post:
      tags:
      - Executions
      summary: Resume a list of paused executions
      operationId: resumeByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
        "422":
          description: Resumed with errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkErrorResponse'
  /api/v1/executions/resume/by-ids/{tenant}:
    post:
      tags:
      - Executions
      summary: Resume a list of paused executions
      operationId: resumeByIds_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
        "422":
          description: Resumed with errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkErrorResponse'
  /api/v1/executions/resume/by-query:
    post:
      tags:
      - Executions
      summary: Resume executions filter by query parameters
      operationId: resumeByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Duration'
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      responses:
        "200":
          description: resumeByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/resume/by-query/{tenant}:
    post:
      tags:
      - Executions
      summary: Resume executions filter by query parameters
      operationId: resumeByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Duration'
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      responses:
        "200":
          description: resumeByQuery_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/search:
    get:
      tags:
      - Executions
      summary: Search for executions
      operationId: find_6
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Duration'
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      responses:
        "200":
          description: find_6 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Execution_'
  /api/v1/executions/search/{tenant}:
    get:
      tags:
      - Executions
      summary: Search for executions
      operationId: find_7
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Duration'
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      responses:
        "200":
          description: find_7 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Execution_'
  /api/v1/executions/trigger/{namespace}/{id}:
    post:
      tags:
      - Executions
      summary: Trigger a new execution for a flow
      operationId: trigger
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: wait
        in: query
        description: If the server will wait the end of the execution
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: The flow revision or latest if null
        schema:
          type: integer
          format: int32
          nullable: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              nullable: true
              items:
                type: string
                format: binary
      responses:
        "409":
          description: if the flow is disabled
        "200":
          description: trigger 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Execution'
  /api/v1/executions/trigger/{namespace}/{id}/{tenant}:
    post:
      tags:
      - Executions
      summary: Trigger a new execution for a flow
      operationId: trigger_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: wait
        in: query
        description: If the server will wait the end of the execution
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: The flow revision or latest if null
        schema:
          type: integer
          format: int32
          nullable: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              nullable: true
              items:
                type: string
                format: binary
      responses:
        "409":
          description: if the flow is disabled
        "200":
          description: trigger_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Execution'
  /api/v1/executions/webhook/{namespace}/{id}/{key}:
    get:
      tags:
      - Executions
      summary: Trigger a new execution by GET webhook trigger
      operationId: webhookTriggerGet
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerGet 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
    put:
      tags:
      - Executions
      summary: Trigger a new execution by PUT webhook trigger
      operationId: webhookTriggerPut
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerPut 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
    post:
      tags:
      - Executions
      summary: Trigger a new execution by POST webhook trigger
      operationId: webhookTriggerPost
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerPost 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
  /api/v1/executions/webhook/{namespace}/{id}/{key}/{tenant}:
    get:
      tags:
      - Executions
      summary: Trigger a new execution by GET webhook trigger
      operationId: webhookTriggerGet_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerGet_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
    put:
      tags:
      - Executions
      summary: Trigger a new execution by PUT webhook trigger
      operationId: webhookTriggerPut_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerPut_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
    post:
      tags:
      - Executions
      summary: Trigger a new execution by POST webhook trigger
      operationId: webhookTriggerPost_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerPost_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
  /api/v1/executions/{executionId}:
    get:
      tags:
      - Executions
      summary: Get an execution
      operationId: get
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: get 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
    delete:
      tags:
      - Executions
      summary: Delete an execution
      operationId: delete_2
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "200":
          description: delete_2 200 response
  /api/v1/executions/{executionId}/eval/{taskRunId}:
    post:
      tags:
      - Executions
      summary: Evaluate a variable expression for this taskrun
      operationId: eval
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: taskRunId
        in: path
        description: The taskrun id
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: eval 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionController.EvalResult'
  /api/v1/executions/{executionId}/eval/{taskRunId}/{tenant}:
    post:
      tags:
      - Executions
      summary: Evaluate a variable expression for this taskrun
      operationId: eval_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: taskRunId
        in: path
        description: The taskrun id
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: eval_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionController.EvalResult'
  /api/v1/executions/{executionId}/file:
    get:
      tags:
      - Executions
      summary: Download file for an execution
      operationId: file
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: file 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/v1/executions/{executionId}/file/metas:
    get:
      tags:
      - Executions
      summary: Get file meta information for an execution
      operationId: filesize
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: filesize 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetas'
  /api/v1/executions/{executionId}/file/metas/{tenant}:
    get:
      tags:
      - Executions
      summary: Get file meta information for an execution
      operationId: filesize_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: filesize_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileMetas'
  /api/v1/executions/{executionId}/file/preview:
    get:
      tags:
      - Executions
      summary: Get file preview for an execution
      operationId: filePreview
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      - name: maxRows
        in: query
        description: The max row returns
        required: true
        schema:
          type: integer
          format: int32
      - name: encoding
        in: query
        description: The file encoding as Java charset name. Defaults to UTF-8
        required: true
        schema:
          type: string
          default: UTF-8
        example: ISO-8859-1
      responses:
        "200":
          description: filePreview 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/{executionId}/file/preview/{tenant}:
    get:
      tags:
      - Executions
      summary: Get file preview for an execution
      operationId: filePreview_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      - name: maxRows
        in: query
        description: The max row returns
        required: true
        schema:
          type: integer
          format: int32
      - name: encoding
        in: query
        description: The file encoding as Java charset name. Defaults to UTF-8
        required: true
        schema:
          type: string
          default: UTF-8
        example: ISO-8859-1
      responses:
        "200":
          description: filePreview_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/{executionId}/file/{tenant}:
    get:
      tags:
      - Executions
      summary: Download file for an execution
      operationId: file_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: file_1 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/v1/executions/{executionId}/flow:
    get:
      tags:
      - Executions
      summary: Get flow information's for an execution
      operationId: getFlowForExecutionById
      parameters:
      - name: executionId
        in: path
        description: The execution that you want flow information's
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowForExecutionById 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowForExecution'
  /api/v1/executions/{executionId}/flow/{tenant}:
    get:
      tags:
      - Executions
      summary: Get flow information's for an execution
      operationId: getFlowForExecutionById_1
      parameters:
      - name: executionId
        in: path
        description: The execution that you want flow information's
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowForExecutionById_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowForExecution'
  /api/v1/executions/{executionId}/follow:
    get:
      tags:
      - Executions
      summary: Follow an execution
      operationId: follow
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: follow 200 response
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/Event_Execution_'
  /api/v1/executions/{executionId}/follow/{tenant}:
    get:
      tags:
      - Executions
      summary: Follow an execution
      operationId: follow_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: follow_1 200 response
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/Event_Execution_'
  /api/v1/executions/{executionId}/graph:
    get:
      tags:
      - Executions
      summary: Generate a graph for an execution
      operationId: flowGraph
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: flowGraph 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowGraph'
  /api/v1/executions/{executionId}/graph/{tenant}:
    get:
      tags:
      - Executions
      summary: Generate a graph for an execution
      operationId: flowGraph_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: flowGraph_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowGraph'
  /api/v1/executions/{executionId}/kill:
    delete:
      tags:
      - Executions
      summary: Kill an execution
      operationId: kill
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: isOnKillCascade
        in: query
        description: Specifies whether killing the execution also kill all subflow
          executions.
        required: true
        schema:
          type: boolean
          default: true
      responses:
        "202":
          description: Execution kill was requested successfully
        "409":
          description: if the executions is already finished
        "404":
          description: if the executions is not found
        "200":
          description: kill 200 response
          content:
            text/json:
              schema:
                type: object
  /api/v1/executions/{executionId}/kill/{tenant}:
    delete:
      tags:
      - Executions
      summary: Kill an execution
      operationId: kill_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: isOnKillCascade
        in: query
        description: Specifies whether killing the execution also kill all subflow
          executions.
        required: true
        schema:
          type: boolean
          default: true
      responses:
        "202":
          description: Execution kill_1 was requested successfully
        "409":
          description: if the executions is already finished
        "404":
          description: if the executions is not found
        "200":
          description: kill_1 200 response
          content:
            text/json:
              schema:
                type: object
  /api/v1/executions/{executionId}/labels:
    post:
      tags:
      - Executions
      summary: Add or update labels of a terminated execution
      operationId: setLabels
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Label'
        required: true
      responses:
        "404":
          description: If the execution cannot be found
        "400":
          description: If the execution is not terminated
        "200":
          description: setLabels 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/{executionId}/labels/{tenant}:
    post:
      tags:
      - Executions
      summary: Add or update labels of a terminated execution
      operationId: setLabels_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Label'
        required: true
      responses:
        "404":
          description: If the execution cannot be found
        "400":
          description: If the execution is not terminated
        "200":
          description: setLabels_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/{executionId}/replay:
    post:
      tags:
      - Executions
      summary: Create a new execution from an old one and start it from a specified
        task run id
      operationId: replay
      parameters:
      - name: executionId
        in: path
        description: the original execution id to clone
        required: true
        schema:
          type: string
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: revision
        in: query
        description: The flow revision to use for new execution
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: replay 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
  /api/v1/executions/{executionId}/replay/{tenant}:
    post:
      tags:
      - Executions
      summary: Create a new execution from an old one and start it from a specified
        task run id
      operationId: replay_1
      parameters:
      - name: executionId
        in: path
        description: the original execution id to clone
        required: true
        schema:
          type: string
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: revision
        in: query
        description: The flow revision to use for new execution
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: replay_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
  /api/v1/executions/{executionId}/restart:
    post:
      tags:
      - Executions
      summary: Restart a new execution from an old one
      operationId: restart
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision to use for new execution
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: restart 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
  /api/v1/executions/{executionId}/restart/{tenant}:
    post:
      tags:
      - Executions
      summary: Restart a new execution from an old one
      operationId: restart_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision to use for new execution
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: restart_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
  /api/v1/executions/{executionId}/resume:
    post:
      tags:
      - Executions
      summary: Resume a paused execution.
      operationId: resume
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
                format: binary
        required: true
      responses:
        "204":
          description: On success
        "409":
          description: if the executions is not paused
        "200":
          description: resume 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/{executionId}/resume/{tenant}:
    post:
      tags:
      - Executions
      summary: Resume a paused execution.
      operationId: resume_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
                format: binary
        required: true
      responses:
        "204":
          description: On success
        "409":
          description: if the executions is not paused
        "200":
          description: resume_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/{executionId}/state:
    post:
      tags:
      - Executions
      summary: Change state for a taskrun in an execution
      operationId: changeState
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutionController.StateRequest'
        required: true
      responses:
        "200":
          description: changeState 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
  /api/v1/executions/{executionId}/state/{tenant}:
    post:
      tags:
      - Executions
      summary: Change state for a taskrun in an execution
      operationId: changeState_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutionController.StateRequest'
        required: true
      responses:
        "200":
          description: changeState_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
  /api/v1/executions/{executionId}/{tenant}:
    get:
      tags:
      - Executions
      summary: Get an execution
      operationId: get_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: get_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Execution'
    delete:
      tags:
      - Executions
      summary: Delete an execution
      operationId: delete_3
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "200":
          description: delete_3 200 response
  /api/v1/executions/{namespace}/{id}:
    post:
      tags:
      - Executions
      summary: Create a new execution for a flow
      operationId: create_2
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: wait
        in: query
        description: If the server will wait the end of the execution
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: The flow revision or latest if null
        schema:
          type: integer
          format: int32
          nullable: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              nullable: true
              items:
                type: string
                format: binary
      responses:
        "409":
          description: if the flow is disabled
        "200":
          description: create_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Execution'
  /api/v1/executions/{namespace}/{id}/{tenant}:
    post:
      tags:
      - Executions
      summary: Create a new execution for a flow
      operationId: create_3
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: wait
        in: query
        description: If the server will wait the end of the execution
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: The flow revision or latest if null
        schema:
          type: integer
          format: int32
          nullable: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              nullable: true
              items:
                type: string
                format: binary
      responses:
        "409":
          description: if the flow is disabled
        "200":
          description: create_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Execution'
  /api/v1/executions/{tenant}:
    get:
      tags:
      - Executions
      summary: Search for executions for a flow
      operationId: findByFlowId_1
      parameters:
      - name: namespace
        in: query
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: query
        description: The flow id
        required: true
        schema:
          type: string
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: findByFlowId_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Execution_'
  /api/v1/flows:
    post:
      tags:
      - Flows
      summary: Create a flow from json object
      operationId: create_4
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Flow'
          application/x-yaml:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: create_4 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/Flow'
                - $ref: '#/components/schemas/FlowWithSource'
              example: null
  /api/v1/flows/delete/by-ids:
    delete:
      tags:
      - Flows
      summary: Delete flows by their IDs.
      operationId: deleteByIds_2
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IdWithNamespace'
        required: true
      responses:
        "200":
          description: deleteByIds_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/flows/delete/by-ids/{tenant}:
    delete:
      tags:
      - Flows
      summary: Delete flows by their IDs.
      operationId: deleteByIds_3
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IdWithNamespace'
        required: true
      responses:
        "200":
          description: deleteByIds_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/flows/delete/by-query:
    delete:
      tags:
      - Flows
      summary: Delete flows returned by the query parameters.
      operationId: deleteByQuery_2
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: deleteByQuery_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/flows/delete/by-query/{tenant}:
    delete:
      tags:
      - Flows
      summary: Delete flows returned by the query parameters.
      operationId: deleteByQuery_3
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: deleteByQuery_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/flows/disable/by-ids:
    post:
      tags:
      - Flows
      summary: Disable flows by their IDs.
      operationId: disableByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IdWithNamespace'
        required: true
      responses:
        "200":
          description: disableByIds 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/flows/disable/by-ids/{tenant}:
    post:
      tags:
      - Flows
      summary: Disable flows by their IDs.
      operationId: disableByIds_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IdWithNamespace'
        required: true
      responses:
        "200":
          description: disableByIds_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/flows/disable/by-query:
    post:
      tags:
      - Flows
      summary: Disable flows returned by the query parameters.
      operationId: disableByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: disableByQuery 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/flows/disable/by-query/{tenant}:
    post:
      tags:
      - Flows
      summary: Disable flows returned by the query parameters.
      operationId: disableByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: disableByQuery_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/flows/distinct-namespaces:
    get:
      tags:
      - Flows
      summary: List all distinct namespaces
      operationId: listDistinctNamespace_2
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: listDistinctNamespace_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/flows/distinct-namespaces/{tenant}:
    get:
      tags:
      - Flows
      summary: List all distinct namespaces
      operationId: listDistinctNamespace_3
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: listDistinctNamespace_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/flows/enable/by-ids:
    post:
      tags:
      - Flows
      summary: Enable flows by their IDs.
      operationId: enableByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IdWithNamespace'
        required: true
      responses:
        "200":
          description: enableByIds 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/flows/enable/by-ids/{tenant}:
    post:
      tags:
      - Flows
      summary: Enable flows by their IDs.
      operationId: enableByIds_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IdWithNamespace'
        required: true
      responses:
        "200":
          description: enableByIds_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/flows/enable/by-query:
    post:
      tags:
      - Flows
      summary: Enable flows returned by the query parameters.
      operationId: enableByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: enableByQuery 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/flows/enable/by-query/{tenant}:
    post:
      tags:
      - Flows
      summary: Enable flows returned by the query parameters.
      operationId: enableByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: enableByQuery_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/flows/export/by-ids:
    post:
      tags:
      - Flows
      summary: Export flows as a ZIP archive of yaml sources.
      operationId: exportByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IdWithNamespace'
        required: true
      responses:
        "200":
          description: exportByIds 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/flows/export/by-ids/{tenant}:
    post:
      tags:
      - Flows
      summary: Export flows as a ZIP archive of yaml sources.
      operationId: exportByIds_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IdWithNamespace'
        required: true
      responses:
        "200":
          description: exportByIds_1 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/flows/export/by-query:
    get:
      tags:
      - Flows
      summary: Export flows as a ZIP archive of yaml sources.
      operationId: exportByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: exportByQuery 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/flows/export/by-query/{tenant}:
    get:
      tags:
      - Flows
      summary: Export flows as a ZIP archive of yaml sources.
      operationId: exportByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: exportByQuery_1 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/flows/graph:
    post:
      tags:
      - Flows
      summary: Generate a graph for a flow source
      operationId: flowGraphSource
      parameters:
      - name: subflows
        in: query
        description: The subflow tasks to display
        schema:
          type: array
          nullable: true
          items:
            type: string
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: flowGraphSource 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowGraph'
  /api/v1/flows/graph/{tenant}:
    post:
      tags:
      - Flows
      summary: Generate a graph for a flow source
      operationId: flowGraphSource_1
      parameters:
      - name: subflows
        in: query
        description: The subflow tasks to display
        schema:
          type: array
          nullable: true
          items:
            type: string
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: flowGraphSource_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowGraph'
  /api/v1/flows/import:
    post:
      tags:
      - Flows
      summary: Import flows as a ZIP archive of yaml sources or a multi-objects YAML
        file.
      operationId: importFlows
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileUpload:
                  type: string
                  description: "The file to import, can be a ZIP archive or a multi-objects\
                    \ YAML file"
                  format: binary
            encoding:
              fileUpload:
                contentType: application/octet-stream
        required: true
      responses:
        "204":
          description: On success
        "200":
          description: importFlows 200 response
  /api/v1/flows/import/{tenant}:
    post:
      tags:
      - Flows
      summary: Import flows as a ZIP archive of yaml sources or a multi-objects YAML
        file.
      operationId: importFlows_1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileUpload:
                  type: string
                  description: "The file to import, can be a ZIP archive or a multi-objects\
                    \ YAML file"
                  format: binary
            encoding:
              fileUpload:
                contentType: application/octet-stream
        required: true
      responses:
        "204":
          description: On success
        "200":
          description: importFlows_1 200 response
  /api/v1/flows/search:
    get:
      tags:
      - Flows
      summary: Search for flows
      operationId: find_8
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_8 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Flow_'
  /api/v1/flows/search/{tenant}:
    get:
      tags:
      - Flows
      summary: Search for flows
      operationId: find_9
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_9 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Flow_'
  /api/v1/flows/source:
    get:
      tags:
      - Flows
      summary: Search for flows source code
      operationId: source
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: source 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_SearchResult_Flow__'
  /api/v1/flows/source/{tenant}:
    get:
      tags:
      - Flows
      summary: Search for flows source code
      operationId: source_1
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: source_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_SearchResult_Flow__'
  /api/v1/flows/validate:
    post:
      tags:
      - Flows
      summary: Validate a list of flows
      operationId: validateFlows
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateFlows 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidateConstraintViolation'
  /api/v1/flows/validate/task:
    post:
      tags:
      - Flows
      summary: Validate a list of flows
      operationId: validateTask
      parameters:
      - name: section
        in: query
        description: Type of task
        required: true
        schema:
          $ref: '#/components/schemas/FlowController.TaskValidationType'
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateTask 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateConstraintViolation'
  /api/v1/flows/validate/task/{tenant}:
    post:
      tags:
      - Flows
      summary: Validate a list of flows
      operationId: validateTask_1
      parameters:
      - name: section
        in: query
        description: Type of task
        required: true
        schema:
          $ref: '#/components/schemas/FlowController.TaskValidationType'
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateTask_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateConstraintViolation'
  /api/v1/flows/validate/{tenant}:
    post:
      tags:
      - Flows
      summary: Validate a list of flows
      operationId: validateFlows_1
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateFlows_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidateConstraintViolation'
  /api/v1/flows/{namespace}:
    get:
      tags:
      - Flows
      summary: Retrieve all flows from a given namespace
      operationId: getFlowsByNamespace_2
      parameters:
      - name: namespace
        in: path
        description: Namespace to filter flows
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowsByNamespace_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flow'
    post:
      tags:
      - Flows
      summary: Update a complete namespace from json object
      description: |-
        All flow will be created / updated for this namespace.
        Flow that already created but not in `flows` will be deleted if the query delete is `true`
      operationId: updateNamespace
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: delete
        in: query
        description: If missing flow should be deleted
        required: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Flow'
            example: null
          application/x-yaml:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: updateNamespace 200 response
          content:
            application/json:
              schema:
                oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/Flow'
                - type: array
                  items:
                    $ref: '#/components/schemas/FlowWithSource'
              example: null
  /api/v1/flows/{namespace}/{id}:
    get:
      tags:
      - Flows
      summary: Get a flow
      operationId: index_5
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Include the source code
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: Get latest revision by default
        schema:
          type: integer
          format: int32
          nullable: true
      - name: allowDeleted
        in: query
        description: Get flow even if deleted
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: index_5 200 response
          content:
            application/json:
              schema:
                type: object
    put:
      tags:
      - Flows
      summary: Update a flow
      operationId: update
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
            example: null
          '*/*':
            schema:
              $ref: '#/components/schemas/Flow'
            example: null
        required: true
      responses:
        "200":
          description: update 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/FlowWithSource'
                - $ref: '#/components/schemas/Flow'
              example: null
    delete:
      tags:
      - Flows
      summary: Delete a flow
      operationId: delete_4
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "200":
          description: delete_4 200 response
  /api/v1/flows/{namespace}/{id}/dependencies:
    get:
      tags:
      - Flows
      summary: Get flow dependencies
      operationId: dependencies
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: destinationOnly
        in: query
        description: "if true, list only destination dependencies, otherwise list\
          \ also source dependencies"
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: dependencies 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowTopologyGraph'
  /api/v1/flows/{namespace}/{id}/dependencies/{tenant}:
    get:
      tags:
      - Flows
      summary: Get flow dependencies
      operationId: dependencies_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: destinationOnly
        in: query
        description: "if true, list only destination dependencies, otherwise list\
          \ also source dependencies"
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: dependencies_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowTopologyGraph'
  /api/v1/flows/{namespace}/{id}/graph:
    get:
      tags:
      - Flows
      summary: Generate a graph for a flow
      operationId: flowGraph_2
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      - name: subflows
        in: query
        description: The subflow tasks to display
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: flowGraph_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowGraph'
  /api/v1/flows/{namespace}/{id}/graph/{tenant}:
    get:
      tags:
      - Flows
      summary: Generate a graph for a flow
      operationId: flowGraph_3
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      - name: subflows
        in: query
        description: The subflow tasks to display
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: flowGraph_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowGraph'
  /api/v1/flows/{namespace}/{id}/revisions:
    get:
      tags:
      - Flows
      summary: Get revisions for a flow
      operationId: revisions
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: revisions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlowWithSource'
  /api/v1/flows/{namespace}/{id}/revisions/{tenant}:
    get:
      tags:
      - Flows
      summary: Get revisions for a flow
      operationId: revisions_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: revisions_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FlowWithSource'
  /api/v1/flows/{namespace}/{id}/tasks/{taskId}:
    get:
      tags:
      - Flows
      summary: Get a flow task
      operationId: flowTask
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: flowTask 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /api/v1/flows/{namespace}/{id}/tasks/{taskId}/{tenant}:
    get:
      tags:
      - Flows
      summary: Get a flow task
      operationId: flowTask_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: flowTask_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
  /api/v1/flows/{namespace}/{id}/{taskId}:
    patch:
      tags:
      - Flows
      summary: Update a single task on a flow
      operationId: updateTask
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        "200":
          description: updateTask 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flow'
  /api/v1/flows/{namespace}/{id}/{taskId}/{tenant}:
    patch:
      tags:
      - Flows
      summary: Update a single task on a flow
      operationId: updateTask_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
        required: true
      responses:
        "200":
          description: updateTask_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flow'
  /api/v1/flows/{namespace}/{id}/{tenant}:
    get:
      tags:
      - Flows
      summary: Get a flow
      operationId: index_6
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Include the source code
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: Get latest revision by default
        schema:
          type: integer
          format: int32
          nullable: true
      - name: allowDeleted
        in: query
        description: Get flow even if deleted
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: index_6 200 response
          content:
            application/json:
              schema:
                type: object
    put:
      tags:
      - Flows
      summary: Update a flow
      operationId: update_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
          '*/*':
            schema:
              $ref: '#/components/schemas/Flow'
            example: null
        required: true
      responses:
        "200":
          description: update_1 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/FlowWithSource'
                - $ref: '#/components/schemas/Flow'
              example: null
    delete:
      tags:
      - Flows
      summary: Delete a flow
      operationId: delete_5
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "200":
          description: delete_5 200 response
  /api/v1/flows/{namespace}/{tenant}:
    get:
      tags:
      - Flows
      summary: Retrieve all flows from a given namespace
      operationId: getFlowsByNamespace_3
      parameters:
      - name: namespace
        in: path
        description: Namespace to filter flows
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowsByNamespace_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Flow'
    post:
      tags:
      - Flows
      summary: Update a complete namespace from json object
      description: |-
        All flow will be created / updated for this namespace.
        Flow that already created but not in `flows` will be deleted if the query delete is `true`
      operationId: updateNamespace_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: delete
        in: query
        description: If missing flow should be deleted
        required: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Flow'
          application/x-yaml:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: updateNamespace_1 200 response
          content:
            application/json:
              schema:
                oneOf:
                - type: array
                  items:
                    $ref: '#/components/schemas/Flow'
                - type: array
                  items:
                    $ref: '#/components/schemas/FlowWithSource'
              example: null
  /api/v1/flows/{tenant}:
    post:
      tags:
      - Flows
      summary: Create a flow from json object
      operationId: create_5
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Flow'
          application/x-yaml:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: create_5 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/Flow'
                - $ref: '#/components/schemas/FlowWithSource'
              example: null
  /api/v1/groups:
    post:
      tags:
      - Groups
      summary: Create a group
      operationId: create_6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "200":
          description: create_6 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  /api/v1/groups/autocomplete:
    post:
      tags:
      - Groups
      summary: List groups for autocomplete
      operationId: autocomplete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  /api/v1/groups/autocomplete/{tenant}:
    post:
      tags:
      - Groups
      summary: List groups for autocomplete
      operationId: autocomplete_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  /api/v1/groups/ids:
    post:
      tags:
      - Groups
      summary: List groups by ids
      operationId: ids
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
        required: true
      responses:
        "200":
          description: ids 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  /api/v1/groups/ids/{tenant}:
    post:
      tags:
      - Groups
      summary: List groups by ids
      operationId: ids_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
        required: true
      responses:
        "200":
          description: ids_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  /api/v1/groups/search:
    get:
      tags:
      - Groups
      summary: Search for groups
      operationId: find_10
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_10 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Group_'
  /api/v1/groups/search/{tenant}:
    get:
      tags:
      - Groups
      summary: Search for groups
      operationId: find_11
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_11 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Group_'
  /api/v1/groups/{id}:
    get:
      tags:
      - Groups
      summary: Get a group
      operationId: index_7
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_7 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    put:
      tags:
      - Groups
      summary: Update a group
      operationId: update_2
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "200":
          description: update_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    delete:
      tags:
      - Groups
      summary: Delete a group
      operationId: delete_6
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/groups/{id}/members:
    get:
      tags:
      - Groups
      summary: Search for users in a group
      operationId: members
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: members 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_ApiUser_'
  /api/v1/groups/{id}/members/{tenant}:
    get:
      tags:
      - Groups
      summary: Search for users in a group
      operationId: members_1
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: members_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_ApiUser_'
  /api/v1/groups/{id}/members/{userId}:
    put:
      tags:
      - Groups
      summary: Add a group for a user
      operationId: addGroup
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: addGroup 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
    delete:
      tags:
      - Groups
      summary: Delete a group for a user
      operationId: deleteGroup
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteGroup 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/groups/{id}/members/{userId}/{tenant}:
    put:
      tags:
      - Groups
      summary: Add a group for a user
      operationId: addGroup_1
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: addGroup_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
    delete:
      tags:
      - Groups
      summary: Delete a group for a user
      operationId: deleteGroup_1
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteGroup_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/groups/{id}/{tenant}:
    get:
      tags:
      - Groups
      summary: Get a group
      operationId: index_8
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_8 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    put:
      tags:
      - Groups
      summary: Update a group
      operationId: update_3
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "200":
          description: update_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    delete:
      tags:
      - Groups
      summary: Delete a group
      operationId: delete_7
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/groups/{tenant}:
    post:
      tags:
      - Groups
      summary: Create a group
      operationId: create_7
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "200":
          description: create_7 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  /api/v1/license-info:
    get:
      tags:
      - Misc
      summary: Get current license information
      operationId: licenseInfo
      responses:
        "200":
          description: licenseInfo 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MiscController.LicenseInfo'
  /api/v1/logs/search:
    get:
      tags:
      - Logs
      summary: Search for logs
      operationId: find_12
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Level'
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      responses:
        "200":
          description: find_12 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_LogEntry_'
  /api/v1/logs/search/{tenant}:
    get:
      tags:
      - Logs
      summary: Search for logs
      operationId: find_13
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Level'
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      responses:
        "200":
          description: find_13 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_LogEntry_'
  /api/v1/logs/{executionId}:
    get:
      tags:
      - Logs
      summary: "Get logs for a specific execution, taskrun or task"
      operationId: findByExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Level'
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: findByExecution 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogEntry'
    delete:
      tags:
      - Logs
      summary: "Delete logs for a specific execution, taskrun or task"
      operationId: delete_8
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Level'
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: delete_8 200 response
  /api/v1/logs/{executionId}/download:
    get:
      tags:
      - Logs
      summary: "Download logs for a specific execution, taskrun or task"
      operationId: download
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Level'
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: download 200 response
          content:
            text/plain:
              schema:
                type: string
                format: binary
  /api/v1/logs/{executionId}/download/{tenant}:
    get:
      tags:
      - Logs
      summary: "Download logs for a specific execution, taskrun or task"
      operationId: download_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Level'
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: download_1 200 response
          content:
            text/plain:
              schema:
                type: string
                format: binary
  /api/v1/logs/{executionId}/follow:
    get:
      tags:
      - Logs
      summary: Follow logs for a specific execution
      operationId: follow_2
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Level'
      responses:
        "200":
          description: follow_2 200 response
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/Event_LogEntry_'
  /api/v1/logs/{executionId}/follow/{tenant}:
    get:
      tags:
      - Logs
      summary: Follow logs for a specific execution
      operationId: follow_3
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Level'
      responses:
        "200":
          description: follow_3 200 response
          content:
            text/event-stream:
              schema:
                $ref: '#/components/schemas/Event_LogEntry_'
  /api/v1/logs/{executionId}/{tenant}:
    get:
      tags:
      - Logs
      summary: "Get logs for a specific execution, taskrun or task"
      operationId: findByExecution_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Level'
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: findByExecution_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogEntry'
    delete:
      tags:
      - Logs
      summary: "Delete logs for a specific execution, taskrun or task"
      operationId: delete_9
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Level'
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: delete_9 200 response
  /api/v1/me:
    get:
      tags:
      - Auths
      summary: Get current user
      operationId: index_9
      responses:
        "200":
          description: index_9 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUserController.Me'
    patch:
      tags:
      - Auths
      summary: Updates details for the authenticated user. Returns user's updated
        information upon success.
      operationId: patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrentUserController.UserDetailsRequest'
        required: true
      responses:
        "200":
          description: patch 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/me/api-tokens:
    get:
      tags:
      - Auths
      summary: List all API Tokens for the authenticated user
      operationId: listApiTokens
      responses:
        "200":
          description: listApiTokens 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Auths
      summary: Create new API Token for authenticated user
      operationId: createApiToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiTokenRequest'
        required: true
      responses:
        "200":
          description: createApiToken 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/me/api-tokens/{tenant}:
    get:
      tags:
      - Auths
      summary: List all API Tokens for the authenticated user
      operationId: listApiTokens_1
      responses:
        "200":
          description: listApiTokens_1 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Auths
      summary: Create new API Token for authenticated user
      operationId: createApiToken_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiTokenRequest'
        required: true
      responses:
        "200":
          description: createApiToken_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/me/api-tokens/{tokenId}:
    delete:
      tags:
      - Auths
      summary: Delete an API Token for authenticated user
      operationId: deleteApiToken
      parameters:
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/me/api-tokens/{tokenId}/{tenant}:
    delete:
      tags:
      - Auths
      summary: Delete an API Token for authenticated user
      operationId: deleteApiToken_1
      parameters:
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/me/{tenant}:
    get:
      tags:
      - Auths
      summary: Get current user
      operationId: index_10
      responses:
        "200":
          description: index_10 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrentUserController.Me'
    patch:
      tags:
      - Auths
      summary: Updates details for the authenticated user. Returns user's updated
        information upon success.
      operationId: patch_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrentUserController.UserDetailsRequest'
        required: true
      responses:
        "200":
          description: patch_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/metrics/aggregates/{namespace}/{flowId}/{metric}:
    get:
      tags:
      - Metrics
      summary: Get metrics aggregations for a specific flow
      operationId: aggregateByFlowId
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: metric
        in: path
        description: The metric name
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: "The start datetime, default to now - 30 days"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: "The end datetime, default to now"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: aggregation
        in: query
        description: "The type of aggregation: avg, sum, min or max"
        required: true
        schema:
          type: string
          default: sum
      responses:
        "200":
          description: aggregateByFlowId 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricAggregations'
  /api/v1/metrics/aggregates/{namespace}/{flowId}/{metric}/{tenant}:
    get:
      tags:
      - Metrics
      summary: Get metrics aggregations for a specific flow
      operationId: aggregateByFlowId_1
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: metric
        in: path
        description: The metric name
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: "The start datetime, default to now - 30 days"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: "The end datetime, default to now"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: aggregation
        in: query
        description: "The type of aggregation: avg, sum, min or max"
        required: true
        schema:
          type: string
          default: sum
      responses:
        "200":
          description: aggregateByFlowId_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricAggregations'
  /api/v1/metrics/aggregates/{namespace}/{flowId}/{taskId}/{metric}:
    get:
      tags:
      - Metrics
      summary: Get metrics aggregations for a specific flow
      operationId: aggregateByFlowIdAndTaskId
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task Id
        required: true
        schema:
          type: string
      - name: metric
        in: path
        description: The metric name
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: "The start datetime, default to now - 30 days"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: "The end datetime, default to now"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: aggregation
        in: query
        description: "The type of aggregation: avg, sum, min or max"
        required: true
        schema:
          type: string
          default: sum
      responses:
        "200":
          description: aggregateByFlowIdAndTaskId 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricAggregations'
  /api/v1/metrics/aggregates/{namespace}/{flowId}/{taskId}/{metric}/{tenant}:
    get:
      tags:
      - Metrics
      summary: Get metrics aggregations for a specific flow
      operationId: aggregateByFlowIdAndTaskId_1
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task Id
        required: true
        schema:
          type: string
      - name: metric
        in: path
        description: The metric name
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: "The start datetime, default to now - 30 days"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: "The end datetime, default to now"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: aggregation
        in: query
        description: "The type of aggregation: avg, sum, min or max"
        required: true
        schema:
          type: string
          default: sum
      responses:
        "200":
          description: aggregateByFlowIdAndTaskId_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricAggregations'
  /api/v1/metrics/names/{namespace}/{flowId}:
    get:
      tags:
      - Metrics
      summary: Get metrics names for a specific flow
      operationId: flowMetrics
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: flowMetrics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/metrics/names/{namespace}/{flowId}/{taskId}:
    get:
      tags:
      - Metrics
      summary: Get metrics names for a specific task in a flow
      operationId: taskMetrics
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: taskMetrics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/metrics/names/{namespace}/{flowId}/{taskId}/{tenant}:
    get:
      tags:
      - Metrics
      summary: Get metrics names for a specific task in a flow
      operationId: taskMetrics_1
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: taskMetrics_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/metrics/names/{namespace}/{flowId}/{tenant}:
    get:
      tags:
      - Metrics
      summary: Get metrics names for a specific flow
      operationId: flowMetrics_1
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: flowMetrics_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/metrics/tasks/{namespace}/{flowId}:
    get:
      tags:
      - Metrics
      summary: "Get tasks id that have metrics for a specific flow, include deleted\
        \ or renamed tasks"
      operationId: tasks
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: tasks 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/metrics/tasks/{namespace}/{flowId}/{tenant}:
    get:
      tags:
      - Metrics
      summary: "Get tasks id that have metrics for a specific flow, include deleted\
        \ or renamed tasks"
      operationId: tasks_1
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: tasks_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/metrics/{executionId}:
    get:
      tags:
      - Metrics
      summary: Get metrics for a specific execution
      operationId: findByExecution_2
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: findByExecution_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_MetricEntry_'
  /api/v1/metrics/{executionId}/{tenant}:
    get:
      tags:
      - Metrics
      summary: Get metrics for a specific execution
      operationId: findByExecution_3
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: findByExecution_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_MetricEntry_'
  /api/v1/namespaces:
    post:
      tags:
      - Namespaces
      summary: Create a namespace
      operationId: create_8
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Namespace'
        required: true
      responses:
        "200":
          description: create_8 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
  /api/v1/namespaces/autocomplete:
    post:
      tags:
      - Namespaces
      summary: List namespaces for autocomplete
      operationId: autocomplete_2
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
      responses:
        "200":
          description: autocomplete_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/namespaces/autocomplete/{tenant}:
    post:
      tags:
      - Namespaces
      summary: List namespaces for autocomplete
      operationId: autocomplete_3
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
      responses:
        "200":
          description: autocomplete_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/namespaces/search:
    get:
      tags:
      - Namespaces
      summary: Search for namespaces
      operationId: find_14
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: existing
        in: query
        description: Return only existing namespace
        schema:
          type: boolean
          nullable: true
          default: false
      responses:
        "200":
          description: find_14 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_NamespaceController.NamespaceWithDisabled_'
  /api/v1/namespaces/search/{tenant}:
    get:
      tags:
      - Namespaces
      summary: Search for namespaces
      operationId: find_15
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: existing
        in: query
        description: Return only existing namespace
        schema:
          type: boolean
          nullable: true
          default: false
      responses:
        "200":
          description: find_15 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_NamespaceController.NamespaceWithDisabled_'
  /api/v1/namespaces/{id}:
    get:
      tags:
      - Namespaces
      summary: Get a namespace
      operationId: index_11
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_11 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
    put:
      tags:
      - Namespaces
      summary: Update a namespace
      operationId: update_4
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Namespace'
        required: true
      responses:
        "200":
          description: update_4 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
    delete:
      tags:
      - Namespaces
      summary: Delete a flow
      operationId: delete_10
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/namespaces/{id}/inherited-plugindefaults:
    get:
      tags:
      - Namespaces
      summary: List inherited plugin defaults
      operationId: inheritedPluginDefaults
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inheritedPluginDefaults 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PluginDefault'
  /api/v1/namespaces/{id}/inherited-plugindefaults/{tenant}:
    get:
      tags:
      - Namespaces
      summary: List inherited plugin defaults
      operationId: inheritedPluginDefaults_1
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inheritedPluginDefaults_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PluginDefault'
  /api/v1/namespaces/{id}/inherited-variables:
    get:
      tags:
      - Namespaces
      summary: List inherited variables
      operationId: inheritedVariables
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inheritedVariables 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v1/namespaces/{id}/inherited-variables/{tenant}:
    get:
      tags:
      - Namespaces
      summary: List inherited variables
      operationId: inheritedVariables_1
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inheritedVariables_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v1/namespaces/{id}/{tenant}:
    get:
      tags:
      - Namespaces
      summary: Get a namespace
      operationId: index_12
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_12 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
    put:
      tags:
      - Namespaces
      summary: Update a namespace
      operationId: update_5
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Namespace'
        required: true
      responses:
        "200":
          description: update_5 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
    delete:
      tags:
      - Namespaces
      summary: Delete a flow
      operationId: delete_11
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/namespaces/{namespace}/dependencies:
    get:
      tags:
      - Flows
      summary: Get flow dependencies
      operationId: dependencies_2
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: destinationOnly
        in: query
        description: "if true, list only destination dependencies, otherwise list\
          \ also source dependencies"
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: dependencies_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowTopologyGraph'
  /api/v1/namespaces/{namespace}/dependencies/{tenant}:
    get:
      tags:
      - Flows
      summary: Get flow dependencies
      operationId: dependencies_3
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: destinationOnly
        in: query
        description: "if true, list only destination dependencies, otherwise list\
          \ also source dependencies"
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: dependencies_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlowTopologyGraph'
  /api/v1/namespaces/{namespace}/files:
    get:
      tags:
      - Files
      summary: Get namespace file content
      operationId: file_2
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: file_2 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    put:
      tags:
      - Files
      summary: Move a file or directory
      operationId: move
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: from
        in: query
        description: The internal storage uri to move from
        required: true
        schema:
          type: string
          format: uri
      - name: to
        in: query
        description: The internal storage uri to move to
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: move 200 response
    post:
      tags:
      - Files
      summary: Create a file
      operationId: createFile
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileContent:
                  type: string
                  format: binary
            encoding:
              fileContent:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: createFile 200 response
    delete:
      tags:
      - Files
      summary: Delete a file or directory
      operationId: delete_12
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri of the file / directory to delete
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: delete_12 200 response
  /api/v1/namespaces/{namespace}/files/directory:
    get:
      tags:
      - Files
      summary: List directory content
      operationId: list
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          format: uri
          nullable: true
      responses:
        "200":
          description: list 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileAttributes'
    post:
      tags:
      - Files
      summary: Create a directory
      operationId: createDirectory
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          format: uri
          nullable: true
      responses:
        "200":
          description: createDirectory 200 response
  /api/v1/namespaces/{namespace}/files/directory/{tenant}:
    get:
      tags:
      - Files
      summary: List directory content
      operationId: list_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          format: uri
          nullable: true
      responses:
        "200":
          description: list_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileAttributes'
    post:
      tags:
      - Files
      summary: Create a directory
      operationId: createDirectory_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          format: uri
          nullable: true
      responses:
        "200":
          description: createDirectory_1 200 response
  /api/v1/namespaces/{namespace}/files/export:
    get:
      tags:
      - Files
      summary: Export namespace files as a ZIP
      operationId: export
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: export 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/namespaces/{namespace}/files/export/{tenant}:
    get:
      tags:
      - Files
      summary: Export namespace files as a ZIP
      operationId: export_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: export_1 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/namespaces/{namespace}/files/search:
    get:
      tags:
      - Files
      summary: Find files which path contain the given string in their URI
      operationId: search_2
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: The string the file path should contain
        required: true
        schema:
          type: string
      responses:
        "200":
          description: search_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/namespaces/{namespace}/files/search/{tenant}:
    get:
      tags:
      - Files
      summary: Find files which path contain the given string in their URI
      operationId: search_3
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: The string the file path should contain
        required: true
        schema:
          type: string
      responses:
        "200":
          description: search_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/namespaces/{namespace}/files/stats:
    get:
      tags:
      - Files
      summary: "Get namespace file stats such as size, creation & modification dates\
        \ and type"
      operationId: stats
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          format: uri
          nullable: true
      responses:
        "200":
          description: stats 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileAttributes'
  /api/v1/namespaces/{namespace}/files/stats/{tenant}:
    get:
      tags:
      - Files
      summary: "Get namespace file stats such as size, creation & modification dates\
        \ and type"
      operationId: stats_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          format: uri
          nullable: true
      responses:
        "200":
          description: stats_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileAttributes'
  /api/v1/namespaces/{namespace}/files/{tenant}:
    get:
      tags:
      - Files
      summary: Get namespace file content
      operationId: file_3
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: file_3 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    put:
      tags:
      - Files
      summary: Move a file or directory
      operationId: move_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: from
        in: query
        description: The internal storage uri to move from
        required: true
        schema:
          type: string
          format: uri
      - name: to
        in: query
        description: The internal storage uri to move to
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: move_1 200 response
    post:
      tags:
      - Files
      summary: Create a file
      operationId: createFile_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileContent:
                  type: string
                  format: binary
            encoding:
              fileContent:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: createFile_1 200 response
    delete:
      tags:
      - Files
      summary: Delete a file or directory
      operationId: delete_13
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri of the file / directory to delete
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: delete_13 200 response
  /api/v1/namespaces/{namespace}/inherited-secrets:
    get:
      tags:
      - Namespaces
      summary: List inherited secrets
      operationId: inheritedSecrets
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inheritedSecrets 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
  /api/v1/namespaces/{namespace}/inherited-secrets/{tenant}:
    get:
      tags:
      - Namespaces
      summary: List inherited secrets
      operationId: inheritedSecrets_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inheritedSecrets_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
  /api/v1/namespaces/{namespace}/secrets:
    get:
      tags:
      - Namespaces
      summary: Get secrets for a namespace
      operationId: listSecret
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listSecret 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    put:
      tags:
      - Namespaces
      summary: Update secrets for a namespace
      operationId: putSecrets
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: putSecrets 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/namespaces/{namespace}/secrets/{key}:
    delete:
      tags:
      - Namespaces
      summary: Delete a secret for a namespace
      operationId: deleteSecret
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The secret key
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteSecret 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/namespaces/{namespace}/secrets/{key}/{tenant}:
    delete:
      tags:
      - Namespaces
      summary: Delete a secret for a namespace
      operationId: deleteSecret_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The secret key
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteSecret_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/namespaces/{namespace}/secrets/{tenant}:
    get:
      tags:
      - Namespaces
      summary: Get secrets for a namespace
      operationId: listSecret_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listSecret_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    put:
      tags:
      - Namespaces
      summary: Update secrets for a namespace
      operationId: putSecrets_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: putSecrets_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/namespaces/{tenant}:
    post:
      tags:
      - Namespaces
      summary: Create a namespace
      operationId: create_9
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Namespace'
        required: true
      responses:
        "200":
          description: create_9 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Namespace'
  /api/v1/plugins:
    get:
      tags:
      - Plugins
      summary: Get list of plugins
      operationId: search_4
      responses:
        "200":
          description: search_4 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plugin'
  /api/v1/plugins/groups/subgroups:
    get:
      tags:
      - Plugins
      summary: Get plugins group by subgroups
      operationId: subgroups
      responses:
        "200":
          description: subgroups 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plugin'
  /api/v1/plugins/groups/subgroups/{tenant}:
    get:
      tags:
      - Plugins
      summary: Get plugins group by subgroups
      operationId: subgroups_1
      responses:
        "200":
          description: subgroups_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plugin'
  /api/v1/plugins/icons:
    get:
      tags:
      - Plugins
      summary: Get plugins icons
      operationId: icons
      responses:
        "200":
          description: icons 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/PluginIcon'
  /api/v1/plugins/icons/groups:
    get:
      tags:
      - Plugins
      summary: Get plugins icons
      operationId: pluginGroupIcons
      responses:
        "200":
          description: pluginGroupIcons 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/PluginIcon'
  /api/v1/plugins/icons/groups/{tenant}:
    get:
      tags:
      - Plugins
      summary: Get plugins icons
      operationId: pluginGroupIcons_1
      responses:
        "200":
          description: pluginGroupIcons_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/PluginIcon'
  /api/v1/plugins/icons/{tenant}:
    get:
      tags:
      - Plugins
      summary: Get plugins icons
      operationId: icons_1
      responses:
        "200":
          description: icons_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/PluginIcon'
  /api/v1/plugins/inputs:
    get:
      tags:
      - Plugins
      summary: Get all types for an inputs
      operationId: inputs
      responses:
        "200":
          description: inputs 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InputType'
  /api/v1/plugins/inputs/{tenant}:
    get:
      tags:
      - Plugins
      summary: Get all types for an inputs
      operationId: inputs_1
      responses:
        "200":
          description: inputs_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InputType'
  /api/v1/plugins/inputs/{type}:
    get:
      tags:
      - Plugins
      summary: Get all json schemas for a type
      description: "The schema will be output as [http://json-schema.org/draft-07/schema](Json\
        \ Schema Draft 7)"
      operationId: inputSchemas
      parameters:
      - name: type
        in: path
        description: The schema needed
        required: true
        schema:
          $ref: '#/components/schemas/Type_3'
      responses:
        "200":
          description: inputSchemas 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationWithSchema'
  /api/v1/plugins/inputs/{type}/{tenant}:
    get:
      tags:
      - Plugins
      summary: Get all json schemas for a type
      description: "The schema will be output as [http://json-schema.org/draft-07/schema](Json\
        \ Schema Draft 7)"
      operationId: inputSchemas_1
      parameters:
      - name: type
        in: path
        description: The schema needed
        required: true
        schema:
          oneOf:
          - $ref: '#/components/schemas/Type_6'
          - $ref: '#/components/schemas/Type_4'
      responses:
        "200":
          description: inputSchemas_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationWithSchema'
  /api/v1/plugins/schemas/{type}:
    get:
      tags:
      - Plugins
      summary: Get all json schemas for a type
      description: "The schema will be output as [http://json-schema.org/draft-07/schema](Json\
        \ Schema Draft 7)"
      operationId: schemas
      parameters:
      - name: type
        in: path
        description: The schema needed
        required: true
        schema:
          $ref: '#/components/schemas/SchemaType'
      - name: arrayOf
        in: query
        description: If schema should be an array of requested type
        schema:
          type: boolean
          nullable: true
          default: false
      responses:
        "200":
          description: schemas 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v1/plugins/schemas/{type}/{tenant}:
    get:
      tags:
      - Plugins
      summary: Get all json schemas for a type
      description: "The schema will be output as [http://json-schema.org/draft-07/schema](Json\
        \ Schema Draft 7)"
      operationId: schemas_1
      parameters:
      - name: type
        in: path
        description: The schema needed
        required: true
        schema:
          $ref: '#/components/schemas/SchemaType'
      - name: arrayOf
        in: query
        description: If schema should be an array of requested type
        schema:
          type: boolean
          nullable: true
          default: false
      responses:
        "200":
          description: schemas_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v1/plugins/{cls}:
    get:
      tags:
      - Plugins
      summary: Get plugin documentation
      operationId: pluginDocumentation
      parameters:
      - name: cls
        in: path
        description: The plugin full class name
        required: true
        schema:
          type: string
      - name: all
        in: query
        description: Include all the properties
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: pluginDocumentation 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationWithSchema'
  /api/v1/plugins/{cls}/{tenant}:
    get:
      tags:
      - Plugins
      summary: Get plugin documentation
      operationId: pluginDocumentation_1
      parameters:
      - name: cls
        in: path
        description: The plugin full class name
        required: true
        schema:
          type: string
      - name: all
        in: query
        description: Include all the properties
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: pluginDocumentation_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentationWithSchema'
  /api/v1/plugins/{tenant}:
    get:
      tags:
      - Plugins
      summary: Get list of plugins
      operationId: search_5
      responses:
        "200":
          description: search_5 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plugin'
  /api/v1/roles:
    post:
      tags:
      - Roles
      summary: Create a role
      operationId: create_10
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          description: create_10 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /api/v1/roles/autocomplete:
    post:
      tags:
      - Roles
      summary: List roles for autocomplete
      operationId: autocomplete_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete_4 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /api/v1/roles/autocomplete/{tenant}:
    post:
      tags:
      - Roles
      summary: List roles for autocomplete
      operationId: autocomplete_5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete_5 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /api/v1/roles/ids:
    post:
      tags:
      - Roles
      description: List roles by ids
      operationId: ids_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
        required: true
      responses:
        "200":
          description: ids_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /api/v1/roles/ids/{tenant}:
    post:
      tags:
      - Roles
      description: List roles by ids
      operationId: ids_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
        required: true
      responses:
        "200":
          description: ids_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /api/v1/roles/search:
    get:
      tags:
      - Roles
      summary: Search for roles
      operationId: find_16
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_16 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Role_'
  /api/v1/roles/search/{tenant}:
    get:
      tags:
      - Roles
      summary: Search for roles
      operationId: find_17
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_17 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Role_'
  /api/v1/roles/{id}:
    get:
      tags:
      - Roles
      summary: Get a role
      operationId: index_13
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_13 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    put:
      tags:
      - Roles
      summary: Update a role
      operationId: update_6
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          description: update_6 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    delete:
      tags:
      - Roles
      summary: Delete a role
      operationId: delete_14
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/roles/{id}/{tenant}:
    get:
      tags:
      - Roles
      summary: Get a role
      operationId: index_14
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_14 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    put:
      tags:
      - Roles
      summary: Update a role
      operationId: update_7
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          description: update_7 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    delete:
      tags:
      - Roles
      summary: Delete a role
      operationId: delete_15
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/roles/{tenant}:
    post:
      tags:
      - Roles
      summary: Create a role
      operationId: create_11
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          description: create_11 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /api/v1/setup:
    get:
      tags:
      - Misc
      summary: Currently running configuration
      operationId: setupConfiguration
      responses:
        "200":
          description: setupConfiguration 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetupConfiguration'
    post:
      tags:
      - Misc
      summary: Create the first user
      operationId: setupKestra
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetupConfiguration.SetupData'
        required: true
      responses:
        "200":
          description: setupKestra 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/stats/executions/daily:
    post:
      tags:
      - Stats
      summary: Get daily statistics for executions
      operationId: dailyStatistics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatsController.StatisticRequest'
        required: true
      responses:
        "200":
          description: dailyStatistics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DailyExecutionStatistics'
  /api/v1/stats/executions/daily/group-by-flow:
    post:
      tags:
      - Stats
      summary: Get daily statistics for executions group by namespaces and flows
      operationId: dailyGroupByFlowStatistics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatsController.ByFlowStatisticRequest'
        required: true
      responses:
        "200":
          description: dailyGroupByFlowStatistics 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      $ref: '#/components/schemas/DailyExecutionStatistics'
  /api/v1/stats/executions/daily/group-by-flow/{tenant}:
    post:
      tags:
      - Stats
      summary: Get daily statistics for executions group by namespaces and flows
      operationId: dailyGroupByFlowStatistics_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatsController.ByFlowStatisticRequest'
        required: true
      responses:
        "200":
          description: dailyGroupByFlowStatistics_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      $ref: '#/components/schemas/DailyExecutionStatistics'
  /api/v1/stats/executions/daily/{tenant}:
    post:
      tags:
      - Stats
      summary: Get daily statistics for executions
      operationId: dailyStatistics_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatsController.StatisticRequest'
        required: true
      responses:
        "200":
          description: dailyStatistics_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DailyExecutionStatistics'
  /api/v1/stats/executions/latest/group-by-flow:
    post:
      tags:
      - Stats
      summary: Get latest execution by flows
      operationId: lastExecutions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatsController.LastExecutionsRequest'
        required: true
      responses:
        "200":
          description: lastExecutions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Execution'
  /api/v1/stats/executions/latest/group-by-flow/{tenant}:
    post:
      tags:
      - Stats
      summary: Get latest execution by flows
      operationId: lastExecutions_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatsController.LastExecutionsRequest'
        required: true
      responses:
        "200":
          description: lastExecutions_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Execution'
  /api/v1/stats/generate-reports:
    get:
      operationId: generate
      parameters:
      - name: from
        in: query
        description: The start date
        schema:
          type: string
          format: date
          nullable: true
      responses:
        "200":
          description: generate 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/stats/generate-reports/{tenant}:
    get:
      operationId: generate_1
      parameters:
      - name: from
        in: query
        description: The start date
        schema:
          type: string
          format: date
          nullable: true
      responses:
        "200":
          description: generate_1 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/stats/logs/daily:
    post:
      tags:
      - Stats
      summary: Get daily statistics for logs
      operationId: logsDailyStatistics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatsController.LogStatisticRequest'
        required: true
      responses:
        "200":
          description: logsDailyStatistics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogStatistics'
  /api/v1/stats/logs/daily/{tenant}:
    post:
      tags:
      - Stats
      summary: Get daily statistics for logs
      operationId: logsDailyStatistics_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatsController.LogStatisticRequest'
        required: true
      responses:
        "200":
          description: logsDailyStatistics_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LogStatistics'
  /api/v1/stats/taskruns/daily:
    post:
      tags:
      - Stats
      summary: Get daily statistics for taskRuns
      operationId: taskRunsDailyStatistics
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatsController.StatisticRequest'
        required: true
      responses:
        "200":
          description: taskRunsDailyStatistics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DailyExecutionStatistics'
  /api/v1/stats/taskruns/daily/{tenant}:
    post:
      tags:
      - Stats
      summary: Get daily statistics for taskRuns
      operationId: taskRunsDailyStatistics_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatsController.StatisticRequest'
        required: true
      responses:
        "200":
          description: taskRunsDailyStatistics_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DailyExecutionStatistics'
  /api/v1/taskruns/search:
    get:
      tags:
      - Executions
      summary: Search for taskruns
      operationId: findTaskRun
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      responses:
        "200":
          description: findTaskRun 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_TaskRun_'
  /api/v1/taskruns/search/{tenant}:
    get:
      tags:
      - Executions
      summary: Search for taskruns
      operationId: findTaskRun_1
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/ExecutionRepositoryInterface.ChildFilter'
      responses:
        "200":
          description: findTaskRun_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_TaskRun_'
  /api/v1/templates:
    post:
      tags:
      - Templates
      summary: Create a template
      operationId: create_12
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
        required: true
      responses:
        "200":
          description: create_12 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
  /api/v1/templates/delete/by-ids:
    delete:
      tags:
      - Templates
      summary: Delete templates by their IDs.
      operationId: deleteByIds_4
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IdWithNamespace'
        required: true
      responses:
        "200":
          description: deleteByIds_4 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/templates/delete/by-ids/{tenant}:
    delete:
      tags:
      - Templates
      summary: Delete templates by their IDs.
      operationId: deleteByIds_5
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IdWithNamespace'
        required: true
      responses:
        "200":
          description: deleteByIds_5 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/templates/delete/by-query:
    delete:
      tags:
      - Templates
      summary: Delete templates returned by the query parameters.
      operationId: deleteByQuery_4
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: deleteByQuery_4 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/templates/delete/by-query/{tenant}:
    delete:
      tags:
      - Templates
      summary: Delete templates returned by the query parameters.
      operationId: deleteByQuery_5
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: deleteByQuery_5 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponse'
  /api/v1/templates/distinct-namespaces:
    get:
      tags:
      - Templates
      summary: List all distinct namespaces
      operationId: listDistinctNamespace_4
      responses:
        "200":
          description: listDistinctNamespace_4 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/templates/distinct-namespaces/{tenant}:
    get:
      tags:
      - Templates
      summary: List all distinct namespaces
      operationId: listDistinctNamespace_5
      responses:
        "200":
          description: listDistinctNamespace_5 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/templates/export/by-ids:
    post:
      tags:
      - Templates
      summary: Export templates as a ZIP archive of yaml sources.
      operationId: exportByIds_2
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IdWithNamespace'
        required: true
      responses:
        "200":
          description: exportByIds_2 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/templates/export/by-ids/{tenant}:
    post:
      tags:
      - Templates
      summary: Export templates as a ZIP archive of yaml sources.
      operationId: exportByIds_3
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/IdWithNamespace'
        required: true
      responses:
        "200":
          description: exportByIds_3 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/templates/export/by-query:
    get:
      tags:
      - Templates
      summary: Export templates as a ZIP archive of yaml sources.
      operationId: exportByQuery_2
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: exportByQuery_2 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/templates/export/by-query/{tenant}:
    get:
      tags:
      - Templates
      summary: Export templates as a ZIP archive of yaml sources.
      operationId: exportByQuery_3
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: exportByQuery_3 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/templates/import:
    post:
      tags:
      - Templates
      summary: Import templates as a ZIP archive of yaml sources or a multi-objects
        YAML file.
      operationId: importTemplates
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileUpload:
                  type: string
                  description: "The file to import, can be a ZIP archive or a multi-objects\
                    \ YAML file"
                  format: binary
            encoding:
              fileUpload:
                contentType: application/octet-stream
        required: true
      responses:
        "204":
          description: On success
        "200":
          description: importTemplates 200 response
  /api/v1/templates/import/{tenant}:
    post:
      tags:
      - Templates
      summary: Import templates as a ZIP archive of yaml sources or a multi-objects
        YAML file.
      operationId: importTemplates_1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileUpload:
                  type: string
                  description: "The file to import, can be a ZIP archive or a multi-objects\
                    \ YAML file"
                  format: binary
            encoding:
              fileUpload:
                contentType: application/octet-stream
        required: true
      responses:
        "204":
          description: On success
        "200":
          description: importTemplates_1 200 response
  /api/v1/templates/search:
    get:
      tags:
      - Templates
      summary: Search for templates
      operationId: find_18
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_18 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Template_'
  /api/v1/templates/search/{tenant}:
    get:
      tags:
      - Templates
      summary: Search for templates
      operationId: find_19
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_19 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Template_'
  /api/v1/templates/validate:
    post:
      tags:
      - Templates
      summary: Validate a list of templates
      operationId: validateTemplates
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateTemplates 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidateConstraintViolation'
  /api/v1/templates/validate/{tenant}:
    post:
      tags:
      - Templates
      summary: Validate a list of templates
      operationId: validateTemplates_1
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateTemplates_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ValidateConstraintViolation'
  /api/v1/templates/{namespace}:
    post:
      tags:
      - Templates
      summary: Update a complete namespace from json object
      description: |-
        All Template will be created / updated for this namespace.
        Template already created but not in `templates` will be deleted if the query delete is `true`
      operationId: updateNamespace_2
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: delete
        in: query
        description: If missing template should be deleted
        required: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Template'
        required: true
      responses:
        "200":
          description: updateNamespace_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
  /api/v1/templates/{namespace}/{id}:
    get:
      tags:
      - Templates
      summary: Get a template
      operationId: index_15
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_15 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
    put:
      tags:
      - Templates
      summary: Update a template
      operationId: update_8
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
        required: true
      responses:
        "200":
          description: update_8 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
    delete:
      tags:
      - Templates
      summary: Delete a template
      operationId: delete_16
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "200":
          description: delete_16 200 response
  /api/v1/templates/{namespace}/{id}/{tenant}:
    get:
      tags:
      - Templates
      summary: Get a template
      operationId: index_16
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_16 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
    put:
      tags:
      - Templates
      summary: Update a template
      operationId: update_9
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
        required: true
      responses:
        "200":
          description: update_9 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
    delete:
      tags:
      - Templates
      summary: Delete a template
      operationId: delete_17
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "200":
          description: delete_17 200 response
  /api/v1/templates/{namespace}/{tenant}:
    post:
      tags:
      - Templates
      summary: Update a complete namespace from json object
      description: |-
        All Template will be created / updated for this namespace.
        Template already created but not in `templates` will be deleted if the query delete is `true`
      operationId: updateNamespace_3
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: delete
        in: query
        description: If missing template should be deleted
        required: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Template'
        required: true
      responses:
        "200":
          description: updateNamespace_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
  /api/v1/templates/{tenant}:
    post:
      tags:
      - Templates
      summary: Create a template
      operationId: create_13
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Template'
        required: true
      responses:
        "200":
          description: create_13 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
  /api/v1/tenants:
    post:
      tags:
      - Tenants
      summary: Create a tenant
      operationId: create_14
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
        required: true
      responses:
        "200":
          description: create_14 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
  /api/v1/tenants/bindings:
    post:
      tags:
      - Bindings
      summary: Create a binding
      operationId: create_15
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Binding'
        required: true
      responses:
        "200":
          description: create_15 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractBindingController.BindingDetail'
  /api/v1/tenants/bindings/search:
    get:
      tags:
      - Bindings
      summary: Search for bindings
      operationId: find_20
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: Binding type filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Binding.Type'
      - name: id
        in: query
        description: External id filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_20 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_AbstractBindingController.BindingDetail_'
  /api/v1/tenants/bindings/search/{tenant}:
    get:
      tags:
      - Bindings
      summary: Search for bindings
      operationId: find_21
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: Binding type filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Binding.Type'
      - name: id
        in: query
        description: External id filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_21 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_AbstractBindingController.BindingDetail_'
  /api/v1/tenants/bindings/search/{tenant}/{ressourceTenant}:
    get:
      tags:
      - Bindings
      summary: Search for bindings
      operationId: find_22
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: Binding type filter
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Binding.Type'
      - name: id
        in: query
        description: External id filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_22 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_AbstractBindingController.BindingDetail_'
  /api/v1/tenants/bindings/{id}:
    get:
      tags:
      - Bindings
      summary: Get a binding
      operationId: index_17
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_17 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractBindingController.BindingDetail'
    delete:
      tags:
      - Bindings
      summary: Delete a binding
      operationId: delete_18
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/bindings/{id}/{tenant}:
    get:
      tags:
      - Bindings
      summary: Get a binding
      operationId: index_18
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_18 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractBindingController.BindingDetail'
    delete:
      tags:
      - Bindings
      summary: Delete a binding
      operationId: delete_19
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/bindings/{id}/{tenant}/{ressourceTenant}:
    get:
      tags:
      - Bindings
      summary: Get a binding
      operationId: index_19
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_19 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractBindingController.BindingDetail'
    delete:
      tags:
      - Bindings
      summary: Delete a binding
      operationId: delete_20
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/bindings/{tenant}:
    post:
      tags:
      - Bindings
      summary: Create a binding
      operationId: create_16
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Binding'
        required: true
      responses:
        "200":
          description: create_16 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractBindingController.BindingDetail'
  /api/v1/tenants/bindings/{tenant}/{ressourceTenant}:
    post:
      tags:
      - Bindings
      summary: Create a binding
      operationId: create_17
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Binding'
        required: true
      responses:
        "200":
          description: create_17 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractBindingController.BindingDetail'
  /api/v1/tenants/groups:
    post:
      tags:
      - Groups
      summary: Create a group
      operationId: create_18
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "200":
          description: create_18 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  /api/v1/tenants/groups/autocomplete:
    post:
      tags:
      - Groups
      summary: List groups for autocomplete
      operationId: autocomplete_6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete_6 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  /api/v1/tenants/groups/autocomplete/{tenant}:
    post:
      tags:
      - Groups
      summary: List groups for autocomplete
      operationId: autocomplete_7
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete_7 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  /api/v1/tenants/groups/autocomplete/{tenant}/{ressourceTenant}:
    post:
      tags:
      - Groups
      summary: List groups for autocomplete
      operationId: autocomplete_8
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete_8 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  /api/v1/tenants/groups/ids:
    post:
      tags:
      - Groups
      summary: List groups by ids
      operationId: ids_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
        required: true
      responses:
        "200":
          description: ids_4 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  /api/v1/tenants/groups/ids/{tenant}:
    post:
      tags:
      - Groups
      summary: List groups by ids
      operationId: ids_5
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
        required: true
      responses:
        "200":
          description: ids_5 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  /api/v1/tenants/groups/ids/{tenant}/{ressourceTenant}:
    post:
      tags:
      - Groups
      summary: List groups by ids
      operationId: ids_6
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
        required: true
      responses:
        "200":
          description: ids_6 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
  /api/v1/tenants/groups/search:
    get:
      tags:
      - Groups
      summary: Search for groups
      operationId: find_23
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_23 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Group_'
  /api/v1/tenants/groups/search/{tenant}:
    get:
      tags:
      - Groups
      summary: Search for groups
      operationId: find_24
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_24 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Group_'
  /api/v1/tenants/groups/search/{tenant}/{ressourceTenant}:
    get:
      tags:
      - Groups
      summary: Search for groups
      operationId: find_25
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_25 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Group_'
  /api/v1/tenants/groups/{id}:
    get:
      tags:
      - Groups
      summary: Get a group
      operationId: index_20
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_20 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    put:
      tags:
      - Groups
      summary: Update a group
      operationId: update_10
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "200":
          description: update_10 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    delete:
      tags:
      - Groups
      summary: Delete a group
      operationId: delete_21
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/groups/{id}/members:
    get:
      tags:
      - Groups
      summary: Search for users in a group
      operationId: members_2
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: members_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_ApiUser_'
  /api/v1/tenants/groups/{id}/members/{tenant}:
    get:
      tags:
      - Groups
      summary: Search for users in a group
      operationId: members_3
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: members_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_ApiUser_'
  /api/v1/tenants/groups/{id}/members/{tenant}/{ressourceTenant}:
    get:
      tags:
      - Groups
      summary: Search for users in a group
      operationId: members_4
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: members_4 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_ApiUser_'
  /api/v1/tenants/groups/{id}/members/{userId}:
    put:
      tags:
      - Groups
      summary: Add a group for a user
      operationId: addGroup_2
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: addGroup_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
    delete:
      tags:
      - Groups
      summary: Delete a group for a user
      operationId: deleteGroup_2
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteGroup_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/tenants/groups/{id}/members/{userId}/{tenant}:
    put:
      tags:
      - Groups
      summary: Add a group for a user
      operationId: addGroup_3
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: addGroup_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
    delete:
      tags:
      - Groups
      summary: Delete a group for a user
      operationId: deleteGroup_3
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteGroup_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/tenants/groups/{id}/members/{userId}/{tenant}/{ressourceTenant}:
    put:
      tags:
      - Groups
      summary: Add a group for a user
      operationId: addGroup_4
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: addGroup_4 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
    delete:
      tags:
      - Groups
      summary: Delete a group for a user
      operationId: deleteGroup_4
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteGroup_4 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/tenants/groups/{id}/{tenant}:
    get:
      tags:
      - Groups
      summary: Get a group
      operationId: index_21
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_21 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    put:
      tags:
      - Groups
      summary: Update a group
      operationId: update_11
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "200":
          description: update_11 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    delete:
      tags:
      - Groups
      summary: Delete a group
      operationId: delete_22
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/groups/{id}/{tenant}/{ressourceTenant}:
    get:
      tags:
      - Groups
      summary: Get a group
      operationId: index_22
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_22 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    put:
      tags:
      - Groups
      summary: Update a group
      operationId: update_12
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "200":
          description: update_12 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
    delete:
      tags:
      - Groups
      summary: Delete a group
      operationId: delete_23
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/groups/{tenant}:
    post:
      tags:
      - Groups
      summary: Create a group
      operationId: create_19
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "200":
          description: create_19 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  /api/v1/tenants/groups/{tenant}/{ressourceTenant}:
    post:
      tags:
      - Groups
      summary: Create a group
      operationId: create_20
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
        required: true
      responses:
        "200":
          description: create_20 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  /api/v1/tenants/namespaces/autocomplete:
    post:
      tags:
      - Namespaces
      summary: List namespaces for autocomplete
      operationId: autocomplete_9
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
      responses:
        "200":
          description: autocomplete_9 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/tenants/namespaces/autocomplete/{tenant}:
    post:
      tags:
      - Namespaces
      summary: List namespaces for autocomplete
      operationId: autocomplete_10
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
      responses:
        "200":
          description: autocomplete_10 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/tenants/namespaces/autocomplete/{tenant}/{ressourceTenant}:
    post:
      tags:
      - Namespaces
      summary: List namespaces for autocomplete
      operationId: autocomplete_11
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
      responses:
        "200":
          description: autocomplete_11 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/tenants/roles:
    post:
      tags:
      - Roles
      summary: Create a role
      operationId: create_21
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          description: create_21 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /api/v1/tenants/roles/autocomplete:
    post:
      tags:
      - Roles
      summary: List roles for autocomplete
      operationId: autocomplete_12
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete_12 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /api/v1/tenants/roles/autocomplete/{tenant}:
    post:
      tags:
      - Roles
      summary: List roles for autocomplete
      operationId: autocomplete_13
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete_13 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /api/v1/tenants/roles/autocomplete/{tenant}/{ressourceTenant}:
    post:
      tags:
      - Roles
      summary: List roles for autocomplete
      operationId: autocomplete_14
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete_14 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /api/v1/tenants/roles/ids:
    post:
      tags:
      - Roles
      description: List roles by ids
      operationId: ids_7
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
        required: true
      responses:
        "200":
          description: ids_7 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /api/v1/tenants/roles/ids/{tenant}:
    post:
      tags:
      - Roles
      description: List roles by ids
      operationId: ids_8
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
        required: true
      responses:
        "200":
          description: ids_8 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /api/v1/tenants/roles/ids/{tenant}/{ressourceTenant}:
    post:
      tags:
      - Roles
      description: List roles by ids
      operationId: ids_9
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiIds'
        required: true
      responses:
        "200":
          description: ids_9 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
  /api/v1/tenants/roles/search:
    get:
      tags:
      - Roles
      summary: Search for roles
      operationId: find_26
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_26 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Role_'
  /api/v1/tenants/roles/search/{tenant}:
    get:
      tags:
      - Roles
      summary: Search for roles
      operationId: find_27
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_27 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Role_'
  /api/v1/tenants/roles/search/{tenant}/{ressourceTenant}:
    get:
      tags:
      - Roles
      summary: Search for roles
      operationId: find_28
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_28 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Role_'
  /api/v1/tenants/roles/{id}:
    get:
      tags:
      - Roles
      summary: Get a role
      operationId: index_23
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_23 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    put:
      tags:
      - Roles
      summary: Update a role
      operationId: update_13
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          description: update_13 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    delete:
      tags:
      - Roles
      summary: Delete a role
      operationId: delete_24
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/roles/{id}/{tenant}:
    get:
      tags:
      - Roles
      summary: Get a role
      operationId: index_24
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_24 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    put:
      tags:
      - Roles
      summary: Update a role
      operationId: update_14
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          description: update_14 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    delete:
      tags:
      - Roles
      summary: Delete a role
      operationId: delete_25
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/roles/{id}/{tenant}/{ressourceTenant}:
    get:
      tags:
      - Roles
      summary: Get a role
      operationId: index_25
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_25 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    put:
      tags:
      - Roles
      summary: Update a role
      operationId: update_15
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          description: update_15 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
    delete:
      tags:
      - Roles
      summary: Delete a role
      operationId: delete_26
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/roles/{tenant}:
    post:
      tags:
      - Roles
      summary: Create a role
      operationId: create_22
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          description: create_22 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /api/v1/tenants/roles/{tenant}/{ressourceTenant}:
    post:
      tags:
      - Roles
      summary: Create a role
      operationId: create_23
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        "200":
          description: create_23 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
  /api/v1/tenants/search:
    get:
      tags:
      - Tenants
      summary: Search for tenants
      operationId: find_29
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_29 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Tenant_'
  /api/v1/tenants/search/{tenant}:
    get:
      tags:
      - Tenants
      summary: Search for tenants
      operationId: find_30
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_30 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Tenant_'
  /api/v1/tenants/users:
    post:
      tags:
      - Users
      summary: Create a standard user
      operationId: create_24
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUser'
        required: true
      responses:
        "200":
          description: create_24 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/tenants/users/autocomplete:
    post:
      tags:
      - Users
      summary: List users for autocomplete
      operationId: autocomplete_15
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractUserController.UserApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete_15 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiUser'
  /api/v1/tenants/users/autocomplete/{tenant}:
    post:
      tags:
      - Users
      summary: List users for autocomplete
      operationId: autocomplete_16
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractUserController.UserApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete_16 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiUser'
  /api/v1/tenants/users/autocomplete/{tenant}/{ressourceTenant}:
    post:
      tags:
      - Users
      summary: List users for autocomplete
      operationId: autocomplete_17
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractUserController.UserApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete_17 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiUser'
  /api/v1/tenants/users/search:
    get:
      tags:
      - Users
      summary: Search for users
      operationId: find_31
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: The type of user
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/UserType'
      responses:
        "200":
          description: find_31 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_ApiUser_'
  /api/v1/tenants/users/search/{tenant}:
    get:
      tags:
      - Users
      summary: Search for users
      operationId: find_32
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: The type of user
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/UserType'
      responses:
        "200":
          description: find_32 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_ApiUser_'
  /api/v1/tenants/users/search/{tenant}/{ressourceTenant}:
    get:
      tags:
      - Users
      summary: Search for users
      operationId: find_33
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: The type of user
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/UserType'
      responses:
        "200":
          description: find_33 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_ApiUser_'
  /api/v1/tenants/users/service-accounts:
    post:
      tags:
      - Users
      summary: Create a user service account
      operationId: createServiceAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiServiceAccount'
        required: true
      responses:
        "200":
          description: createServiceAccount 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiServiceAccount'
  /api/v1/tenants/users/service-accounts/{id}:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: updateServiceAccount
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiServiceAccount'
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/tenants/users/service-accounts/{id}/{tenant}:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: updateServiceAccount_1
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiServiceAccount'
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/tenants/users/service-accounts/{id}/{tenant}/{ressourceTenant}:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: updateServiceAccount_2
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiServiceAccount'
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/tenants/users/service-accounts/{tenant}:
    post:
      tags:
      - Users
      summary: Create a user service account
      operationId: createServiceAccount_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiServiceAccount'
        required: true
      responses:
        "200":
          description: createServiceAccount_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiServiceAccount'
  /api/v1/tenants/users/service-accounts/{tenant}/{ressourceTenant}:
    post:
      tags:
      - Users
      summary: Create a user service account
      operationId: createServiceAccount_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiServiceAccount'
        required: true
      responses:
        "200":
          description: createServiceAccount_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiServiceAccount'
  /api/v1/tenants/users/{id}:
    get:
      tags:
      - Users
      summary: Get a user
      operationId: index_26
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
    put:
      tags:
      - Users
      summary: Update a standard user
      operationId: update_16
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUser'
        required: true
      responses:
        "404":
          description: On user not found
    delete:
      tags:
      - Users
      summary: Delete a user
      operationId: delete_27
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "404":
          description: On user not found
  /api/v1/tenants/users/{id}/api-tokens:
    get:
      tags:
      - Users
      summary: List all API Tokens for specific user
      operationId: listApiTokens_2
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listApiTokens_2 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Users
      summary: Create new API Token for a specific user
      operationId: createApiTokensForUser
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiTokenRequest'
        required: true
      responses:
        "200":
          description: createApiTokensForUser 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/tenants/users/{id}/api-tokens/{tenant}:
    get:
      tags:
      - Users
      summary: List all API Tokens for specific user
      operationId: listApiTokens_3
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listApiTokens_3 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Users
      summary: Create new API Token for a specific user
      operationId: createApiTokensForUser_1
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiTokenRequest'
        required: true
      responses:
        "200":
          description: createApiTokensForUser_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/tenants/users/{id}/api-tokens/{tenant}/{ressourceTenant}:
    get:
      tags:
      - Users
      summary: List all API Tokens for specific user
      operationId: listApiTokens_4
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listApiTokens_4 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Users
      summary: Create new API Token for a specific user
      operationId: createApiTokensForUser_2
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiTokenRequest'
        required: true
      responses:
        "200":
          description: createApiTokensForUser_2 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/tenants/users/{id}/api-tokens/{tokenId}:
    delete:
      tags:
      - Users
      summary: Delete an API Token for specific user and token id
      operationId: deleteApiToken_2
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken_2 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/tenants/users/{id}/api-tokens/{tokenId}/{tenant}:
    delete:
      tags:
      - Users
      summary: Delete an API Token for specific user and token id
      operationId: deleteApiToken_3
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken_3 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/tenants/users/{id}/api-tokens/{tokenId}/{tenant}/{ressourceTenant}:
    delete:
      tags:
      - Users
      summary: Delete an API Token for specific user and token id
      operationId: deleteApiToken_4
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken_4 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/tenants/users/{id}/auths/{uid}:
    delete:
      tags:
      - Users
      summary: Delete an Auth for a user
      operationId: deleteAuth
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: uid
        in: path
        description: The auth id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
  /api/v1/tenants/users/{id}/auths/{uid}/{tenant}:
    delete:
      tags:
      - Users
      summary: Delete an Auth for a user
      operationId: deleteAuth_1
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: uid
        in: path
        description: The auth id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
  /api/v1/tenants/users/{id}/auths/{uid}/{tenant}/{ressourceTenant}:
    delete:
      tags:
      - Users
      summary: Delete an Auth for a user
      operationId: deleteAuth_2
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: uid
        in: path
        description: The auth id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
  /api/v1/tenants/users/{id}/password:
    put:
      tags:
      - Users
      summary: Create a basic auth password for a standard user
      operationId: index_27
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractUserController.PasswordRequest'
        required: true
      responses:
        "200":
          description: index_27 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/tenants/users/{id}/password/{tenant}:
    put:
      tags:
      - Users
      summary: Create a basic auth password for a standard user
      operationId: index_28
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractUserController.PasswordRequest'
        required: true
      responses:
        "200":
          description: index_28 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/tenants/users/{id}/password/{tenant}/{ressourceTenant}:
    put:
      tags:
      - Users
      summary: Create a basic auth password for a standard user
      operationId: index_29
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractUserController.PasswordRequest'
        required: true
      responses:
        "200":
          description: index_29 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/tenants/users/{id}/set-superadmin:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: setSuperAdmin
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/tenants/users/{id}/set-superadmin/{tenant}:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: setSuperAdmin_1
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/tenants/users/{id}/set-superadmin/{tenant}/{ressourceTenant}:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: setSuperAdmin_2
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/tenants/users/{id}/{tenant}:
    get:
      tags:
      - Users
      summary: Get a user
      operationId: index_30
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
    put:
      tags:
      - Users
      summary: Update a standard user
      operationId: update_17
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUser'
        required: true
      responses:
        "404":
          description: On user not found
    delete:
      tags:
      - Users
      summary: Delete a user
      operationId: delete_28
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "404":
          description: On user not found
  /api/v1/tenants/users/{id}/{tenant}/{ressourceTenant}:
    get:
      tags:
      - Users
      summary: Get a user
      operationId: index_31
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
    put:
      tags:
      - Users
      summary: Update a standard user
      operationId: update_18
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUser'
        required: true
      responses:
        "404":
          description: On user not found
    delete:
      tags:
      - Users
      summary: Delete a user
      operationId: delete_29
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "404":
          description: On user not found
  /api/v1/tenants/users/{tenant}:
    post:
      tags:
      - Users
      summary: Create a standard user
      operationId: create_25
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUser'
        required: true
      responses:
        "200":
          description: create_25 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/tenants/users/{tenant}/{ressourceTenant}:
    post:
      tags:
      - Users
      summary: Create a standard user
      operationId: create_26
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUser'
        required: true
      responses:
        "200":
          description: create_26 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/tenants/{id}:
    get:
      tags:
      - Tenants
      summary: Get a tenant
      operationId: get_2
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: get_2 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
    put:
      tags:
      - Tenants
      summary: Update a tenant
      operationId: update_19
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
        required: true
      responses:
        "200":
          description: update_19 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
    delete:
      tags:
      - Tenants
      summary: Delete a tenant
      operationId: delete_30
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/{id}/logo:
    post:
      tags:
      - Tenants
      summary: Set a tenant logo
      operationId: setLogo
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                logo:
                  type: string
                  description: The logo file
                  format: binary
            encoding:
              logo:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: setLogo 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTenant'
  /api/v1/tenants/{id}/logo/{tenant}:
    post:
      tags:
      - Tenants
      summary: Set a tenant logo
      operationId: setLogo_1
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                logo:
                  type: string
                  description: The logo file
                  format: binary
            encoding:
              logo:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: setLogo_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiTenant'
  /api/v1/tenants/{id}/{tenant}:
    get:
      tags:
      - Tenants
      summary: Get a tenant
      operationId: get_3
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: get_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
    put:
      tags:
      - Tenants
      summary: Update a tenant
      operationId: update_20
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
        required: true
      responses:
        "200":
          description: update_20 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
    delete:
      tags:
      - Tenants
      summary: Delete a tenant
      operationId: delete_31
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/{tenant}:
    post:
      tags:
      - Tenants
      summary: Create a tenant
      operationId: create_27
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
        required: true
      responses:
        "200":
          description: create_27 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
  /api/v1/triggers:
    put:
      tags:
      - Triggers
      summary: Update a trigger
      operationId: update_21
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
        required: true
      responses:
        "200":
          description: update_21 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
  /api/v1/triggers/backfill/delete:
    put:
      tags:
      - Triggers
      summary: Delete a backfill
      operationId: deleteBackfill
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
        required: true
      responses:
        "200":
          description: deleteBackfill 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
  /api/v1/triggers/backfill/delete/{tenant}:
    put:
      tags:
      - Triggers
      summary: Delete a backfill
      operationId: deleteBackfill_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
        required: true
      responses:
        "200":
          description: deleteBackfill_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
  /api/v1/triggers/backfill/pause:
    put:
      tags:
      - Triggers
      summary: Pause a backfill
      operationId: pauseBackfill
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
        required: true
      responses:
        "200":
          description: pauseBackfill 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
  /api/v1/triggers/backfill/pause/{tenant}:
    put:
      tags:
      - Triggers
      summary: Pause a backfill
      operationId: pauseBackfill_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
        required: true
      responses:
        "200":
          description: pauseBackfill_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
  /api/v1/triggers/backfill/unpause:
    put:
      tags:
      - Triggers
      summary: Unpause a backfill
      operationId: unpauseBackfill
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
        required: true
      responses:
        "200":
          description: unpauseBackfill 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
  /api/v1/triggers/backfill/unpause/{tenant}:
    put:
      tags:
      - Triggers
      summary: Unpause a backfill
      operationId: unpauseBackfill_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
        required: true
      responses:
        "200":
          description: unpauseBackfill_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
  /api/v1/triggers/search:
    get:
      tags:
      - Triggers
      summary: Search for triggers
      operationId: search_6
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: search_6 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_TriggerController.Triggers_'
  /api/v1/triggers/search/{tenant}:
    get:
      tags:
      - Triggers
      summary: Search for triggers
      operationId: search_7
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: search_7 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_TriggerController.Triggers_'
  /api/v1/triggers/{namespace}/{flowId}:
    get:
      tags:
      - Triggers
      summary: Get all triggers for a flow
      operationId: find_34
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_34 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Trigger_'
  /api/v1/triggers/{namespace}/{flowId}/{tenant}:
    get:
      tags:
      - Triggers
      summary: Get all triggers for a flow
      operationId: find_35
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_35 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_Trigger_'
  /api/v1/triggers/{namespace}/{flowId}/{triggerId}/unlock:
    post:
      tags:
      - Triggers
      summary: Unlock a trigger
      operationId: unlock
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: triggerId
        in: path
        description: The trigger id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: unlock 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
  /api/v1/triggers/{namespace}/{flowId}/{triggerId}/unlock/{tenant}:
    post:
      tags:
      - Triggers
      summary: Unlock a trigger
      operationId: unlock_1
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: triggerId
        in: path
        description: The trigger id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: unlock_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
  /api/v1/triggers/{tenant}:
    put:
      tags:
      - Triggers
      summary: Update a trigger
      operationId: update_22
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trigger'
        required: true
      responses:
        "200":
          description: update_22 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trigger'
  /api/v1/usages:
    get:
      tags:
      - Misc
      summary: Get instance usage information for the current tenant
      operationId: tenantUsage
      responses:
        "200":
          description: tenantUsage 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/Usage_3'
                - $ref: '#/components/schemas/Usage_1'
              example: null
  /api/v1/usages/all:
    get:
      tags:
      - Misc
      summary: Get instance usage information
      operationId: usages
      responses:
        "200":
          description: usages 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usage'
  /api/v1/usages/all/{tenant}:
    get:
      tags:
      - Misc
      summary: Get instance usage information
      operationId: usages_1
      responses:
        "200":
          description: usages_1 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usage'
  /api/v1/usages/{tenant}:
    get:
      tags:
      - Misc
      summary: Get instance usage information for the current tenant
      operationId: tenantUsage_1
      responses:
        "200":
          description: tenantUsage_1 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/Usage_4'
                - $ref: '#/components/schemas/Usage_2'
              example: null
  /api/v1/users:
    post:
      tags:
      - Users
      summary: Create a standard user
      operationId: create_28
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUser'
        required: true
      responses:
        "200":
          description: create_28 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/users/autocomplete:
    post:
      tags:
      - Users
      summary: List users for autocomplete
      operationId: autocomplete_18
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractUserController.UserApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete_18 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiUser'
  /api/v1/users/autocomplete/{tenant}:
    post:
      tags:
      - Users
      summary: List users for autocomplete
      operationId: autocomplete_19
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractUserController.UserApiAutocomplete'
        required: true
      responses:
        "200":
          description: autocomplete_19 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiUser'
  /api/v1/users/password:
    put:
      tags:
      - Users
      summary: Update login password for authenticated user
      operationId: updateLoginPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserController.UpdatePasswordRequest'
        required: true
      responses:
        "200":
          description: updateLoginPassword 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/users/password/{tenant}:
    put:
      tags:
      - Users
      summary: Update login password for authenticated user
      operationId: updateLoginPassword_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserController.UpdatePasswordRequest'
        required: true
      responses:
        "200":
          description: updateLoginPassword_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/users/search:
    get:
      tags:
      - Users
      summary: Search for users
      operationId: find_36
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: The type of user
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/UserType'
      responses:
        "200":
          description: find_36 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_ApiUser_'
  /api/v1/users/search/{tenant}:
    get:
      tags:
      - Users
      summary: Search for users
      operationId: find_37
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: The type of user
        schema:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/UserType'
      responses:
        "200":
          description: find_37 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedResults_ApiUser_'
  /api/v1/users/service-accounts:
    post:
      tags:
      - Users
      summary: Create a user service account
      operationId: createServiceAccount_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiServiceAccount'
        required: true
      responses:
        "200":
          description: createServiceAccount_3 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiServiceAccount'
  /api/v1/users/service-accounts/{id}:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: updateServiceAccount_3
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiServiceAccount'
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/users/service-accounts/{id}/{tenant}:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: updateServiceAccount_4
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiServiceAccount'
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/users/service-accounts/{tenant}:
    post:
      tags:
      - Users
      summary: Create a user service account
      operationId: createServiceAccount_4
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiServiceAccount'
        required: true
      responses:
        "200":
          description: createServiceAccount_4 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiServiceAccount'
  /api/v1/users/{id}:
    get:
      tags:
      - Users
      summary: Get a user
      operationId: index_32
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
    put:
      tags:
      - Users
      summary: Update a standard user
      operationId: update_23
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUser'
        required: true
      responses:
        "404":
          description: On user not found
    delete:
      tags:
      - Users
      summary: Delete a user
      operationId: delete_32
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "404":
          description: On user not found
  /api/v1/users/{id}/api-tokens:
    get:
      tags:
      - Users
      summary: List all API Tokens for specific user
      operationId: listApiTokens_5
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listApiTokens_5 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Users
      summary: Create new API Token for a specific user
      operationId: createApiTokensForUser_3
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiTokenRequest'
        required: true
      responses:
        "200":
          description: createApiTokensForUser_3 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/users/{id}/api-tokens/{tenant}:
    get:
      tags:
      - Users
      summary: List all API Tokens for specific user
      operationId: listApiTokens_6
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listApiTokens_6 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Users
      summary: Create new API Token for a specific user
      operationId: createApiTokensForUser_4
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApiTokenRequest'
        required: true
      responses:
        "200":
          description: createApiTokensForUser_4 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/users/{id}/api-tokens/{tokenId}:
    delete:
      tags:
      - Users
      summary: Delete an API Token for specific user and token id
      operationId: deleteApiToken_5
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken_5 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/users/{id}/api-tokens/{tokenId}/{tenant}:
    delete:
      tags:
      - Users
      summary: Delete an API Token for specific user and token id
      operationId: deleteApiToken_6
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken_6 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/users/{id}/auths/{uid}:
    delete:
      tags:
      - Users
      summary: Delete an Auth for a user
      operationId: deleteAuth_3
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: uid
        in: path
        description: The auth id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
  /api/v1/users/{id}/auths/{uid}/{tenant}:
    delete:
      tags:
      - Users
      summary: Delete an Auth for a user
      operationId: deleteAuth_4
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: uid
        in: path
        description: The auth id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
  /api/v1/users/{id}/password:
    put:
      tags:
      - Users
      summary: Create a basic auth password for a standard user
      operationId: index_33
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractUserController.PasswordRequest'
        required: true
      responses:
        "200":
          description: index_33 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/users/{id}/password/{tenant}:
    put:
      tags:
      - Users
      summary: Create a basic auth password for a standard user
      operationId: index_34
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AbstractUserController.PasswordRequest'
        required: true
      responses:
        "200":
          description: index_34 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
  /api/v1/users/{id}/{tenant}:
    get:
      tags:
      - Users
      summary: Get a user
      operationId: index_35
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
    put:
      tags:
      - Users
      summary: Update a standard user
      operationId: update_24
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUser'
        required: true
      responses:
        "404":
          description: On user not found
    delete:
      tags:
      - Users
      summary: Delete a user
      operationId: delete_33
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "404":
          description: On user not found
  /api/v1/users/{tenant}:
    post:
      tags:
      - Users
      summary: Create a standard user
      operationId: create_29
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiUser'
        required: true
      responses:
        "200":
          description: create_29 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiUser'
components:
  schemas:
    AbstractBindingController.BindingDetail:
      required:
      - binding
      - group
      - role
      - user
      type: object
      properties:
        binding:
          $ref: '#/components/schemas/Binding'
        role:
          $ref: '#/components/schemas/Role'
        user:
          $ref: '#/components/schemas/ApiUser'
        group:
          $ref: '#/components/schemas/Group'
    AbstractCollection_AbstractBindingController.BindingDetail_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_ApiUser_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_AuditLogController.AuditLogWithUser_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_BlueprintController.BlueprintItem_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Blueprint_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_ClusterController.ApiServiceInstance_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Execution_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Flow_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Group_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_LogEntry_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_MetricEntry_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_NamespaceController.NamespaceWithDisabled_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Role_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_SearchResult_Flow__:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_TaskRun_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Template_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Tenant_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_TriggerController.Triggers_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Trigger_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractFlow:
      required:
      - deleted
      - disabled
      - id
      - namespace
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9._-]*"
          type: string
        namespace:
          pattern: "^[a-z0-9][a-z0-9._-]*"
          type: string
        revision:
          minimum: 1
          type: integer
          format: int32
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/Input_Object_'
        disabled:
          type: boolean
        deleted:
          type: boolean
    AbstractGraph:
      type: object
      properties:
        uid:
          type: string
        type:
          type: string
        error:
          type: boolean
    AbstractList_AbstractBindingController.BindingDetail_:
      $ref: '#/components/schemas/AbstractCollection_AbstractBindingController.BindingDetail_'
    AbstractList_ApiUser_:
      $ref: '#/components/schemas/AbstractCollection_ApiUser_'
    AbstractList_AuditLogController.AuditLogWithUser_:
      $ref: '#/components/schemas/AbstractCollection_AuditLogController.AuditLogWithUser_'
    AbstractList_BlueprintController.BlueprintItem_:
      $ref: '#/components/schemas/AbstractCollection_BlueprintController.BlueprintItem_'
    AbstractList_Blueprint_:
      $ref: '#/components/schemas/AbstractCollection_Blueprint_'
    AbstractList_ClusterController.ApiServiceInstance_:
      $ref: '#/components/schemas/AbstractCollection_ClusterController.ApiServiceInstance_'
    AbstractList_Execution_:
      $ref: '#/components/schemas/AbstractCollection_Execution_'
    AbstractList_Flow_:
      $ref: '#/components/schemas/AbstractCollection_Flow_'
    AbstractList_Group_:
      $ref: '#/components/schemas/AbstractCollection_Group_'
    AbstractList_LogEntry_:
      $ref: '#/components/schemas/AbstractCollection_LogEntry_'
    AbstractList_MetricEntry_:
      $ref: '#/components/schemas/AbstractCollection_MetricEntry_'
    AbstractList_NamespaceController.NamespaceWithDisabled_:
      $ref: '#/components/schemas/AbstractCollection_NamespaceController.NamespaceWithDisabled_'
    AbstractList_Role_:
      $ref: '#/components/schemas/AbstractCollection_Role_'
    AbstractList_SearchResult_Flow__:
      $ref: '#/components/schemas/AbstractCollection_SearchResult_Flow__'
    AbstractList_TaskRun_:
      $ref: '#/components/schemas/AbstractCollection_TaskRun_'
    AbstractList_Template_:
      $ref: '#/components/schemas/AbstractCollection_Template_'
    AbstractList_Tenant_:
      $ref: '#/components/schemas/AbstractCollection_Tenant_'
    AbstractList_TriggerController.Triggers_:
      $ref: '#/components/schemas/AbstractCollection_TriggerController.Triggers_'
    AbstractList_Trigger_:
      $ref: '#/components/schemas/AbstractCollection_Trigger_'
    AbstractMetricEntry_Object_:
      required:
      - name
      type: object
      properties:
        type:
          type: string
        value: {}
        name:
          type: string
        tags:
          type: object
          additionalProperties:
            type: string
        timestamp:
          type: string
          format: date-time
    AbstractRepository_MethodTypeSignature_:
      type: object
      properties:
        tree:
          $ref: '#/components/schemas/MethodTypeSignature'
        reifier:
          $ref: '#/components/schemas/Reifier'
    AbstractRetry:
      type: object
    AbstractTrigger:
      required:
      - disabled
      - id
      - type
      type: object
      properties:
        minLogLevel:
          deprecated: true
          allOf:
          - $ref: '#/components/schemas/Level'
        id:
          title: A unique ID for the whole flow.
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          title: The class name for this current trigger.
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
        description:
          type: string
        conditions:
          title: List of conditions in order to limit the flow trigger.
          type: array
          items:
            $ref: '#/components/schemas/Condition'
        disabled:
          type: boolean
        workerGroup:
          $ref: '#/components/schemas/WorkerGroup'
        logLevel:
          $ref: '#/components/schemas/Level'
        labels:
          title: The labels to pass to the execution created.
          type: array
          items:
            $ref: '#/components/schemas/Label'
        stopAfter:
          title: List of execution states after which a trigger should be stopped
            (a.k.a. disabled).
          type: array
          items:
            $ref: '#/components/schemas/State.Type'
    AbstractTriggerForExecution:
      required:
      - id
      - type
      type: object
      properties:
        id:
          title: A unique ID for the whole flow.
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          title: The class name for this current trigger.
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
    AbstractUser:
      required:
      - type
      - username
      type: object
      properties:
        type:
          $ref: '#/components/schemas/UserType'
        groupList:
          type: array
          items:
            $ref: '#/components/schemas/AbstractUser.GroupIdentifier'
        groups:
          type: array
          items:
            type: object
        id:
          type: string
        username:
          pattern: "^[a-zA-Z0-9_!#$%&’*+-=?`{|}~^.-@]+$"
          type: string
        description:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          pattern: "^$|^[a-zA-Z0-9_!#$%&’*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$"
          type: string
    AbstractUser.GroupIdentifier:
      required:
      - groupId
      - membership
      - tenantId
      type: object
      properties:
        tenantId:
          type: string
          nullable: true
        groupId:
          type: string
        membership:
          $ref: '#/components/schemas/AbstractUser.GroupIdentifier.Membership'
    AbstractUser.GroupIdentifier.Membership:
      type: string
      enum:
      - OWNER
      - MEMBER
    AbstractUserController.PasswordRequest:
      required:
      - password
      type: object
      properties:
        password:
          type: string
    AbstractUserController.UserApiAutocomplete:
      type: object
      allOf:
      - $ref: '#/components/schemas/ApiAutocomplete'
      - properties:
          username:
            type: string
            nullable: true
    AccessibleObject:
      type: object
      properties:
        accessible:
          type: boolean
          deprecated: true
        accessible0:
          type: boolean
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        declaredAnnotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        root:
          $ref: '#/components/schemas/AccessibleObject'
    AclService.NamespaceRole:
      required:
      - namespaceId
      - role
      type: object
      properties:
        role:
          $ref: '#/components/schemas/Role'
        namespaceId:
          type: string
    Action:
      type: string
      enum:
      - READ
      - CREATE
      - UPDATE
      - DELETE
    AnnotatedElement:
      type: object
      properties:
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        declaredAnnotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
    AnnotatedType:
      type: object
      allOf:
      - $ref: '#/components/schemas/AnnotatedElement'
      - properties:
          annotatedOwnerType:
            $ref: '#/components/schemas/AnnotatedType'
          type:
            $ref: '#/components/schemas/Type'
          annotations:
            type: array
            items:
              $ref: '#/components/schemas/Annotation'
          declaredAnnotations:
            type: array
            items:
              $ref: '#/components/schemas/Annotation'
    Annotation:
      type: object
    AnnotationType:
      type: object
      properties:
        inherited:
          type: boolean
    ApiAuth:
      required:
      - name
      - type
      - uid
      type: object
      properties:
        uid:
          type: string
        type:
          type: string
        name:
          type: string
    ApiAutocomplete:
      type: object
      properties:
        q:
          type: string
          nullable: true
        ids:
          type: array
          nullable: true
          items:
            type: string
    ApiIds:
      required:
      - ids
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
    ApiServiceAccount:
      required:
      - description
      - groupList
      - id
      - username
      type: object
      properties:
        id:
          type: string
          description: the user's ID.
        username:
          pattern: "^(?=.{1,63}$)[a-z0-9]+(?:-[a-z0-9]+)*$"
          type: string
          description: the user's name.
        description:
          type: string
          description: the user's description.
        groupList:
          type: array
          items:
            $ref: '#/components/schemas/AbstractUser.GroupIdentifier'
      description: A User Service Account.
    ApiTenant:
      type: object
      allOf:
      - $ref: '#/components/schemas/Tenant'
      - required:
        - deleted
        - logo
        properties:
          deleted:
            type: boolean
          logo:
            type: string
    ApiUser:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractUser'
      - properties:
          auths:
            type: array
            items:
              $ref: '#/components/schemas/ApiAuth'
    ArrayListTotal_AbstractBindingController.BindingDetail_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_AbstractBindingController.BindingDetail_'
      - $ref: '#/components/schemas/AbstractList_AbstractBindingController.BindingDetail_'
      - $ref: '#/components/schemas/AbstractCollection_AbstractBindingController.BindingDetail_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_ApiUser_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_ApiUser_'
      - $ref: '#/components/schemas/AbstractList_ApiUser_'
      - $ref: '#/components/schemas/AbstractCollection_ApiUser_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_AuditLogController.AuditLogWithUser_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_AuditLogController.AuditLogWithUser_'
      - $ref: '#/components/schemas/AbstractList_AuditLogController.AuditLogWithUser_'
      - $ref: '#/components/schemas/AbstractCollection_AuditLogController.AuditLogWithUser_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_BlueprintController.BlueprintItem_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_BlueprintController.BlueprintItem_'
      - $ref: '#/components/schemas/AbstractList_BlueprintController.BlueprintItem_'
      - $ref: '#/components/schemas/AbstractCollection_BlueprintController.BlueprintItem_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Blueprint_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_Blueprint_'
      - $ref: '#/components/schemas/AbstractList_Blueprint_'
      - $ref: '#/components/schemas/AbstractCollection_Blueprint_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_ClusterController.ApiServiceInstance_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_ClusterController.ApiServiceInstance_'
      - $ref: '#/components/schemas/AbstractList_ClusterController.ApiServiceInstance_'
      - $ref: '#/components/schemas/AbstractCollection_ClusterController.ApiServiceInstance_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Execution_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_Execution_'
      - $ref: '#/components/schemas/AbstractList_Execution_'
      - $ref: '#/components/schemas/AbstractCollection_Execution_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Flow_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_Flow_'
      - $ref: '#/components/schemas/AbstractList_Flow_'
      - $ref: '#/components/schemas/AbstractCollection_Flow_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Group_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_Group_'
      - $ref: '#/components/schemas/AbstractList_Group_'
      - $ref: '#/components/schemas/AbstractCollection_Group_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_LogEntry_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_LogEntry_'
      - $ref: '#/components/schemas/AbstractList_LogEntry_'
      - $ref: '#/components/schemas/AbstractCollection_LogEntry_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_MetricEntry_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_MetricEntry_'
      - $ref: '#/components/schemas/AbstractList_MetricEntry_'
      - $ref: '#/components/schemas/AbstractCollection_MetricEntry_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_NamespaceController.NamespaceWithDisabled_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_NamespaceController.NamespaceWithDisabled_'
      - $ref: '#/components/schemas/AbstractList_NamespaceController.NamespaceWithDisabled_'
      - $ref: '#/components/schemas/AbstractCollection_NamespaceController.NamespaceWithDisabled_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Role_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_Role_'
      - $ref: '#/components/schemas/AbstractList_Role_'
      - $ref: '#/components/schemas/AbstractCollection_Role_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_SearchResult_Flow__:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_SearchResult_Flow__'
      - $ref: '#/components/schemas/AbstractList_SearchResult_Flow__'
      - $ref: '#/components/schemas/AbstractCollection_SearchResult_Flow__'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_TaskRun_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_TaskRun_'
      - $ref: '#/components/schemas/AbstractList_TaskRun_'
      - $ref: '#/components/schemas/AbstractCollection_TaskRun_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Template_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_Template_'
      - $ref: '#/components/schemas/AbstractList_Template_'
      - $ref: '#/components/schemas/AbstractCollection_Template_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Tenant_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_Tenant_'
      - $ref: '#/components/schemas/AbstractList_Tenant_'
      - $ref: '#/components/schemas/AbstractCollection_Tenant_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_TriggerController.Triggers_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_TriggerController.Triggers_'
      - $ref: '#/components/schemas/AbstractList_TriggerController.Triggers_'
      - $ref: '#/components/schemas/AbstractCollection_TriggerController.Triggers_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Trigger_:
      type: object
      allOf:
      - $ref: '#/components/schemas/ArrayList_Trigger_'
      - $ref: '#/components/schemas/AbstractList_Trigger_'
      - $ref: '#/components/schemas/AbstractCollection_Trigger_'
      - required:
        - total
        properties:
          total:
            type: integer
            format: int64
    ArrayList_AbstractBindingController.BindingDetail_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_AbstractBindingController.BindingDetail_'
      - $ref: '#/components/schemas/AbstractCollection_AbstractBindingController.BindingDetail_'
      - properties:
          first:
            $ref: '#/components/schemas/AbstractBindingController.BindingDetail'
          last:
            $ref: '#/components/schemas/AbstractBindingController.BindingDetail'
          empty:
            type: boolean
    ArrayList_ApiUser_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_ApiUser_'
      - $ref: '#/components/schemas/AbstractCollection_ApiUser_'
      - properties:
          first:
            $ref: '#/components/schemas/ApiUser'
          last:
            $ref: '#/components/schemas/ApiUser'
          empty:
            type: boolean
    ArrayList_AuditLogController.AuditLogWithUser_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_AuditLogController.AuditLogWithUser_'
      - $ref: '#/components/schemas/AbstractCollection_AuditLogController.AuditLogWithUser_'
      - properties:
          first:
            $ref: '#/components/schemas/AuditLogController.AuditLogWithUser'
          last:
            $ref: '#/components/schemas/AuditLogController.AuditLogWithUser'
          empty:
            type: boolean
    ArrayList_BlueprintController.BlueprintItem_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_BlueprintController.BlueprintItem_'
      - $ref: '#/components/schemas/AbstractCollection_BlueprintController.BlueprintItem_'
      - properties:
          first:
            $ref: '#/components/schemas/BlueprintController.BlueprintItem'
          last:
            $ref: '#/components/schemas/BlueprintController.BlueprintItem'
          empty:
            type: boolean
    ArrayList_Blueprint_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_Blueprint_'
      - $ref: '#/components/schemas/AbstractCollection_Blueprint_'
      - properties:
          first:
            $ref: '#/components/schemas/Blueprint'
          last:
            $ref: '#/components/schemas/Blueprint'
          empty:
            type: boolean
    ArrayList_ClusterController.ApiServiceInstance_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_ClusterController.ApiServiceInstance_'
      - $ref: '#/components/schemas/AbstractCollection_ClusterController.ApiServiceInstance_'
      - properties:
          first:
            $ref: '#/components/schemas/ClusterController.ApiServiceInstance'
          last:
            $ref: '#/components/schemas/ClusterController.ApiServiceInstance'
          empty:
            type: boolean
    ArrayList_Execution_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_Execution_'
      - $ref: '#/components/schemas/AbstractCollection_Execution_'
      - properties:
          first:
            $ref: '#/components/schemas/Execution'
          last:
            $ref: '#/components/schemas/Execution'
          empty:
            type: boolean
    ArrayList_Flow_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_Flow_'
      - $ref: '#/components/schemas/AbstractCollection_Flow_'
      - properties:
          first:
            $ref: '#/components/schemas/Flow'
          last:
            $ref: '#/components/schemas/Flow'
          empty:
            type: boolean
    ArrayList_Group_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_Group_'
      - $ref: '#/components/schemas/AbstractCollection_Group_'
      - properties:
          first:
            $ref: '#/components/schemas/Group'
          last:
            $ref: '#/components/schemas/Group'
          empty:
            type: boolean
    ArrayList_LogEntry_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_LogEntry_'
      - $ref: '#/components/schemas/AbstractCollection_LogEntry_'
      - properties:
          first:
            $ref: '#/components/schemas/LogEntry'
          last:
            $ref: '#/components/schemas/LogEntry'
          empty:
            type: boolean
    ArrayList_MetricEntry_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_MetricEntry_'
      - $ref: '#/components/schemas/AbstractCollection_MetricEntry_'
      - properties:
          first:
            $ref: '#/components/schemas/MetricEntry'
          last:
            $ref: '#/components/schemas/MetricEntry'
          empty:
            type: boolean
    ArrayList_NamespaceController.NamespaceWithDisabled_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_NamespaceController.NamespaceWithDisabled_'
      - $ref: '#/components/schemas/AbstractCollection_NamespaceController.NamespaceWithDisabled_'
      - properties:
          first:
            $ref: '#/components/schemas/NamespaceController.NamespaceWithDisabled'
          last:
            $ref: '#/components/schemas/NamespaceController.NamespaceWithDisabled'
          empty:
            type: boolean
    ArrayList_Role_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_Role_'
      - $ref: '#/components/schemas/AbstractCollection_Role_'
      - properties:
          first:
            $ref: '#/components/schemas/Role'
          last:
            $ref: '#/components/schemas/Role'
          empty:
            type: boolean
    ArrayList_SearchResult_Flow__:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_SearchResult_Flow__'
      - $ref: '#/components/schemas/AbstractCollection_SearchResult_Flow__'
      - properties:
          first:
            $ref: '#/components/schemas/SearchResult_Flow_'
          last:
            $ref: '#/components/schemas/SearchResult_Flow_'
          empty:
            type: boolean
    ArrayList_TaskRun_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_TaskRun_'
      - $ref: '#/components/schemas/AbstractCollection_TaskRun_'
      - properties:
          first:
            $ref: '#/components/schemas/TaskRun'
          last:
            $ref: '#/components/schemas/TaskRun'
          empty:
            type: boolean
    ArrayList_Template_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_Template_'
      - $ref: '#/components/schemas/AbstractCollection_Template_'
      - properties:
          first:
            $ref: '#/components/schemas/Template'
          last:
            $ref: '#/components/schemas/Template'
          empty:
            type: boolean
    ArrayList_Tenant_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_Tenant_'
      - $ref: '#/components/schemas/AbstractCollection_Tenant_'
      - properties:
          first:
            $ref: '#/components/schemas/Tenant'
          last:
            $ref: '#/components/schemas/Tenant'
          empty:
            type: boolean
    ArrayList_TriggerController.Triggers_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_TriggerController.Triggers_'
      - $ref: '#/components/schemas/AbstractCollection_TriggerController.Triggers_'
      - properties:
          first:
            $ref: '#/components/schemas/TriggerController.Triggers'
          last:
            $ref: '#/components/schemas/TriggerController.Triggers'
          empty:
            type: boolean
    ArrayList_Trigger_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractList_Trigger_'
      - $ref: '#/components/schemas/AbstractCollection_Trigger_'
      - properties:
          first:
            $ref: '#/components/schemas/Trigger'
          last:
            $ref: '#/components/schemas/Trigger'
          empty:
            type: boolean
    AuditLog:
      required:
      - date
      - deleted
      - detail
      - id
      - type
      - userId
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/CrudEventType'
        detail:
          $ref: '#/components/schemas/AuditLogDetail'
        date:
          type: string
          format: date-time
        userId:
          type: string
        deleted:
          type: boolean
    AuditLogController.AuditLogWithUser:
      required:
      - auditLog
      - user
      type: object
      properties:
        auditLog:
          $ref: '#/components/schemas/AuditLog'
        user:
          $ref: '#/components/schemas/ApiUser'
    AuditLogController.FindRequest:
      required:
      - detail
      - permission
      - type
      type: object
      properties:
        permission:
          $ref: '#/components/schemas/Permission'
        type:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/CrudEventType'
        detail:
          type: object
          additionalProperties: true
    AuditLogDetail:
      required:
      - cls
      - permission
      - type
      type: object
      properties:
        type:
          type: string
        cls:
          type: string
        permission:
          $ref: '#/components/schemas/Permission'
    AuthController.Auth:
      type: object
      properties:
        loginPassword:
          type: boolean
        oauths:
          type: array
          items:
            type: string
    Backfill:
      title: A backfill configuration.
      required:
      - start
      type: object
      properties:
        start:
          title: The start date.
          type: string
          format: date-time
        end:
          title: The end date.
          type: string
          format: date-time
        currentDate:
          title: The current date of the backfill being done.
          type: string
          format: date-time
        paused:
          title: Whether the backfill is paused.
          type: boolean
        inputs:
          allOf:
          - type: object
            additionalProperties: true
          - title: The inputs to pass to the backfilled executions.
        labels:
          title: The labels to pass to the backfilled executions.
          type: array
          items:
            $ref: '#/components/schemas/Label'
        previousNextExecutionDate:
          title: The nextExecutionDate before the backfill was created.
          type: string
          format: date-time
    Binding:
      required:
      - deleted
      - externalId
      - id
      - namespaceId
      - roleId
      - type
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/Binding.Type'
        externalId:
          type: string
        roleId:
          type: string
        namespaceId:
          type: string
        deleted:
          type: boolean
    Binding.Type:
      type: string
      enum:
      - USER
      - GROUP
    Blueprint:
      required:
      - deleted
      - description
      - id
      - includedTasks
      - publishedAt
      - tags
      - title
      type: object
      properties:
        id:
          type: string
        title:
          maxLength: 150
          minLength: 1
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        includedTasks:
          type: array
          items:
            type: string
        publishedAt:
          type: string
          format: date-time
        deleted:
          type: boolean
    BlueprintController.BlueprintItem:
      required:
      - description
      - id
      - includedTasks
      - publishedAt
      - tags
      - title
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        includedTasks:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        publishedAt:
          type: string
          format: date-time
    BlueprintController.BlueprintItemWithFlow:
      type: object
      allOf:
      - $ref: '#/components/schemas/BlueprintController.BlueprintItem'
      - properties:
          flow:
            type: string
    BlueprintController.BlueprintTagItem:
      required:
      - id
      - name
      - publishedAt
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        publishedAt:
          type: string
          format: date-time
    BlueprintWithFlow:
      type: object
      allOf:
      - $ref: '#/components/schemas/Blueprint'
      - required:
        - deleted
        - flow
        properties:
          deleted:
            type: boolean
          flow:
            minLength: 1
            type: string
    BulkErrorResponse:
      type: object
      properties:
        message:
          type: string
        invalids:
          type: array
          items:
            $ref: '#/components/schemas/ManualConstraintViolation_String_'
    BulkResponse:
      type: object
      properties:
        count:
          type: integer
          format: int32
    CertPath:
      required:
      - type
      type: object
      properties:
        type:
          type: string
        encodings:
          $ref: '#/components/schemas/Iterator_String_'
        encoded:
          type: array
          items:
            type: string
            format: byte
        certificates:
          type: array
          items:
            $ref: '#/components/schemas/Certificate'
    Certificate:
      required:
      - type
      type: object
      properties:
        type:
          type: string
        encoded:
          type: array
          items:
            type: string
            format: byte
        publicKey:
          $ref: '#/components/schemas/PublicKey'
    ClassLoader:
      type: object
      properties:
        name:
          type: string
        registeredAsParallelCapable:
          type: boolean
        parent:
          $ref: '#/components/schemas/ClassLoader'
        unnamedModule:
          $ref: '#/components/schemas/Module'
        definedPackages:
          type: array
          items:
            $ref: '#/components/schemas/Package'
        packages:
          type: array
          items:
            $ref: '#/components/schemas/Package'
        defaultAssertionStatus:
          type: boolean
    Class_ConstraintValidator_Annotation.Object__:
      type: object
    Class_Object_:
      type: object
      properties:
        interface:
          type: boolean
        array:
          type: boolean
        primitive:
          type: boolean
        annotation:
          type: boolean
        synthetic:
          type: boolean
        name:
          type: string
        classLoader:
          $ref: '#/components/schemas/ClassLoader'
        classLoader0:
          $ref: '#/components/schemas/ClassLoader'
        module:
          $ref: '#/components/schemas/Module'
        classData: {}
        typeParameters:
          type: array
          items:
            $ref: '#/components/schemas/TypeVariable_Class_Object__'
        superclass:
          $ref: '#/components/schemas/Class_Object_'
        genericSuperclass:
          $ref: '#/components/schemas/Type'
        package:
          $ref: '#/components/schemas/Package'
        packageName:
          type: string
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/Class_Object_'
        genericInterfaces:
          type: array
          items:
            $ref: '#/components/schemas/Type'
        componentType:
          $ref: '#/components/schemas/Class_Object_'
        modifiers:
          type: integer
          format: int32
        signers:
          type: array
          items:
            type: object
        enclosingMethod:
          $ref: '#/components/schemas/Method'
        enclosingConstructor:
          $ref: '#/components/schemas/Constructor_Object_'
        declaringClass:
          $ref: '#/components/schemas/Class_Object_'
        enclosingClass:
          $ref: '#/components/schemas/Class_Object_'
        simpleName:
          type: string
        typeName:
          type: string
        canonicalName:
          type: string
        unnamedClass:
          type: boolean
        anonymousClass:
          type: boolean
        localClass:
          type: boolean
        memberClass:
          type: boolean
        classes:
          type: array
          items:
            $ref: '#/components/schemas/Class_Object_'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
        methods:
          type: array
          items:
            $ref: '#/components/schemas/Method'
        constructors:
          type: array
          items:
            $ref: '#/components/schemas/Constructor_Object_'
        declaredClasses:
          type: array
          items:
            $ref: '#/components/schemas/Class_Object_'
        declaredFields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
        recordComponents:
          type: array
          items:
            $ref: '#/components/schemas/RecordComponent'
        declaredMethods:
          type: array
          items:
            $ref: '#/components/schemas/Method'
        declaredConstructors:
          type: array
          items:
            $ref: '#/components/schemas/Constructor_Object_'
        protectionDomain:
          $ref: '#/components/schemas/ProtectionDomain'
        rawAnnotations:
          type: array
          items:
            type: string
            format: byte
        rawTypeAnnotations:
          type: array
          items:
            type: string
            format: byte
        constantPool:
          $ref: '#/components/schemas/ConstantPool'
        enum:
          type: boolean
        record:
          type: boolean
        enumConstants:
          type: array
          items:
            type: object
        enumConstantsShared:
          type: array
          items:
            type: object
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        declaredAnnotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        annotationType:
          $ref: '#/components/schemas/AnnotationType'
        declaredAnnotationMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Annotation'
        annotatedSuperclass:
          $ref: '#/components/schemas/AnnotatedType'
        annotatedInterfaces:
          type: array
          items:
            $ref: '#/components/schemas/AnnotatedType'
        nestHost:
          $ref: '#/components/schemas/Class_Object_'
        nestMembers:
          type: array
          items:
            $ref: '#/components/schemas/Class_Object_'
        hidden:
          type: boolean
        permittedSubclasses:
          type: array
          items:
            $ref: '#/components/schemas/Class_Object_'
        sealed:
          type: boolean
    Class_Payload_:
      type: object
    Class_String_:
      type: object
      properties:
        interface:
          type: boolean
        array:
          type: boolean
        primitive:
          type: boolean
        annotation:
          type: boolean
        synthetic:
          type: boolean
        name:
          type: string
        classLoader:
          $ref: '#/components/schemas/ClassLoader'
        classLoader0:
          $ref: '#/components/schemas/ClassLoader'
        module:
          $ref: '#/components/schemas/Module'
        classData: {}
        typeParameters:
          type: array
          items:
            $ref: '#/components/schemas/TypeVariable_Class_String__'
        superclass:
          $ref: '#/components/schemas/Class_String_'
        genericSuperclass:
          $ref: '#/components/schemas/Type'
        package:
          $ref: '#/components/schemas/Package'
        packageName:
          type: string
        interfaces:
          type: array
          items:
            $ref: '#/components/schemas/Class_Object_'
        genericInterfaces:
          type: array
          items:
            $ref: '#/components/schemas/Type'
        componentType:
          $ref: '#/components/schemas/Class_Object_'
        modifiers:
          type: integer
          format: int32
        signers:
          type: array
          items:
            type: object
        enclosingMethod:
          $ref: '#/components/schemas/Method'
        enclosingConstructor:
          $ref: '#/components/schemas/Constructor_Object_'
        declaringClass:
          $ref: '#/components/schemas/Class_Object_'
        enclosingClass:
          $ref: '#/components/schemas/Class_Object_'
        simpleName:
          type: string
        typeName:
          type: string
        canonicalName:
          type: string
        unnamedClass:
          type: boolean
        anonymousClass:
          type: boolean
        localClass:
          type: boolean
        memberClass:
          type: boolean
        classes:
          type: array
          items:
            $ref: '#/components/schemas/Class_Object_'
        fields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
        methods:
          type: array
          items:
            $ref: '#/components/schemas/Method'
        constructors:
          type: array
          items:
            $ref: '#/components/schemas/Constructor_Object_'
        declaredClasses:
          type: array
          items:
            $ref: '#/components/schemas/Class_Object_'
        declaredFields:
          type: array
          items:
            $ref: '#/components/schemas/Field'
        recordComponents:
          type: array
          items:
            $ref: '#/components/schemas/RecordComponent'
        declaredMethods:
          type: array
          items:
            $ref: '#/components/schemas/Method'
        declaredConstructors:
          type: array
          items:
            $ref: '#/components/schemas/Constructor_Object_'
        protectionDomain:
          $ref: '#/components/schemas/ProtectionDomain'
        rawAnnotations:
          type: array
          items:
            type: string
            format: byte
        rawTypeAnnotations:
          type: array
          items:
            type: string
            format: byte
        constantPool:
          $ref: '#/components/schemas/ConstantPool'
        enum:
          type: boolean
        record:
          type: boolean
        enumConstants:
          type: array
          items:
            type: string
        enumConstantsShared:
          type: array
          items:
            type: string
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        declaredAnnotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        annotationType:
          $ref: '#/components/schemas/AnnotationType'
        declaredAnnotationMap:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/Annotation'
        annotatedSuperclass:
          $ref: '#/components/schemas/AnnotatedType'
        annotatedInterfaces:
          type: array
          items:
            $ref: '#/components/schemas/AnnotatedType'
        nestHost:
          $ref: '#/components/schemas/Class_Object_'
        nestMembers:
          type: array
          items:
            $ref: '#/components/schemas/Class_Object_'
        hidden:
          type: boolean
        permittedSubclasses:
          type: array
          items:
            $ref: '#/components/schemas/Class_Object_'
        sealed:
          type: boolean
    ClusterController.ApiActiveService:
      required:
      - total
      - type
      type: object
      properties:
        type:
          $ref: '#/components/schemas/Service.ServiceType'
        total:
          type: integer
          format: int64
    ClusterController.ApiActiveServiceList:
      required:
      - services
      - total
      type: object
      properties:
        total:
          type: integer
          format: int32
        services:
          type: array
          items:
            $ref: '#/components/schemas/ClusterController.ApiActiveService'
    ClusterController.ApiServerInstance:
      required:
      - hostname
      - id
      - type
      - version
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/ServerInstance.Type'
        version:
          type: string
        hostname:
          type: string
    ClusterController.ApiServiceInstance:
      required:
      - createdAt
      - id
      - server
      - state
      - type
      - updatedAt
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/Service.ServiceType'
        state:
          $ref: '#/components/schemas/Service.ServiceState'
        server:
          $ref: '#/components/schemas/ClusterController.ApiServerInstance'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CodeSigner:
      required:
      - signerCertPath
      - timestamp
      type: object
      properties:
        signerCertPath:
          $ref: '#/components/schemas/CertPath'
        timestamp:
          $ref: '#/components/schemas/Timestamp'
    CodeSource:
      type: object
      properties:
        location:
          type: string
          format: url
        locationNoFragString:
          type: string
        certificates:
          type: array
          items:
            $ref: '#/components/schemas/Certificate'
        codeSigners:
          type: array
          items:
            $ref: '#/components/schemas/CodeSigner'
    Collection_Action_:
      type: object
      properties:
        empty:
          type: boolean
    Collection_Object_:
      type: object
      properties:
        empty:
          type: boolean
    Concurrency:
      required:
      - behavior
      - limit
      type: object
      properties:
        limit:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          format: int32
        behavior:
          $ref: '#/components/schemas/Concurrency.Behavior'
    Concurrency.Behavior:
      type: string
      enum:
      - QUEUE
      - CANCEL
      - FAIL
    Condition:
      required:
      - type
      type: object
      properties:
        type:
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
    ConfigurationUsage:
      type: object
      properties:
        repositoryType:
          type: string
        queueType:
          type: string
        storageType:
          type: string
        secretType:
          type: string
        javaSecurityEnabled:
          type: boolean
    ConstantPool:
      type: object
      properties:
        size:
          type: integer
          format: int32
    ConstraintDescriptor_Annotation_:
      type: object
      properties:
        annotation: {}
        messageTemplate:
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Class_Object_'
        payload:
          type: array
          items:
            $ref: '#/components/schemas/Class_Payload_'
        validationAppliesTo:
          $ref: '#/components/schemas/ConstraintTarget'
        constraintValidatorClasses:
          type: array
          items:
            $ref: '#/components/schemas/Class_ConstraintValidator_Annotation.Object__'
        attributes:
          type: object
          additionalProperties: true
        composingConstraints:
          type: array
          items:
            $ref: '#/components/schemas/ConstraintDescriptor_Object_'
        reportAsSingleViolation:
          type: boolean
        valueUnwrapping:
          $ref: '#/components/schemas/ValidateUnwrappedValue'
    ConstraintDescriptor_Object_:
      type: object
      properties:
        annotation:
          $ref: '#/components/schemas/Annotation'
        messageTemplate:
          type: string
        groups:
          type: array
          items:
            $ref: '#/components/schemas/Class_Object_'
        payload:
          type: array
          items:
            $ref: '#/components/schemas/Class_Payload_'
        validationAppliesTo:
          $ref: '#/components/schemas/ConstraintTarget'
        constraintValidatorClasses:
          type: array
          items:
            $ref: '#/components/schemas/Class_ConstraintValidator_Annotation.Object__'
        attributes:
          type: object
          additionalProperties: true
        composingConstraints:
          type: array
          items:
            $ref: '#/components/schemas/ConstraintDescriptor_Annotation_'
        reportAsSingleViolation:
          type: boolean
        valueUnwrapping:
          $ref: '#/components/schemas/ValidateUnwrappedValue'
    ConstraintTarget:
      type: string
      enum:
      - IMPLICIT
      - RETURN_VALUE
      - PARAMETERS
    ConstructorAccessor:
      type: object
    ConstructorRepository:
      type: object
      allOf:
      - $ref: '#/components/schemas/GenericDeclRepository_MethodTypeSignature_'
      - $ref: '#/components/schemas/AbstractRepository_MethodTypeSignature_'
      - properties:
          parameterTypes:
            type: array
            items:
              $ref: '#/components/schemas/Type'
          exceptionTypes:
            type: array
            items:
              $ref: '#/components/schemas/Type'
    Constructor_Object_:
      type: object
      allOf:
      - $ref: '#/components/schemas/Executable'
      - $ref: '#/components/schemas/AccessibleObject'
      - required:
        - declaringClass
        - modifiers
        - parameterAnnotations
        - parameterTypes
        - signature
        - slot
        properties:
          genericInfo:
            $ref: '#/components/schemas/ConstructorRepository'
          root:
            $ref: '#/components/schemas/Constructor_Object_'
          annotationBytes:
            type: array
            items:
              type: string
              format: byte
          declaringClass:
            $ref: '#/components/schemas/Class_Object_'
          name:
            type: string
          modifiers:
            type: integer
            format: int32
          typeParameters:
            type: array
            items:
              $ref: '#/components/schemas/TypeVariable_Constructor_Object__'
          sharedParameterTypes:
            type: array
            items:
              $ref: '#/components/schemas/Class_Object_'
          sharedExceptionTypes:
            type: array
            items:
              $ref: '#/components/schemas/Class_Object_'
          parameterTypes:
            type: array
            items:
              $ref: '#/components/schemas/Class_Object_'
          parameterCount:
            type: integer
            format: int32
          genericParameterTypes:
            type: array
            items:
              $ref: '#/components/schemas/Type'
          exceptionTypes:
            type: array
            items:
              $ref: '#/components/schemas/Class_Object_'
          genericExceptionTypes:
            type: array
            items:
              $ref: '#/components/schemas/Type'
          varArgs:
            type: boolean
          synthetic:
            type: boolean
          constructorAccessor:
            $ref: '#/components/schemas/ConstructorAccessor'
          slot:
            type: integer
            format: int32
          signature:
            type: string
          rawAnnotations:
            type: array
            items:
              type: string
              format: byte
          rawParameterAnnotations:
            type: array
            items:
              type: string
              format: byte
          declaredAnnotations:
            type: array
            items:
              $ref: '#/components/schemas/Annotation'
          parameterAnnotations:
            type: array
            items:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
          annotatedReturnType:
            $ref: '#/components/schemas/AnnotatedType'
          annotatedReceiverType:
            $ref: '#/components/schemas/AnnotatedType'
    CreateApiTokenRequest:
      required:
      - description
      - extended
      - maxAge
      - name
      type: object
      properties:
        name:
          pattern: "^(?=.{1,63}$)[a-z0-9]+(?:-[a-z0-9]+)*$"
          type: string
        description:
          type: string
        maxAge:
          $ref: '#/components/schemas/Duration'
        extended:
          type: boolean
    CrudEventType:
      type: string
      enum:
      - READ
      - CREATE
      - UPDATE
      - DELETE
      - LOGIN
      - LOGOUT
    CurrentUserController.Me:
      required:
      - roles
      - tenants
      - user
      type: object
      properties:
        user:
          $ref: '#/components/schemas/ApiUser'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/AclService.NamespaceRole'
        tenants:
          type: array
          items:
            $ref: '#/components/schemas/ApiTenant'
    CurrentUserController.UserDetailsRequest:
      required:
      - email
      - firstName
      - lastName
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    DailyExecutionStatistics:
      required:
      - duration
      - executionCounts
      - groupBy
      - startDate
      type: object
      properties:
        startDate:
          type: string
          format: date-time
        duration:
          $ref: '#/components/schemas/DailyExecutionStatistics.Duration'
        executionCounts:
          properties:
            CREATED:
              type: integer
              format: int64
            RUNNING:
              type: integer
              format: int64
            PAUSED:
              type: integer
              format: int64
            RESTARTED:
              type: integer
              format: int64
            KILLING:
              type: integer
              format: int64
            SUCCESS:
              type: integer
              format: int64
            WARNING:
              type: integer
              format: int64
            FAILED:
              type: integer
              format: int64
            KILLED:
              type: integer
              format: int64
            CANCELLED:
              type: integer
              format: int64
            QUEUED:
              type: integer
              format: int64
            RETRYING:
              type: integer
              format: int64
            RETRIED:
              type: integer
              format: int64
        groupBy:
          type: string
    DailyExecutionStatistics.Duration:
      required:
      - avg
      - count
      - max
      - min
      - sum
      type: object
      properties:
        min:
          $ref: '#/components/schemas/Duration'
        avg:
          $ref: '#/components/schemas/Duration'
        max:
          $ref: '#/components/schemas/Duration'
        sum:
          $ref: '#/components/schemas/Duration'
        count:
          type: integer
          format: int64
    DayOfWeek:
      type: string
      enum:
      - MONDAY
      - TUESDAY
      - WEDNESDAY
      - THURSDAY
      - FRIDAY
      - SATURDAY
      - SUNDAY
    DocumentationWithSchema:
      type: object
      properties:
        markdown:
          type: string
        schema:
          $ref: '#/components/schemas/Schema'
    Duration:
      type: object
      properties:
        units:
          type: array
          items:
            $ref: '#/components/schemas/TemporalUnit'
        positive:
          type: boolean
        zero:
          type: boolean
        negative:
          type: boolean
        seconds:
          type: integer
          format: int64
        nano:
          type: integer
          format: int32
    Event_Execution_:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Execution'
        id:
          type: string
        name:
          type: string
        comment:
          type: string
        retry:
          $ref: '#/components/schemas/Duration'
    Event_LogEntry_:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/LogEntry'
        id:
          type: string
        name:
          type: string
        comment:
          type: string
        retry:
          $ref: '#/components/schemas/Duration'
    Executable:
      type: object
      allOf:
      - $ref: '#/components/schemas/AccessibleObject'
      - properties:
          annotationBytes:
            type: array
            items:
              type: string
              format: byte
          genericInfo:
            $ref: '#/components/schemas/ConstructorRepository'
          declaringClass:
            $ref: '#/components/schemas/Class_Object_'
          name:
            type: string
          modifiers:
            type: integer
            format: int32
          typeParameters:
            type: array
            items:
              $ref: '#/components/schemas/TypeVariable_GenericDeclaration_'
          sharedParameterTypes:
            type: array
            items:
              $ref: '#/components/schemas/Class_Object_'
          sharedExceptionTypes:
            type: array
            items:
              $ref: '#/components/schemas/Class_Object_'
          parameterTypes:
            type: array
            items:
              $ref: '#/components/schemas/Class_Object_'
          parameterCount:
            type: integer
            format: int32
          genericParameterTypes:
            type: array
            items:
              $ref: '#/components/schemas/Type'
          allGenericParameterTypes:
            type: array
            items:
              $ref: '#/components/schemas/Type'
          parameters:
            type: array
            items:
              $ref: '#/components/schemas/Parameter'
          typeAnnotationBytes0:
            type: array
            items:
              type: string
              format: byte
          typeAnnotationBytes:
            type: array
            items:
              type: string
              format: byte
          exceptionTypes:
            type: array
            items:
              $ref: '#/components/schemas/Class_Object_'
          genericExceptionTypes:
            type: array
            items:
              $ref: '#/components/schemas/Type'
          varArgs:
            type: boolean
          synthetic:
            type: boolean
          parameterAnnotations:
            type: array
            items:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
          declaredAnnotations:
            type: array
            items:
              $ref: '#/components/schemas/Annotation'
          annotatedReturnType:
            $ref: '#/components/schemas/AnnotatedType'
          annotatedReceiverType:
            $ref: '#/components/schemas/AnnotatedType'
          annotatedParameterTypes:
            type: array
            items:
              $ref: '#/components/schemas/AnnotatedType'
          annotatedExceptionTypes:
            type: array
            items:
              $ref: '#/components/schemas/AnnotatedType'
    Execution:
      required:
      - deleted
      - flowId
      - flowRevision
      - id
      - inputs
      - labels
      - metadata
      - namespace
      - originalId
      - outputs
      - parentId
      - state
      - taskRunList
      - trigger
      - variables
      type: object
      properties:
        id:
          type: string
        namespace:
          type: string
        flowId:
          type: string
        flowRevision:
          type: integer
          format: int32
        taskRunList:
          type: array
          items:
            $ref: '#/components/schemas/TaskRun'
        inputs:
          type: object
          additionalProperties: true
        outputs:
          type: object
          additionalProperties: true
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        variables:
          type: object
          additionalProperties: true
        state:
          $ref: '#/components/schemas/State'
        parentId:
          type: string
        originalId:
          type: string
        trigger:
          $ref: '#/components/schemas/ExecutionTrigger'
        deleted:
          type: boolean
        metadata:
          $ref: '#/components/schemas/ExecutionMetadata'
    ExecutionController.EvalResult:
      type: object
      properties:
        result:
          type: string
        error:
          type: string
        stackTrace:
          type: string
    ExecutionController.SetLabelsByIdsRequest:
      required:
      - executionLabels
      - executionsId
      type: object
      properties:
        executionsId:
          type: array
          items:
            type: string
        executionLabels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
    ExecutionController.StateRequest:
      required:
      - state
      - taskRunId
      type: object
      properties:
        taskRunId:
          type: string
        state:
          $ref: '#/components/schemas/State.Type'
    ExecutionMetadata:
      required:
      - attemptNumber
      - originalCreatedDate
      type: object
      properties:
        attemptNumber:
          type: integer
          format: int32
        originalCreatedDate:
          type: string
          format: date-time
    ExecutionRepositoryInterface.ChildFilter:
      type: string
      enum:
      - CHILD
      - MAIN
    ExecutionRepositoryInterface.FlowFilter:
      required:
      - id
      - namespace
      type: object
      properties:
        namespace:
          type: string
        id:
          type: string
    ExecutionTrigger:
      required:
      - id
      - type
      - variables
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        variables:
          type: object
          additionalProperties: true
    ExecutionUsage:
      type: object
      properties:
        dailyExecutionsCount:
          type: array
          items:
            $ref: '#/components/schemas/DailyExecutionStatistics'
        dailyTaskRunsCount:
          type: array
          items:
            $ref: '#/components/schemas/DailyExecutionStatistics'
    Field:
      type: object
      allOf:
      - $ref: '#/components/schemas/AccessibleObject'
      - required:
        - declaringClass
        - modifiers
        - name
        - trustedFinal
        - type
        properties:
          declaringClass:
            $ref: '#/components/schemas/Class_Object_'
          name:
            type: string
          modifiers:
            type: integer
            format: int32
          enumConstant:
            type: boolean
          synthetic:
            type: boolean
          type:
            $ref: '#/components/schemas/Class_Object_'
          genericType:
            $ref: '#/components/schemas/Type'
          root:
            $ref: '#/components/schemas/Field'
          trustedFinal:
            type: boolean
          declaredAnnotations:
            type: array
            items:
              $ref: '#/components/schemas/Annotation'
          annotatedType:
            $ref: '#/components/schemas/AnnotatedType'
    FieldTypeSignature:
      type: object
    FileAttributes:
      type: object
      properties:
        fileName:
          type: string
        lastModifiedTime:
          type: integer
          format: int64
        creationTime:
          type: integer
          format: int64
        type:
          $ref: '#/components/schemas/FileAttributes.FileType'
        size:
          type: integer
          format: int64
    FileAttributes.FileType:
      type: string
      enum:
      - File
      - Directory
    FileMetas:
      required:
      - size
      type: object
      properties:
        size:
          type: integer
          format: int64
    Flow:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractFlow'
      - required:
        - deleted
        - tasks
        properties:
          deleted:
            type: boolean
          taskDefaults:
            type: array
            deprecated: true
            items:
              $ref: '#/components/schemas/PluginDefault'
          description:
            type: string
          labels:
            type: object
            allOf:
            - oneOf:
              - $ref: '#/components/schemas/List_Object_'
              - $ref: '#/components/schemas/Map_Object.Object_'
            - oneOf:
              - $ref: '#/components/schemas/List_Object_'
              - $ref: '#/components/schemas/Map_Object.Object_'
          variables:
            type: object
            additionalProperties: true
          tasks:
            minItems: 1
            type: array
            items:
              $ref: '#/components/schemas/Task'
          errors:
            type: array
            items:
              $ref: '#/components/schemas/Task'
          listeners:
            type: array
            deprecated: true
            items:
              $ref: '#/components/schemas/Listener'
          triggers:
            type: array
            items:
              $ref: '#/components/schemas/AbstractTrigger'
          pluginDefaults:
            type: array
            items:
              $ref: '#/components/schemas/PluginDefault'
          concurrency:
            $ref: '#/components/schemas/Concurrency'
          outputs:
            title: Output values available and exposes to other flows.
            type: array
            description: Output values make information about the execution of your
              Flow available and expose for other Kestra flows to use. Output values
              are similar to return values in programming languages.
            items:
              $ref: '#/components/schemas/Output'
          retry:
            $ref: '#/components/schemas/AbstractRetry'
    FlowController.TaskValidationType:
      type: string
      enum:
      - TASKS
      - TRIGGERS
    FlowForExecution:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractFlow'
      - required:
        - deleted
        - tasks
        properties:
          deleted:
            type: boolean
          tasks:
            minItems: 1
            type: array
            items:
              $ref: '#/components/schemas/TaskForExecution'
          triggers:
            type: array
            items:
              $ref: '#/components/schemas/AbstractTriggerForExecution'
    FlowGraph:
      required:
      - clusters
      - edges
      - flowables
      - nodes
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/AbstractGraph'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/FlowGraph.Edge'
        clusters:
          type: array
          items:
            $ref: '#/components/schemas/FlowGraph.Cluster'
        flowables:
          type: array
          items:
            type: string
    FlowGraph.Cluster:
      required:
      - cluster
      - end
      - nodes
      - parents
      - start
      type: object
      properties:
        cluster:
          $ref: '#/components/schemas/AbstractGraph'
        nodes:
          type: array
          items:
            type: string
        parents:
          type: array
          items:
            type: string
        start:
          type: string
        end:
          type: string
    FlowGraph.Edge:
      required:
      - relation
      - source
      - target
      type: object
      properties:
        source:
          type: string
        target:
          type: string
        relation:
          $ref: '#/components/schemas/Relation'
    FlowNode:
      required:
      - id
      - namespace
      - uid
      type: object
      properties:
        uid:
          type: string
        namespace:
          type: string
        id:
          type: string
    FlowRelation:
      type: string
      enum:
      - FLOW_TASK
      - FLOW_TRIGGER
    FlowTopologyGraph:
      required:
      - edges
      - nodes
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/FlowNode'
        edges:
          type: array
          items:
            $ref: '#/components/schemas/FlowTopologyGraph.Edge'
    FlowTopologyGraph.Edge:
      required:
      - relation
      - source
      - target
      type: object
      properties:
        source:
          type: string
        target:
          type: string
        relation:
          $ref: '#/components/schemas/FlowRelation'
    FlowUsage:
      type: object
      properties:
        count:
          type: integer
          format: int32
        namespacesCount:
          type: integer
          format: int64
        taskTypeCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
        triggerTypeCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
        taskRunnerTypeCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
    FlowWithSource:
      type: object
      allOf:
      - $ref: '#/components/schemas/Flow'
      - $ref: '#/components/schemas/AbstractFlow'
      - required:
        - deleted
        properties:
          deleted:
            type: boolean
          source:
            type: string
    FormalTypeParameter:
      type: object
      properties:
        bounds:
          type: array
          items:
            $ref: '#/components/schemas/FieldTypeSignature'
        name:
          type: string
    GenericDeclRepository_MethodTypeSignature_:
      type: object
      allOf:
      - $ref: '#/components/schemas/AbstractRepository_MethodTypeSignature_'
      - properties:
          typeParameters:
            type: array
            items:
              $ref: '#/components/schemas/TypeVariable_GenericDeclaration_'
    Group:
      required:
      - deleted
      - description
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        deleted:
          type: boolean
    GroupUsage:
      type: object
      properties:
        count:
          type: integer
          format: int64
    HostUsage:
      type: object
      properties:
        uuid:
          type: string
        hardware:
          $ref: '#/components/schemas/HostUsage.Hardware'
        os:
          $ref: '#/components/schemas/HostUsage.Os'
        jvm:
          $ref: '#/components/schemas/HostUsage.Jvm'
    HostUsage.Hardware:
      type: object
      properties:
        logicalProcessorCount:
          type: integer
          format: int32
        physicalProcessorCount:
          type: integer
          format: int64
        maxFreq:
          type: integer
          format: int64
        memory:
          type: integer
          format: int64
        knownVmMacAddr:
          type: boolean
        knownDockerMacAddr:
          type: boolean
    HostUsage.Jvm:
      type: object
      properties:
        name:
          type: string
        vendor:
          type: string
        version:
          type: string
    HostUsage.Os:
      type: object
      properties:
        family:
          type: string
        version:
          type: string
        codeName:
          type: string
        buildNumber:
          type: string
    IdWithNamespace:
      type: object
      properties:
        namespace:
          type: string
        id:
          type: string
    InputType:
      required:
      - cls
      - type
      type: object
      properties:
        type:
          type: string
        cls:
          type: string
    Input_Object_:
      required:
      - id
      - type
      type: object
      properties:
        name:
          type: string
          deprecated: true
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][.a-zA-Z0-9_-]*"
          type: string
        type:
          $ref: '#/components/schemas/Type_1'
        description:
          type: string
        required:
          type: boolean
        defaults: {}
    Iterator_String_:
      type: object
    Key:
      type: object
      properties:
        algorithm:
          type: string
        format:
          type: string
        encoded:
          type: array
          items:
            type: string
            format: byte
    Label:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Level:
      type: string
      enum:
      - ERROR
      - WARN
      - INFO
      - DEBUG
      - TRACE
    List_Action_:
      type: object
      allOf:
      - $ref: '#/components/schemas/SequencedCollection_Action_'
      - $ref: '#/components/schemas/Collection_Action_'
      - properties:
          empty:
            type: boolean
          first:
            $ref: '#/components/schemas/Action'
          last:
            $ref: '#/components/schemas/Action'
    List_Object_:
      type: object
      allOf:
      - $ref: '#/components/schemas/SequencedCollection_Object_'
      - $ref: '#/components/schemas/Collection_Object_'
      - properties:
          empty:
            type: boolean
          first: {}
          last: {}
    Listener:
      required:
      - conditions
      - description
      - tasks
      type: object
      properties:
        description:
          type: string
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/Condition'
        tasks:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Task'
    LogEntry:
      required:
      - attemptNumber
      - deleted
      - executionId
      - flowId
      - level
      - message
      - namespace
      - taskId
      - taskRunId
      - thread
      - timestamp
      - triggerId
      type: object
      properties:
        namespace:
          type: string
        flowId:
          type: string
        taskId:
          type: string
          nullable: true
        executionId:
          type: string
          nullable: true
        taskRunId:
          type: string
          nullable: true
        attemptNumber:
          type: integer
          format: int32
          nullable: true
        triggerId:
          type: string
          nullable: true
        timestamp:
          type: string
          format: date-time
        level:
          $ref: '#/components/schemas/Level'
        thread:
          type: string
        message:
          type: string
        deleted:
          type: boolean
    LogStatistics:
      required:
      - counts
      - groupBy
      - timestamp
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        counts:
          properties:
            ERROR:
              type: integer
              format: int64
            WARN:
              type: integer
              format: int64
            INFO:
              type: integer
              format: int64
            DEBUG:
              type: integer
              format: int64
            TRACE:
              type: integer
              format: int64
        groupBy:
          type: string
    ManualConstraintViolation_String_:
      type: object
      properties:
        messageTemplate:
          type: string
        executableParameters:
          type: array
          items:
            type: object
        executableReturnValue: {}
        constraintDescriptor:
          $ref: '#/components/schemas/ConstraintDescriptor_Annotation_'
        message:
          type: string
        rootBean:
          type: string
        rootBeanClass:
          $ref: '#/components/schemas/Class_String_'
        leafBean: {}
        propertyPath:
          type: array
          items:
            type: object
        invalidValue: {}
    Map_Object.Object_:
      type: object
      properties:
        empty:
          type: boolean
    Method:
      type: object
      allOf:
      - $ref: '#/components/schemas/Executable'
      - $ref: '#/components/schemas/AccessibleObject'
      - required:
        - declaringClass
        - modifiers
        - name
        - parameterAnnotations
        - parameterTypes
        - returnType
        properties:
          genericInfo:
            $ref: '#/components/schemas/MethodRepository'
          root:
            $ref: '#/components/schemas/Method'
          annotationBytes:
            type: array
            items:
              type: string
              format: byte
          declaringClass:
            $ref: '#/components/schemas/Class_Object_'
          name:
            type: string
          modifiers:
            type: integer
            format: int32
          typeParameters:
            type: array
            items:
              $ref: '#/components/schemas/TypeVariable_Method_'
          returnType:
            $ref: '#/components/schemas/Class_Object_'
          genericReturnType:
            $ref: '#/components/schemas/Type'
          sharedParameterTypes:
            type: array
            items:
              $ref: '#/components/schemas/Class_Object_'
          sharedExceptionTypes:
            type: array
            items:
              $ref: '#/components/schemas/Class_Object_'
          parameterTypes:
            type: array
            items:
              $ref: '#/components/schemas/Class_Object_'
          parameterCount:
            type: integer
            format: int32
          genericParameterTypes:
            type: array
            items:
              $ref: '#/components/schemas/Type'
          exceptionTypes:
            type: array
            items:
              $ref: '#/components/schemas/Class_Object_'
          genericExceptionTypes:
            type: array
            items:
              $ref: '#/components/schemas/Type'
          bridge:
            type: boolean
          varArgs:
            type: boolean
          synthetic:
            type: boolean
          default:
            type: boolean
          methodAccessor:
            $ref: '#/components/schemas/MethodAccessor'
          defaultValue: {}
          declaredAnnotations:
            type: array
            items:
              $ref: '#/components/schemas/Annotation'
          parameterAnnotations:
            type: array
            items:
              type: array
              items:
                $ref: '#/components/schemas/Annotation'
          annotatedReturnType:
            $ref: '#/components/schemas/AnnotatedType'
    MethodAccessor:
      type: object
    MethodRepository:
      type: object
      allOf:
      - $ref: '#/components/schemas/ConstructorRepository'
      - $ref: '#/components/schemas/GenericDeclRepository_MethodTypeSignature_'
      - $ref: '#/components/schemas/AbstractRepository_MethodTypeSignature_'
      - properties:
          returnType:
            $ref: '#/components/schemas/Type'
    MethodTypeSignature:
      type: object
      properties:
        formalTypeParameters:
          type: array
          items:
            $ref: '#/components/schemas/FormalTypeParameter'
        parameterTypes:
          type: array
          items:
            $ref: '#/components/schemas/TypeSignature'
        returnType:
          $ref: '#/components/schemas/ReturnType'
        exceptionTypes:
          type: array
          items:
            $ref: '#/components/schemas/FieldTypeSignature'
    Metric:
      required:
      - baseUnit
      - description
      - name
      - tags
      - type
      - value
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        description:
          type: string
        baseUnit:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Metric.Tag'
        value: {}
    Metric.Tag:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    MetricAggregation:
      required:
      - date
      - name
      - value
      type: object
      properties:
        name:
          type: string
        value:
          type: number
          format: double
        date:
          type: string
          format: date-time
    MetricAggregations:
      required:
      - aggregations
      - groupBy
      type: object
      properties:
        groupBy:
          type: string
        aggregations:
          type: array
          items:
            $ref: '#/components/schemas/MetricAggregation'
    MetricEntry:
      required:
      - deleted
      - executionId
      - flowId
      - name
      - namespace
      - tags
      - taskId
      - taskRunId
      - timestamp
      - type
      - value
      type: object
      properties:
        namespace:
          type: string
        flowId:
          type: string
        taskId:
          type: string
          nullable: true
        executionId:
          type: string
          nullable: true
        taskRunId:
          type: string
          nullable: true
        type:
          type: string
        name:
          type: string
        value:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
        tags:
          type: object
          additionalProperties:
            type: string
          nullable: true
        deleted:
          type: boolean
    MiscController.BasicAuthCredentials:
      required:
      - password
      - uid
      - username
      type: object
      properties:
        uid:
          type: string
        username:
          type: string
        password:
          type: string
    MiscController.Configuration:
      type: object
      properties:
        uuid:
          type: string
        version:
          type: string
        isTaskRunEnabled:
          type: boolean
        isAnonymousUsageEnabled:
          type: boolean
        isTemplateEnabled:
          type: boolean
        environment:
          $ref: '#/components/schemas/MiscController.Environment'
        preview:
          $ref: '#/components/schemas/MiscController.Preview'
        isBasicAuthEnabled:
          type: boolean
    MiscController.ConfigurationEe:
      type: object
      allOf:
      - $ref: '#/components/schemas/MiscController.Configuration'
      - properties:
          tenants:
            $ref: '#/components/schemas/TenantConfiguration'
          secretsEnabled:
            type: boolean
    MiscController.Environment:
      required:
      - color
      - name
      type: object
      properties:
        name:
          type: string
        color:
          type: string
    MiscController.LicenseInfo:
      required:
      - expired
      - expiry
      - type
      type: object
      properties:
        type:
          type: string
        expiry:
          type: string
          format: date-time
        expired:
          type: boolean
    MiscController.Preview:
      required:
      - initial
      - max
      type: object
      properties:
        initial:
          type: integer
          format: int32
        max:
          type: integer
          format: int32
    Module:
      type: object
      properties:
        named:
          type: boolean
        name:
          type: string
        classLoader:
          $ref: '#/components/schemas/ClassLoader'
        descriptor:
          $ref: '#/components/schemas/ModuleDescriptor'
        layer:
          $ref: '#/components/schemas/ModuleLayer'
        nativeAccessEnabled:
          type: boolean
        packages:
          type: array
          items:
            type: string
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        declaredAnnotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
    ModuleDescriptor:
      type: object
      properties:
        open:
          type: boolean
        automatic:
          type: boolean
    ModuleLayer:
      type: object
      properties:
        servicesCatalog:
          $ref: '#/components/schemas/ServicesCatalog'
    Month:
      type: string
      enum:
      - JANUARY
      - FEBRUARY
      - MARCH
      - APRIL
      - MAY
      - JUNE
      - JULY
      - AUGUST
      - SEPTEMBER
      - OCTOBER
      - NOVEMBER
      - DECEMBER
    NamedPackage:
      type: object
    Namespace:
      required:
      - allowedNamespaces
      - deleted
      - description
      - id
      - pluginDefaults
      - variables
      - workerGroup
      type: object
      properties:
        taskDefaults:
          type: array
          deprecated: true
          items:
            $ref: '#/components/schemas/PluginDefault'
        allowedTriggers:
          type: array
          deprecated: true
          items:
            $ref: '#/components/schemas/Namespace.AllowedTrigger'
        id:
          pattern: "^[a-z0-9][a-z0-9._-]*"
          type: string
        description:
          type: string
        variables:
          type: object
          additionalProperties: true
        pluginDefaults:
          type: array
          items:
            $ref: '#/components/schemas/PluginDefault'
        allowedNamespaces:
          type: array
          items:
            $ref: '#/components/schemas/Namespace.AllowedNamespace'
        workerGroup:
          $ref: '#/components/schemas/WorkerGroup'
        deleted:
          type: boolean
    Namespace.AllowedNamespace:
      required:
      - namespace
      type: object
      properties:
        namespace:
          type: string
    Namespace.AllowedTrigger:
      required:
      - flowId
      - namespace
      type: object
      properties:
        namespace:
          type: string
        flowId:
          type: string
    NamespaceController.NamespaceWithDisabled:
      type: object
      allOf:
      - $ref: '#/components/schemas/Namespace'
      - required:
        - deleted
        - disabled
        properties:
          deleted:
            type: boolean
          disabled:
            type: boolean
    NamespaceUsage:
      type: object
      properties:
        count:
          type: integer
          format: int64
    Output:
      required:
      - id
      - type
      - value
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][.a-zA-Z0-9_-]*"
          type: string
        description:
          type: string
        value: {}
        type:
          $ref: '#/components/schemas/Type_2'
    Package:
      type: object
      allOf:
      - $ref: '#/components/schemas/NamedPackage'
      - properties:
          specificationTitle:
            type: string
          specificationVersion:
            type: string
          specificationVendor:
            type: string
          implementationTitle:
            type: string
          implementationVersion:
            type: string
          implementationVendor:
            type: string
          sealed:
            type: boolean
          annotations:
            type: array
            items:
              $ref: '#/components/schemas/Annotation'
          declaredAnnotations:
            type: array
            items:
              $ref: '#/components/schemas/Annotation'
    PagedResults_AbstractBindingController.BindingDetail_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_AbstractBindingController.BindingDetail_'
        total:
          type: integer
          format: int64
    PagedResults_ApiUser_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_ApiUser_'
        total:
          type: integer
          format: int64
    PagedResults_AuditLogController.AuditLogWithUser_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_AuditLogController.AuditLogWithUser_'
        total:
          type: integer
          format: int64
    PagedResults_BlueprintController.BlueprintItem_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_BlueprintController.BlueprintItem_'
        total:
          type: integer
          format: int64
    PagedResults_Blueprint_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_Blueprint_'
        total:
          type: integer
          format: int64
    PagedResults_ClusterController.ApiServiceInstance_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_ClusterController.ApiServiceInstance_'
        total:
          type: integer
          format: int64
    PagedResults_Execution_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_Execution_'
        total:
          type: integer
          format: int64
    PagedResults_Flow_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_Flow_'
        total:
          type: integer
          format: int64
    PagedResults_Group_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_Group_'
        total:
          type: integer
          format: int64
    PagedResults_LogEntry_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_LogEntry_'
        total:
          type: integer
          format: int64
    PagedResults_MetricEntry_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_MetricEntry_'
        total:
          type: integer
          format: int64
    PagedResults_NamespaceController.NamespaceWithDisabled_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_NamespaceController.NamespaceWithDisabled_'
        total:
          type: integer
          format: int64
    PagedResults_Role_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_Role_'
        total:
          type: integer
          format: int64
    PagedResults_SearchResult_Flow__:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_SearchResult_Flow__'
        total:
          type: integer
          format: int64
    PagedResults_TaskRun_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_TaskRun_'
        total:
          type: integer
          format: int64
    PagedResults_Template_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_Template_'
        total:
          type: integer
          format: int64
    PagedResults_Tenant_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_Tenant_'
        total:
          type: integer
          format: int64
    PagedResults_TriggerController.Triggers_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_TriggerController.Triggers_'
        total:
          type: integer
          format: int64
    PagedResults_Trigger_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: '#/components/schemas/ArrayListTotal_Trigger_'
        total:
          type: integer
          format: int64
    Parameter:
      required:
      - modifiers
      - name
      type: object
      properties:
        namePresent:
          type: boolean
        declaringExecutable:
          $ref: '#/components/schemas/Executable'
        modifiers:
          type: integer
          format: int32
        name:
          type: string
        realName:
          type: string
        parameterizedType:
          $ref: '#/components/schemas/Type'
        type:
          $ref: '#/components/schemas/Class_Object_'
        annotatedType:
          $ref: '#/components/schemas/AnnotatedType'
        implicit:
          type: boolean
        synthetic:
          type: boolean
        varArgs:
          type: boolean
        declaredAnnotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
    Permission:
      type: string
      enum:
      - FLOW
      - BLUEPRINT
      - TEMPLATE
      - NAMESPACE
      - EXECUTION
      - USER
      - GROUP
      - ROLE
      - BINDING
      - AUDITLOG
      - SECRET
      - IMPERSONATE
      - SETTING
      - INFRASTRUCTURE
      - TENANT
    PermissionCollection:
      type: object
      properties:
        readOnly:
          type: boolean
    Plugin:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
        longDescription:
          type: string
        group:
          type: string
        version:
          type: string
        manifest:
          type: object
          additionalProperties:
            type: string
        tasks:
          type: array
          items:
            type: string
        triggers:
          type: array
          items:
            type: string
        conditions:
          type: array
          items:
            type: string
        controllers:
          type: array
          items:
            type: string
        storages:
          type: array
          items:
            type: string
        secrets:
          type: array
          items:
            type: string
        taskRunners:
          type: array
          items:
            type: string
        guides:
          type: array
          items:
            type: string
        aliases:
          type: array
          items:
            type: string
        categories:
          type: array
          items:
            $ref: '#/components/schemas/PluginSubGroup.PluginCategory'
        subGroup:
          type: string
    PluginDefault:
      required:
      - forced
      - type
      - values
      type: object
      properties:
        type:
          type: string
        forced:
          type: boolean
        values:
          type: object
          additionalProperties: true
    PluginIcon:
      type: object
      properties:
        name:
          type: string
        icon:
          type: string
        flowable:
          type: boolean
    PluginSubGroup.PluginCategory:
      type: string
      enum:
      - DATABASE
      - MESSAGING
      - SCRIPT
      - TRANSFORMATION
      - BATCH
      - ALERTING
      - CLOUD
      - STORAGE
      - OTHER
      - TOOL
      - AI
      - CORE
      - INGESTION
      - BI
    PluginUsage:
      type: object
      properties:
        manifest:
          type: object
          additionalProperties:
            type: string
    Principal:
      type: object
      properties:
        name:
          type: string
    ProtectionDomain:
      required:
      - permissions
      type: object
      properties:
        codeSource:
          $ref: '#/components/schemas/CodeSource'
        classLoader:
          $ref: '#/components/schemas/ClassLoader'
        principals:
          type: array
          items:
            $ref: '#/components/schemas/Principal'
        permissions:
          $ref: '#/components/schemas/PermissionCollection'
    PublicKey:
      $ref: '#/components/schemas/Key'
    RecordComponent:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/Class_Object_'
        genericSignature:
          type: string
        genericType:
          $ref: '#/components/schemas/Type'
        annotatedType:
          $ref: '#/components/schemas/AnnotatedType'
        accessor:
          $ref: '#/components/schemas/Method'
        annotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        declaredAnnotations:
          type: array
          items:
            $ref: '#/components/schemas/Annotation'
        declaringRecord:
          $ref: '#/components/schemas/Class_Object_'
    Reifier:
      type: object
      properties:
        result:
          $ref: '#/components/schemas/Type'
    Relation:
      required:
      - relationType
      - value
      type: object
      properties:
        relationType:
          $ref: '#/components/schemas/RelationType'
        value:
          type: string
    RelationType:
      type: string
      enum:
      - SEQUENTIAL
      - CHOICE
      - ERROR
      - PARALLEL
      - DYNAMIC
    ReturnType:
      type: object
    Role:
      required:
      - deleted
      - description
      - id
      - isDefault
      - name
      - permissions
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        permissions:
          properties:
            FLOW:
              $ref: '#/components/schemas/List_Action_'
            BLUEPRINT:
              $ref: '#/components/schemas/List_Action_'
            TEMPLATE:
              $ref: '#/components/schemas/List_Action_'
            NAMESPACE:
              $ref: '#/components/schemas/List_Action_'
            EXECUTION:
              $ref: '#/components/schemas/List_Action_'
            USER:
              $ref: '#/components/schemas/List_Action_'
            GROUP:
              $ref: '#/components/schemas/List_Action_'
            ROLE:
              $ref: '#/components/schemas/List_Action_'
            BINDING:
              $ref: '#/components/schemas/List_Action_'
            AUDITLOG:
              $ref: '#/components/schemas/List_Action_'
            SECRET:
              $ref: '#/components/schemas/List_Action_'
            IMPERSONATE:
              $ref: '#/components/schemas/List_Action_'
            SETTING:
              $ref: '#/components/schemas/List_Action_'
            INFRASTRUCTURE:
              $ref: '#/components/schemas/List_Action_'
            TENANT:
              $ref: '#/components/schemas/List_Action_'
        isDefault:
          type: boolean
        deleted:
          type: boolean
    RoleUsage:
      type: object
      properties:
        count:
          type: integer
          format: int64
    Schema:
      type: object
      properties:
        properties:
          type: object
          additionalProperties: true
        outputs:
          type: object
          additionalProperties: true
        definitions:
          type: object
          additionalProperties: true
    SchemaType:
      type: string
      enum:
      - flow
      - template
      - task
      - trigger
      - plugindefault
    SearchResult_Flow_:
      required:
      - fragments
      - model
      type: object
      properties:
        model:
          $ref: '#/components/schemas/Flow'
        fragments:
          type: array
          items:
            type: string
    SequencedCollection_Action_:
      type: object
      allOf:
      - $ref: '#/components/schemas/Collection_Action_'
      - properties:
          first:
            $ref: '#/components/schemas/Action'
          last:
            $ref: '#/components/schemas/Action'
    SequencedCollection_Object_:
      type: object
      allOf:
      - $ref: '#/components/schemas/Collection_Object_'
      - properties:
          first: {}
          last: {}
    ServerConfig:
      required:
      - liveness
      - terminationGracePeriod
      type: object
      properties:
        workerTaskRestartStrategy:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/WorkerTaskRestartStrategy'
        terminationGracePeriod:
          $ref: '#/components/schemas/Duration'
        liveness:
          $ref: '#/components/schemas/ServerConfig.Liveness'
    ServerConfig.Liveness:
      required:
      - enabled
      - heartbeatInterval
      - initialDelay
      - interval
      - timeout
      type: object
      properties:
        enabled:
          type: boolean
          default: true
        interval:
          $ref: '#/components/schemas/Duration'
        timeout:
          $ref: '#/components/schemas/Duration'
        initialDelay:
          $ref: '#/components/schemas/Duration'
        heartbeatInterval:
          $ref: '#/components/schemas/Duration'
    ServerInstance:
      required:
      - hostname
      - id
      - metrics
      - props
      - type
      - version
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/ServerInstance.Type'
        version:
          type: string
        hostname:
          type: string
        props:
          type: object
          additionalProperties: true
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/Metric'
    ServerInstance.Type:
      type: string
      enum:
      - SERVER
      - STANDALONE
    ServerType:
      type: string
      enum:
      - EXECUTOR
      - INDEXER
      - SCHEDULER
      - STANDALONE
      - WEBSERVER
      - WORKER
    Service.ServiceState:
      type: string
      enum:
      - CREATED
      - RUNNING
      - ERROR
      - DISCONNECTED
      - TERMINATING
      - TERMINATED_GRACEFULLY
      - TERMINATED_FORCED
      - NOT_RUNNING
      - EMPTY
    Service.ServiceType:
      type: string
      enum:
      - EXECUTOR
      - INDEXER
      - SCHEDULER
      - WEBSERVER
      - WORKER
    ServiceInstance:
      required:
      - config
      - createdAt
      - events
      - id
      - metrics
      - props
      - seqId
      - server
      - state
      - type
      - updatedAt
      type: object
      properties:
        server:
          $ref: '#/components/schemas/ServerInstance'
        metrics:
          type: array
          items:
            $ref: '#/components/schemas/Metric'
        state:
          $ref: '#/components/schemas/Service.ServiceState'
        id:
          type: string
        type:
          $ref: '#/components/schemas/Service.ServiceType'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        events:
          type: array
          items:
            $ref: '#/components/schemas/ServiceInstance.TimestampedEvent'
        config:
          $ref: '#/components/schemas/ServerConfig'
        props:
          type: object
          additionalProperties: true
        seqId:
          type: integer
          format: int64
    ServiceInstance.TimestampedEvent:
      required:
      - state
      - ts
      - type
      - value
      type: object
      properties:
        ts:
          type: string
          format: date-time
        value:
          type: string
        type:
          type: string
        state:
          $ref: '#/components/schemas/Service.ServiceState'
    ServiceUsage:
      required:
      - dailyStatistics
      type: object
      properties:
        dailyStatistics:
          type: array
          items:
            $ref: '#/components/schemas/ServiceUsage.DailyServiceStatistics'
    ServiceUsage.DailyServiceStatistics:
      required:
      - type
      - values
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            $ref: '#/components/schemas/ServiceUsage.DailyStatistics'
    ServiceUsage.DailyStatistics:
      required:
      - avg
      - date
      - max
      - min
      type: object
      properties:
        date:
          type: string
          format: date
        min:
          type: integer
          format: int64
        max:
          type: integer
          format: int64
        avg:
          type: integer
          format: int64
    ServicesCatalog:
      type: object
    SetupConfiguration:
      required:
      - done
      - passwordRegexp
      type: object
      properties:
        done:
          type: boolean
        multiTenancyEnabled:
          type: boolean
        defaultTenantEnabled:
          type: boolean
        repositoryType:
          type: string
        queueType:
          type: string
        storageType:
          type: string
        secretType:
          type: string
        passwordRegexp:
          type: string
    SetupConfiguration.SetupData:
      required:
      - password
      - tenant
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        tenant:
          $ref: '#/components/schemas/Tenant'
    State:
      required:
      - current
      type: object
      properties:
        duration:
          $ref: '#/components/schemas/Duration'
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
          nullable: true
        current:
          $ref: '#/components/schemas/State.Type'
        histories:
          type: array
          items:
            $ref: '#/components/schemas/State.History'
    State.History:
      required:
      - date
      - state
      type: object
      properties:
        state:
          $ref: '#/components/schemas/State.Type'
        date:
          type: string
          format: date-time
    State.Type:
      type: string
      enum:
      - CREATED
      - RUNNING
      - PAUSED
      - RESTARTED
      - KILLING
      - SUCCESS
      - WARNING
      - FAILED
      - KILLED
      - CANCELLED
      - QUEUED
      - RETRYING
      - RETRIED
    StatsController.ByFlowStatisticRequest:
      type: object
      properties:
        q:
          type: string
          nullable: true
        namespace:
          type: string
          nullable: true
        flowId:
          type: string
          nullable: true
        flows:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ExecutionRepositoryInterface.FlowFilter'
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        namespaceOnly:
          type: boolean
          nullable: true
    StatsController.LastExecutionsRequest:
      type: object
      properties:
        flows:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/ExecutionRepositoryInterface.FlowFilter'
    StatsController.LogStatisticRequest:
      type: object
      properties:
        q:
          type: string
          nullable: true
        namespace:
          type: string
          nullable: true
        flowId:
          type: string
          nullable: true
        logLevel:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Level'
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
    StatsController.StatisticRequest:
      type: object
      properties:
        q:
          type: string
          nullable: true
        namespace:
          type: string
          nullable: true
        flowId:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
    Task:
      required:
      - id
      - type
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
        description:
          type: string
        retry:
          $ref: '#/components/schemas/AbstractRetry'
        timeout:
          $ref: '#/components/schemas/Duration'
        disabled:
          type: boolean
        workerGroup:
          $ref: '#/components/schemas/WorkerGroup'
        logLevel:
          $ref: '#/components/schemas/Level'
        allowFailure:
          type: boolean
    TaskForExecution:
      required:
      - id
      - type
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
        tasks:
          type: array
          items:
            $ref: '#/components/schemas/TaskForExecution'
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/Input_Object_'
    TaskRun:
      required:
      - attempts
      - executionId
      - flowId
      - id
      - iteration
      - namespace
      - outputs
      - parentTaskRunId
      - state
      - taskId
      - value
      type: object
      properties:
        items:
          type: string
          deprecated: true
        id:
          type: string
        executionId:
          type: string
        namespace:
          type: string
        flowId:
          type: string
        taskId:
          type: string
        parentTaskRunId:
          type: string
        value:
          type: string
        attempts:
          type: array
          items:
            $ref: '#/components/schemas/TaskRunAttempt'
        outputs:
          type: object
          additionalProperties: true
        state:
          $ref: '#/components/schemas/State'
        iteration:
          type: integer
          format: int32
    TaskRunAttempt:
      required:
      - state
      type: object
      properties:
        metrics:
          type: array
          deprecated: true
          items:
            $ref: '#/components/schemas/AbstractMetricEntry_Object_'
        state:
          $ref: '#/components/schemas/State'
    Template:
      required:
      - deleted
      - description
      - errors
      - id
      - namespace
      - tasks
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9._-]*"
          type: string
        namespace:
          pattern: "^[a-z0-9][a-z0-9._-]*"
          type: string
        description:
          type: string
        tasks:
          minItems: 1
          type: array
          items:
            $ref: '#/components/schemas/Task'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        deleted:
          type: boolean
    TemporalUnit:
      type: object
      properties:
        duration:
          $ref: '#/components/schemas/Duration'
        durationEstimated:
          type: boolean
        dateBased:
          type: boolean
        timeBased:
          type: boolean
    Tenant:
      required:
      - deleted
      - id
      - name
      - workerGroup
      type: object
      properties:
        id:
          pattern: "^[a-z0-9][a-z0-9_-]*"
          type: string
        name:
          type: string
        deleted:
          type: boolean
        workerGroup:
          $ref: '#/components/schemas/WorkerGroup'
    TenantConfiguration:
      type: object
      properties:
        enabled:
          type: boolean
        defaultTenant:
          type: boolean
    TenantUsage:
      type: object
      properties:
        count:
          type: integer
          format: int64
    Timestamp:
      required:
      - signerCertPath
      - timestamp
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        signerCertPath:
          $ref: '#/components/schemas/CertPath'
    Trigger:
      type: object
      allOf:
      - $ref: '#/components/schemas/TriggerContext'
      - properties:
          executionId:
            type: string
            nullable: true
          executionCurrentState:
            nullable: true
            allOf:
            - $ref: '#/components/schemas/State.Type'
          updatedDate:
            type: string
            format: date-time
            nullable: true
          evaluateRunningDate:
            type: string
            format: date-time
            nullable: true
    TriggerContext:
      required:
      - date
      - flowId
      - namespace
      - triggerId
      type: object
      properties:
        disabled:
          type: boolean
        tenantId:
          pattern: "^[a-z0-9][a-z0-9_-]"
          type: string
        namespace:
          type: string
        flowId:
          type: string
        triggerId:
          type: string
        date:
          type: string
          format: date-time
        nextExecutionDate:
          type: string
          format: date-time
          nullable: true
        backfill:
          nullable: true
          allOf:
          - $ref: '#/components/schemas/Backfill'
        stopAfter:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/State.Type'
    TriggerController.Triggers:
      required:
      - abstractTrigger
      - triggerContext
      type: object
      properties:
        abstractTrigger:
          $ref: '#/components/schemas/AbstractTrigger'
        triggerContext:
          $ref: '#/components/schemas/Trigger'
    Type:
      type: object
      properties:
        typeName:
          type: string
    TypeSignature:
      type: object
    TypeVariable_Class_Object__:
      type: object
      allOf:
      - $ref: '#/components/schemas/Type'
      - $ref: '#/components/schemas/AnnotatedElement'
      - properties:
          bounds:
            type: array
            items:
              $ref: '#/components/schemas/Type'
          genericDeclaration:
            $ref: '#/components/schemas/Class_Object_'
          name:
            type: string
          annotatedBounds:
            type: array
            items:
              $ref: '#/components/schemas/AnnotatedType'
    TypeVariable_Class_String__:
      type: object
      allOf:
      - $ref: '#/components/schemas/Type'
      - $ref: '#/components/schemas/AnnotatedElement'
      - properties:
          bounds:
            type: array
            items:
              $ref: '#/components/schemas/Type'
          genericDeclaration:
            $ref: '#/components/schemas/Class_String_'
          name:
            type: string
          annotatedBounds:
            type: array
            items:
              $ref: '#/components/schemas/AnnotatedType'
    TypeVariable_Constructor_Object__:
      type: object
      allOf:
      - $ref: '#/components/schemas/Type'
      - $ref: '#/components/schemas/AnnotatedElement'
      - properties:
          bounds:
            type: array
            items:
              $ref: '#/components/schemas/Type'
          genericDeclaration:
            $ref: '#/components/schemas/Constructor_Object_'
          name:
            type: string
          annotatedBounds:
            type: array
            items:
              $ref: '#/components/schemas/AnnotatedType'
    TypeVariable_GenericDeclaration_:
      type: object
      allOf:
      - $ref: '#/components/schemas/Type'
      - $ref: '#/components/schemas/AnnotatedElement'
      - properties:
          bounds:
            type: array
            items:
              $ref: '#/components/schemas/Type'
          genericDeclaration: {}
          name:
            type: string
          annotatedBounds:
            type: array
            items:
              $ref: '#/components/schemas/AnnotatedType'
    TypeVariable_Method_:
      type: object
      allOf:
      - $ref: '#/components/schemas/Type'
      - $ref: '#/components/schemas/AnnotatedElement'
      - properties:
          bounds:
            type: array
            items:
              $ref: '#/components/schemas/Type'
          genericDeclaration:
            $ref: '#/components/schemas/Method'
          name:
            type: string
          annotatedBounds:
            type: array
            items:
              $ref: '#/components/schemas/AnnotatedType'
    Type_1:
      type: string
      enum:
      - STRING
      - ENUM
      - INT
      - FLOAT
      - BOOLEAN
      - DATETIME
      - DATE
      - TIME
      - DURATION
      - FILE
      - JSON
      - URI
      - SECRET
      - ARRAY
    Type_2:
      type: string
      enum:
      - STRING
      - ENUM
      - INT
      - FLOAT
      - BOOLEAN
      - DATETIME
      - DATE
      - TIME
      - DURATION
      - FILE
      - JSON
      - URI
      - SECRET
      - ARRAY
    Type_3:
      type: string
      enum:
      - STRING
      - ENUM
      - INT
      - FLOAT
      - BOOLEAN
      - DATETIME
      - DATE
      - TIME
      - DURATION
      - FILE
      - JSON
      - URI
      - SECRET
      - ARRAY
    Type_4:
      type: string
      enum:
      - STRING
      - ENUM
      - INT
      - FLOAT
      - BOOLEAN
      - DATETIME
      - DATE
      - TIME
      - DURATION
      - FILE
      - JSON
      - URI
      - SECRET
      - ARRAY
    Type_5:
      type: string
      enum:
      - STRING
      - ENUM
      - INT
      - FLOAT
      - BOOLEAN
      - DATETIME
      - DATE
      - TIME
      - DURATION
      - FILE
      - JSON
      - URI
      - SECRET
      - ARRAY
    Type_6:
      type: string
      enum:
      - STRING
      - ENUM
      - INT
      - FLOAT
      - BOOLEAN
      - DATETIME
      - DATE
      - TIME
      - DURATION
      - FILE
      - JSON
      - URI
      - SECRET
      - ARRAY
    Usage:
      required:
      - configurations
      - environments
      - executions
      - flows
      - host
      - instanceUuid
      - plugins
      - serverType
      - startTime
      - startUuid
      - uri
      - uuid
      - version
      - zoneId
      type: object
      properties:
        uuid:
          type: string
        startUuid:
          type: string
        instanceUuid:
          type: string
        serverType:
          $ref: '#/components/schemas/ServerType'
        version:
          type: string
        zoneId:
          $ref: '#/components/schemas/ZoneId'
        uri:
          type: string
          nullable: true
        environments:
          type: array
          nullable: true
          items:
            type: string
        startTime:
          type: string
          format: date-time
        host:
          $ref: '#/components/schemas/HostUsage'
        configurations:
          $ref: '#/components/schemas/ConfigurationUsage'
        plugins:
          type: array
          items:
            $ref: '#/components/schemas/PluginUsage'
        flows:
          $ref: '#/components/schemas/FlowUsage'
        executions:
          $ref: '#/components/schemas/ExecutionUsage'
    Usage_1:
      type: object
      allOf:
      - $ref: '#/components/schemas/Usage'
      - properties:
          groups:
            $ref: '#/components/schemas/GroupUsage'
          users:
            type: array
            items:
              $ref: '#/components/schemas/UserUsage'
          roles:
            $ref: '#/components/schemas/RoleUsage'
          namespaces:
            $ref: '#/components/schemas/NamespaceUsage'
          tenants:
            $ref: '#/components/schemas/TenantUsage'
          services:
            $ref: '#/components/schemas/ServiceUsage'
    Usage_2:
      type: object
      allOf:
      - $ref: '#/components/schemas/Usage'
      - properties:
          groups:
            $ref: '#/components/schemas/GroupUsage'
          users:
            type: array
            items:
              $ref: '#/components/schemas/UserUsage'
          roles:
            $ref: '#/components/schemas/RoleUsage'
          namespaces:
            $ref: '#/components/schemas/NamespaceUsage'
          tenants:
            $ref: '#/components/schemas/TenantUsage'
          services:
            $ref: '#/components/schemas/ServiceUsage'
    Usage_3:
      type: object
      allOf:
      - $ref: '#/components/schemas/Usage'
      - properties:
          groups:
            $ref: '#/components/schemas/GroupUsage'
          users:
            type: array
            items:
              $ref: '#/components/schemas/UserUsage'
          roles:
            $ref: '#/components/schemas/RoleUsage'
          namespaces:
            $ref: '#/components/schemas/NamespaceUsage'
          tenants:
            $ref: '#/components/schemas/TenantUsage'
          services:
            $ref: '#/components/schemas/ServiceUsage'
    Usage_4:
      type: object
      allOf:
      - $ref: '#/components/schemas/Usage'
      - properties:
          groups:
            $ref: '#/components/schemas/GroupUsage'
          users:
            type: array
            items:
              $ref: '#/components/schemas/UserUsage'
          roles:
            $ref: '#/components/schemas/RoleUsage'
          namespaces:
            $ref: '#/components/schemas/NamespaceUsage'
          tenants:
            $ref: '#/components/schemas/TenantUsage'
          services:
            $ref: '#/components/schemas/ServiceUsage'
    UserController.UpdatePasswordRequest:
      required:
      - newPassword
      - oldPassword
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    UserType:
      type: string
      enum:
      - STANDARD
      - SERVICE_ACCOUNT
      - SUPER_ADMIN
    UserUsage:
      required:
      - globalRolesCount
      - groupsCount
      - namespaceRolesCount
      - namespacesCount
      - username
      type: object
      properties:
        username:
          type: string
        domain:
          type: string
        auths:
          type: array
          items:
            type: string
        groupsCount:
          type: integer
          format: int32
        globalRolesCount:
          type: integer
          format: int64
        namespaceRolesCount:
          type: integer
          format: int64
        namespacesCount:
          type: integer
          format: int64
    ValidateConstraintViolation:
      required:
      - constraints
      - deprecationPaths
      - flow
      - index
      - namespace
      - outdated
      - warnings
      type: object
      properties:
        flow:
          type: string
        namespace:
          type: string
        index:
          type: integer
          format: int32
        constraints:
          type: string
        outdated:
          type: boolean
        deprecationPaths:
          type: array
          items:
            type: string
        warnings:
          type: array
          items:
            type: string
    ValidateUnwrappedValue:
      type: string
      enum:
      - DEFAULT
      - UNWRAP
      - SKIP
    WorkerGroup:
      type: object
      properties:
        key:
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
    WorkerTaskRestartStrategy:
      type: string
      enum:
      - NEVER
      - IMMEDIATELY
      - AFTER_TERMINATION_GRACE_PERIOD
    ZoneId:
      type: object
      properties:
        id:
          type: string
        rules:
          $ref: '#/components/schemas/ZoneRules'
    ZoneOffset:
      type: object
      allOf:
      - $ref: '#/components/schemas/ZoneId'
      - properties:
          totalSeconds:
            type: integer
            format: int32
          id:
            type: string
          rules:
            $ref: '#/components/schemas/ZoneRules'
    ZoneOffsetTransition:
      type: object
      properties:
        instant:
          type: string
          format: date-time
        dateTimeBefore:
          type: string
          format: date-time
        dateTimeAfter:
          type: string
          format: date-time
        offsetBefore:
          $ref: '#/components/schemas/ZoneOffset'
        offsetAfter:
          $ref: '#/components/schemas/ZoneOffset'
        duration:
          $ref: '#/components/schemas/Duration'
        gap:
          type: boolean
        overlap:
          type: boolean
        validOffsets:
          type: array
          items:
            $ref: '#/components/schemas/ZoneOffset'
    ZoneOffsetTransitionRule:
      required:
      - dayOfMonthIndicator
      - dayOfWeek
      - month
      - offsetAfter
      - offsetBefore
      - standardOffset
      - timeDefinition
      type: object
      properties:
        month:
          $ref: '#/components/schemas/Month'
        dayOfMonthIndicator:
          type: integer
          format: int32
        dayOfWeek:
          $ref: '#/components/schemas/DayOfWeek'
        localTime:
          type: string
          format: partial-time
        midnightEndOfDay:
          type: boolean
        timeDefinition:
          $ref: '#/components/schemas/ZoneOffsetTransitionRule.TimeDefinition'
        standardOffset:
          $ref: '#/components/schemas/ZoneOffset'
        offsetBefore:
          $ref: '#/components/schemas/ZoneOffset'
        offsetAfter:
          $ref: '#/components/schemas/ZoneOffset'
    ZoneOffsetTransitionRule.TimeDefinition:
      type: string
      enum:
      - UTC
      - WALL
      - STANDARD
    ZoneRules:
      type: object
      properties:
        fixedOffset:
          type: boolean
        transitions:
          type: array
          items:
            $ref: '#/components/schemas/ZoneOffsetTransition'
        transitionRules:
          type: array
          items:
            $ref: '#/components/schemas/ZoneOffsetTransitionRule'
