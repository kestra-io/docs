openapi: 3.0.1
info:
  title: Kestra EE
  description: |-
    All API operations, except for Superadmin-only endpoints, require a tenant identifier in the HTTP path.<br/>
    Endpoints designated as Superadmin-only are not tenant-scoped.
  version: v1
tags:
- name: Flows
  description: Flows api
- name: Templates
  description: Templates api
- name: Executions
  description: Executions api
- name: Logs
  description: Logs api
- name: Namespaces
  description: Namespaces api
- name: Users
  description: Users api
- name: Groups
  description: Groups api
- name: Bindings
  description: Bindings api
- name: Roles
  description: Roles api
- name: Audit Logs
  description: Audit Logs api
- name: Auths
  description: Auth api
- name: Stats
  description: Stats api
- name: Tenants
  description: Tenants api
- name: Misc
  description: Misc api
paths:
  /api/v1/auths:
    get:
      tags:
      - Auths
      summary: Retrieve list of authentication methods
      operationId: index
      responses:
        "200":
          description: index 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthController.Auth"
  /api/v1/banners:
    post:
      tags:
      - Banners
      summary: Create an announcement banner
      description: Superadmin-only. Creates a global announcement banner visible to
        all tenants.
      operationId: createBanner
      requestBody:
        description: The announcement banner to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Banner"
        required: true
      responses:
        "200":
          description: createBanner 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Banner"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/banners/search:
    get:
      tags:
      - Banners
      summary: Retrieve all announcement banners
      description: Superadmin-only. Returns all global announcement banners.
      operationId: searchBanners
      responses:
        "200":
          description: searchBanners 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Banner"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/banners/{id}:
    put:
      tags:
      - Banners
      summary: Update an announcement banner
      description: Superadmin-only. Updates a global announcement banner by its ID.
      operationId: updateBanner
      parameters:
      - name: id
        in: path
        description: The banner id
        required: true
        schema:
          type: string
      requestBody:
        description: The banner to update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Banner"
        required: true
      responses:
        "200":
          description: updateBanner 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Banner"
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Banners
      summary: Delete an announcement banner
      description: Superadmin-only. Deletes a global announcement banner by its ID.
      operationId: deleteBanner
      parameters:
      - name: id
        in: path
        description: The banner id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteBanner 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/basicAuthValidationErrors:
    get:
      tags:
      - Misc
      summary: Retrieve the instance configuration.
      description: Global endpoint available to all users.
      operationId: getBasicAuthConfigErrors
      responses:
        "200":
          description: getBasicAuthConfigErrors 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/configs:
    get:
      tags:
      - Misc
      summary: Retrieve the instance configuration.
      description: Global endpoint available to all users.
      operationId: getConfiguration
      responses:
        "200":
          description: getConfiguration 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MiscController.EEConfiguration"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/forgotten-password:
    get:
      summary: Sends an email to reset a password.
      description: "Sends an email to reset a password. Note that whatever the username\
        \ is found or not, the response will always be 200 to avoid leaking information."
      operationId: forgottenPassword
      parameters:
      - name: username
        in: query
        description: User that has forgotten his password
        required: true
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: forgottenPassword 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/instance/maintenance/enter:
    post:
      tags:
      - Cluster
      - Maintenance
      summary: Enter cluster maintenance mode
      description: Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
      operationId: enterMaintenance
      responses:
        "200":
          description: enterMaintenance 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/instance/maintenance/exit:
    post:
      tags:
      - Cluster
      - Maintenance
      summary: Exit cluster maintenance mode
      description: Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
      operationId: exitMaintenance
      responses:
        "200":
          description: exitMaintenance 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/instance/services/active:
    get:
      tags:
      - Services
      summary: List all active services
      description: Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
      operationId: getActiveServices
      responses:
        "200":
          description: getActiveServices 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceController.ApiActiveServiceList"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/instance/services/search:
    get:
      tags:
      - Services
      summary: "Search for a service (e.g. Worker, Executor, etc)"
      description: Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
      operationId: searchServices
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: state
        in: query
        description: The state filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Service.ServiceState"
      - name: type
        in: query
        description: The server type filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/ServiceType"
      responses:
        "200":
          description: searchServices 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_InstanceController.ApiServiceInstance_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/instance/services/{id}:
    get:
      tags:
      - Services
      summary: Retrieve details of a specific service
      description: Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
      operationId: getService
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getService 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceInstance"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/instance/versioned-plugins:
    get:
      tags:
      - Plugins
      summary: List installed plugin artifacts
      description: Superadmin-only. Lists all currently installed plugin artifacts.
        Requires INFRASTRUCTURE permission.
      operationId: listVersionedPlugin
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: The query
        explode: false
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: listVersionedPlugin 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_InstanceController.ApiPluginArtifact_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/instance/versioned-plugins/available:
    get:
      tags:
      - Plugins
      summary: List available plugin artifacts
      description: Superadmin-only. Lists all plugin artifacts available for installation.
        Requires INFRASTRUCTURE permission.
      operationId: listAvailableVersionedPlugins
      responses:
        "200":
          description: listAvailableVersionedPlugins 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/instance/versioned-plugins/install:
    post:
      tags:
      - Plugins
      summary: Install specified plugin artifacts
      description: Superadmin-only. Installs one or more plugin artifacts. Requires
        INFRASTRUCTURE permission.
      operationId: installVersionedPlugins
      requestBody:
        description: List of plugins
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstanceController.ApiPluginListRequest"
        required: true
      responses:
        "200":
          description: installVersionedPlugins 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceController.ApiPluginArtifactList_PluginArtifact_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/instance/versioned-plugins/resolve:
    post:
      tags:
      - Plugins
      summary: Resolve versions for specified plugin artifacts
      description: Superadmin-only. Resolves compatible versions for a list of plugin
        artifacts. Requires INFRASTRUCTURE permission.
      operationId: resolveVersionedPlugins
      requestBody:
        description: List of plugins
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstanceController.ApiPluginListRequest"
        required: true
      responses:
        "200":
          description: resolveVersionedPlugins 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceController.ApiPluginArtifactList_PluginResolutionResult_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/instance/versioned-plugins/uninstall:
    delete:
      tags:
      - Plugins
      summary: Uninstall plugin artifacts
      description: Superadmin-only. Uninstalls one or more plugin artifacts. Requires
        INFRASTRUCTURE permission.
      operationId: uninstallVersionedPlugins
      requestBody:
        description: List of plugins
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstanceController.ApiPluginListRequest"
        required: true
      responses:
        "200":
          description: uninstallVersionedPlugins 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceController.ApiPluginArtifactList_PluginArtifact_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/instance/versioned-plugins/upload:
    post:
      tags:
      - Plugins
      summary: Upload a plugin artifact JAR file
      description: Superadmin-only. Uploads a plugin JAR file for installation. Requires
        INFRASTRUCTURE permission.
      operationId: uploadVersionedPlugins
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
              - file
              type: object
              properties:
                file:
                  type: string
                  format: binary
                forceInstallOnExistingVersions:
                  type: boolean
                  nullable: true
            encoding:
              file:
                contentType: application/octet-stream
                explode: false
        required: true
      responses:
        "200":
          description: uploadVersionedPlugins 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PluginArtifact"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/instance/versioned-plugins/{groupId}/{artifactId}:
    get:
      tags:
      - Plugins
      summary: Retrieve details of a plugin artifact
      description: Superadmin-only. Retrieves metadata and available versions for
        a given plugin artifact. Requires INFRASTRUCTURE permission.
      operationId: getVersionedPluginDetails
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
      - name: artifactId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getVersionedPluginDetails 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceController.ApiPluginVersions"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/instance/versioned-plugins/{groupId}/{artifactId}/{version}:
    get:
      tags:
      - Plugins
      summary: Retrieve details of a specific plugin artifact version
      description: Superadmin-only. Retrieves metadata for a specific version of a
        plugin artifact. Requires INFRASTRUCTURE permission.
      operationId: getVersionedPluginDetailsFromVersion
      parameters:
      - name: groupId
        in: path
        required: true
        schema:
          type: string
      - name: artifactId
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getVersionedPluginDetailsFromVersion 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceController.ApiPluginVersionDetails"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/instance/workergroups:
    get:
      tags:
      - WorkerGroups
      summary: List all worker groups
      description: Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
      operationId: listWorkerGroups
      responses:
        "200":
          description: listWorkerGroups 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceController.ApiWorkerGroupList"
      security:
      - bearerAuth: []
      - basicAuth: []
    post:
      tags:
      - WorkerGroups
      summary: Create a worker group
      description: Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
      operationId: createWorkerGroup
      requestBody:
        description: The worker group definition
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstanceController.ApiCreateOrUpdateWorkerGroupRequest"
        required: true
      responses:
        "200":
          description: createWorkerGroup 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceController.ApiWorkerGroup"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/instance/workergroups/{id}:
    get:
      tags:
      - WorkerGroups
      summary: Retrieve details of a specific worker group
      description: Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
      operationId: getWorkerGroupById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getWorkerGroupById 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceController.ApiWorkerGroupDetails"
      security:
      - bearerAuth: []
      - basicAuth: []
    put:
      tags:
      - WorkerGroups
      summary: Update a worker group
      description: Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
      operationId: updateWorkerGroupById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The worker group definition
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InstanceController.ApiCreateOrUpdateWorkerGroupRequest"
        required: true
      responses:
        "200":
          description: updateWorkerGroupById 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceController.ApiWorkerGroup"
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - WorkerGroups
      summary: Delete a worker group
      description: Requires a role with the INFRASTRUCTURE permission (Superadmin-only).
      operationId: deleteWorkerGroupById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteWorkerGroupById 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/invitation/accept/{invitationId}:
    post:
      operationId: acceptInvitation
      parameters:
      - name: invitationId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: acceptInvitation 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/invitation/create/{invitationId}:
    post:
      operationId: createFromInvitation
      parameters:
      - name: invitationId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The basic information to create an account from an invitation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthController.InvitationUserRequest"
        required: true
      responses:
        "200":
          description: createFromInvitation 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/license-info:
    get:
      tags:
      - Misc
      summary: Retrieve license information
      description: "Global endpoint, available to any authenticated user."
      operationId: licenseInfo
      responses:
        "200":
          description: licenseInfo 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MiscController.LicenseInfo"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/me:
    get:
      tags:
      - Auths
      summary: Get details about the authenticated user
      description: Requires the ME permission.
      operationId: getCurrentUser
      responses:
        "200":
          description: getCurrentUser 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MeController.ApiMe"
      security:
      - bearerAuth: []
      - basicAuth: []
    patch:
      tags:
      - Auths
      summary: Update authenticated user details
      description: Updates the authenticated user's profile information and returns
        the updated user.
      operationId: patchCurrentUser
      requestBody:
        description: The user details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MeController.ApiUserDetailsRequest"
        required: true
      responses:
        "200":
          description: patchCurrentUser 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/me/api-tokens:
    get:
      tags:
      - Auths
      summary: List API tokens for authenticated user
      description: Returns all API tokens belonging to the authenticated user.
      operationId: listApiTokensForCurrentUser
      responses:
        "200":
          description: listApiTokensForCurrentUser 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
    post:
      tags:
      - Auths
      summary: Create API token for the authenticated user
      operationId: createApiTokenForCurrentUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiTokenRequest"
        required: true
      responses:
        "200":
          description: createApiTokenForCurrentUser 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/me/api-tokens/{tokenId}:
    delete:
      tags:
      - Auths
      summary: Delete API token for the authenticated user
      operationId: deleteApiTokenForCurrentUser
      parameters:
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiTokenForCurrentUser 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/me/invitations:
    get:
      tags:
      - Invitations
      summary: List invitations for the authenticated user
      description: Returns all invitations for the authenticated user's email across
        all tenants.
      operationId: findAllInvitationsForCurrentUser
      responses:
        "200":
          description: findAllInvitationsForCurrentUser 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Invitation"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/me/password:
    put:
      tags:
      - Users
      summary: Update authenticated user password
      description: Changes the login password for the authenticated user.
      operationId: updateCurrentUserPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MeController.ApiUpdatePasswordRequest"
        required: true
      responses:
        "200":
          description: updateCurrentUserPassword 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/plugins:
    get:
      tags:
      - Plugins
      summary: Get list of plugins
      operationId: listPlugins
      responses:
        "200":
          description: listPlugins 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plugin"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/plugins/groups/subgroups:
    get:
      tags:
      - Plugins
      summary: Get plugins group by subgroups
      operationId: getPluginBySubgroups
      responses:
        "200":
          description: getPluginBySubgroups 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plugin"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/plugins/icons:
    get:
      tags:
      - Plugins
      summary: Get plugins icons
      operationId: getPluginIcons
      responses:
        "200":
          description: getPluginIcons 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/PluginIcon"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/plugins/icons/groups:
    get:
      tags:
      - Plugins
      summary: Get plugins icons
      operationId: getPluginGroupIcons
      responses:
        "200":
          description: getPluginGroupIcons 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/PluginIcon"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/plugins/inputs:
    get:
      tags:
      - Plugins
      summary: Get all types for an inputs
      operationId: getAllInputTypes
      responses:
        "200":
          description: getAllInputTypes 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InputType"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/plugins/inputs/{type}:
    get:
      tags:
      - Plugins
      summary: Get the JSON schema for an input type
      description: "The schema will be a [JSON Schema Draft 7](http://json-schema.org/draft-07/schema)"
      operationId: getSchemaFromInputType
      parameters:
      - name: type
        in: path
        description: The schema needed
        required: true
        schema:
          $ref: "#/components/schemas/Type"
      responses:
        "200":
          description: getSchemaFromInputType 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationWithSchema"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/plugins/properties/{type}:
    get:
      tags:
      - Plugins
      summary: Get the properties part of the JSON schema for a type
      description: "The schema will be a [JSON Schema Draft 7](http://json-schema.org/draft-07/schema)"
      operationId: getPropertiesFromType
      parameters:
      - name: type
        in: path
        description: The schema needed
        required: true
        schema:
          $ref: "#/components/schemas/SchemaType"
      responses:
        "200":
          description: getPropertiesFromType 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/plugins/schemas/{type}:
    get:
      tags:
      - Plugins
      summary: Get the JSON schema for a type
      description: "The schema will be a [JSON Schema Draft 7](http://json-schema.org/draft-07/schema)"
      operationId: getSchemasFromType
      parameters:
      - name: type
        in: path
        description: The schema needed
        required: true
        schema:
          $ref: "#/components/schemas/SchemaType"
      - name: arrayOf
        in: query
        description: If schema should be an array of requested type
        required: true
        explode: false
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: getSchemasFromType 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/plugins/{cls}:
    get:
      tags:
      - Plugins
      summary: Get plugin documentation
      operationId: getPluginDocumentation
      parameters:
      - name: cls
        in: path
        description: The plugin full class name
        required: true
        schema:
          type: string
      - name: all
        in: query
        description: Include all the properties
        required: true
        explode: false
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: getPluginDocumentation 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationWithSchema"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/plugins/{cls}/versions:
    get:
      tags:
      - Plugins
      summary: Get all versions for a plugin
      operationId: getPluginVersions
      parameters:
      - name: cls
        in: path
        description: The plugin type
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getPluginVersions 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PluginController.ApiPluginVersions"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/plugins/{cls}/versions/{version}:
    get:
      tags:
      - Plugins
      summary: Get plugin documentation
      operationId: getPluginDocumentationFromVersion
      parameters:
      - name: cls
        in: path
        description: The plugin type
        required: true
        schema:
          type: string
      - name: version
        in: path
        description: The plugin version
        required: true
        schema:
          type: string
      - name: all
        in: query
        description: Include all the properties
        required: true
        explode: false
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: getPluginDocumentationFromVersion 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationWithSchema"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/reset-password:
    post:
      summary: Change a password for given token.
      description: "Change a password for given token. If password does not match\
        \ password policy, use can still retry."
      operationId: resetPassword
      requestBody:
        description: The password
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthController.ResetPasswordRequest"
        required: true
      responses:
        "200":
          description: resetPassword 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/setup:
    get:
      tags:
      - Misc
      summary: Retrieve current setup configuration
      operationId: setupConfiguration
      responses:
        "200":
          description: setupConfiguration 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetupConfiguration"
      security:
      - bearerAuth: []
      - basicAuth: []
    post:
      tags:
      - Misc
      summary: Create the first Superadmin user
      description: Only used during initial instance setup.
      operationId: setupKestra
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetupConfiguration.SetupData"
        required: true
      responses:
        "200":
          description: setupKestra 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/tenants:
    post:
      tags:
      - Tenants
      summary: Create a tenant
      description: Superadmin-only.
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tenant"
        required: true
      responses:
        "200":
          description: create 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
  /api/v1/tenants/search:
    get:
      tags:
      - Tenants
      summary: Search for tenants
      description: Superadmin-only.
      operationId: find
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Tenant_"
  /api/v1/tenants/{id}:
    get:
      tags:
      - Tenants
      summary: Retrieve a tenant
      description: Superadmin-only.
      operationId: get
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: get 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
    put:
      tags:
      - Tenants
      summary: Update a tenant
      description: Superadmin-only.
      operationId: update
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tenant"
        required: true
      responses:
        "200":
          description: update 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
    delete:
      tags:
      - Tenants
      summary: Delete a tenant and all its resources
      description: "Superadmin-only. Deletes all resources linked to the tenant, including\
        \ flows, namespaces, apps, etc."
      operationId: delete
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/{id}/logo:
    post:
      tags:
      - Tenants
      summary: Set a tenant logo
      description: Superadmin-only.
      operationId: setLogo
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                logo:
                  type: string
                  description: The logo file
                  format: binary
            encoding:
              logo:
                contentType: application/octet-stream
                explode: false
        required: true
      responses:
        "200":
          description: setLogo 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiTenant"
  /api/v1/users:
    get:
      tags:
      - Users
      summary: Retrieve users
      operationId: listUsers
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: listUsers 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_IAMUserController.ApiUserSummary_"
      security:
      - bearerAuth: []
      - basicAuth: []
    post:
      tags:
      - Users
      summary: Create a new user account
      description: Superadmin-only. Create a new user account with an optional password
        based authentication method.
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMUserController.ApiCreateOrUpdateUserRequest"
        required: true
      responses:
        "201":
          description: User was successfully created
        "404":
          description: "Tenant, or group not found"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/users/{id}:
    get:
      tags:
      - Users
      summary: Get a user
      description: Superadmin-only. Get user account details.
      operationId: getUser
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: User not found
        "200":
          description: getUser 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMUserController.ApiUser"
      security:
      - bearerAuth: []
      - basicAuth: []
    put:
      tags:
      - Users
      summary: Update a user account
      description: Superadmin-only. Update an existing user account with an optional
        password based authentication method.
      operationId: updateUser
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMUserController.ApiCreateOrUpdateUserRequest"
        required: true
      responses:
        "404":
          description: "Tenant, or group not found"
        "200":
          description: updateUser 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMUserController.ApiUser"
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Users
      summary: Delete a user
      description: Superadmin-only. Delete a user including all its access.
      operationId: deleteUser
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: User successfully deleted
        "404":
          description: User not found
      security:
      - bearerAuth: []
      - basicAuth: []
    patch:
      tags:
      - Users
      summary: Update user details
      description: Superadmin-only. Updates the the details of a user.
      operationId: patchUser
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        description: The user details
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MeController.ApiUserDetailsRequest"
        required: true
      responses:
        "200":
          description: patchUser 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMUserController.ApiUser"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/users/{id}/api-tokens:
    get:
      tags:
      - Users
      summary: List API tokens for a specific user
      description: Superadmin-only. Get all API token existing for a user.
      operationId: listApiTokens
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: User not found
        "200":
          description: listApiTokens 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
    post:
      tags:
      - Users
      summary: Create new API Token for a specific user
      description: Superadmin-only. Create a new API token for a user.
      operationId: createApiTokensForUser
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        description: The create api-token request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiTokenRequest"
        required: true
      responses:
        "200":
          description: API token successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateApiTokenResponse"
        "404":
          description: User not found
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/users/{id}/api-tokens/{tokenId}:
    delete:
      tags:
      - Users
      summary: Delete an API Token for specific user and token id
      description: Superadmin-only. Delete an API token for a user.
      operationId: deleteApiToken
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: API token successfully deleted
        "404":
          description: "User, or API Token not found"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/users/{id}/auths/{auth}:
    delete:
      tags:
      - Users
      summary: Update user password
      description: Superadmin-only. Updates whether a user is a superadmin.
      operationId: deleteUserAuthMethod
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: auth
        in: path
        description: The user auth method id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User auth method successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMUserController.ApiUser"
        "404":
          description: User or auth method not found
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/users/{id}/impersonate:
    post:
      tags:
      - Users
      summary: Impersonate a user
      description: Superadmin-only. Allows an admin to impersonate another user.
      operationId: impersonate
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: User not found
        "200":
          description: impersonate 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/users/{id}/password:
    patch:
      tags:
      - Users
      summary: Update user password
      description: Superadmin-only. Updates whether a user is a superadmin.
      operationId: patchUserPassword
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMUserController.ApiPatchUserPasswordRequest"
        required: true
      responses:
        "200":
          description: User successfully updated
          content:
            application/json:
              schema:
                type: object
        "404":
          description: User not found
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/users/{id}/refresh-token:
    delete:
      tags:
      - Users
      summary: Delete a user refresh token
      operationId: deleteRefreshToken
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Refresh token successfully deleted
        "404":
          description: User not found
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/users/{id}/restricted:
    patch:
      tags:
      - Users
      summary: Update user demo
      description: Superadmin-only. Updates whether a user is for demo.
      operationId: patchUserDemo
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMUserController.ApiPatchRestrictedRequest"
        required: true
      responses:
        "200":
          description: User successfully updated
        "404":
          description: User not found
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/users/{id}/superadmin:
    patch:
      tags:
      - Users
      summary: Update user superadmin privileges
      description: Superadmin-only. Updates whether a user is a superadmin.
      operationId: patchUserSuperAdmin
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMUserController.ApiPatchSuperAdminRequest"
        required: true
      responses:
        "200":
          description: User successfully updated
        "404":
          description: User not found
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/acls/actions:
    get:
      tags:
      - Misc
      summary: Retrieve list of actions
      description: "Actions are used to restrict possible operations for each permission.\
        \ Each action must be one of the following: CREATE, READ, UPDATE, DELETE.\
        \ Using permissions and actions together, you can control access to resources\
        \ e.g. only allow a user to read a flow, but not update or delete it."
      operationId: listActions
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listActions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Action"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/acls/permissions:
    get:
      tags:
      - Misc
      summary: Retrieve list of permissions
      description: "Permissions are used to control access to resources within the\
        \ Kestra platform. Example of permissions are: FLOW, EXECUTION, NAMESPACE,\
        \ APP, TEST, etc."
      operationId: listPermissions
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listPermissions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/ai/generate/flow:
    post:
      tags:
      - AI
      summary: Generate or regenerate a flow based on a prompt
      operationId: generateFlow
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Prompt and context required for flow generation
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlowGenerationPrompt"
        required: true
      responses:
        "200":
          description: generateFlow 200 response
          content:
            application/yaml:
              schema:
                type: string
  /api/v1/{tenant}/apps:
    post:
      tags:
      - Apps
      summary: Create a new app
      operationId: createApp
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The app
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: createApp 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppsController.ApiAppSource"
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Apps
      summary: Delete existing apps
      operationId: bulkDeleteApps
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The list of Apps UID
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppsController.ApiBulkOperationRequest"
        required: true
      responses:
        "200":
          description: bulkDeleteApps 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/catalog:
    get:
      tags:
      - Apps
      summary: Search for apps from catalog
      operationId: searchAppsFromCatalog
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: tags
        in: query
        description: Tags filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: String filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchAppsFromCatalog 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_AppsController.ApiAppCatalogItem_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/disable:
    post:
      tags:
      - Apps
      summary: Disable existing apps
      operationId: bulkDisableApps
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The list of Apps UID
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppsController.ApiBulkOperationRequest"
        required: true
      responses:
        "200":
          description: bulkDisableApps 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/enable:
    post:
      tags:
      - Apps
      summary: Enable existing apps
      operationId: bulkEnableApps
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The list of Apps UID
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppsController.ApiBulkOperationRequest"
        required: true
      responses:
        "200":
          description: bulkEnableApps 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/export:
    post:
      tags:
      - Apps
      summary: Export apps as a ZIP archive of YAML sources.
      operationId: bulkExportApps
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The list of Apps UID
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AppsController.ApiBulkOperationRequest"
        required: true
      responses:
        "200":
          description: bulkExportApps 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: byte
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/import:
    post:
      tags:
      - Flows
      summary: |2
            Import apps as a ZIP archive of yaml sources or a multi-objects YAML file.
            When sending a Yaml that contains one or more apps, a list of index is returned.
            When sending a ZIP archive, a list of files that couldn't be imported is returned.
      operationId: bulkImportApps
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileUpload:
                  type: string
                  description: "The file to import, can be a ZIP archive or a multi-objects\
                    \ YAML file"
                  format: binary
            encoding:
              fileUpload:
                contentType: application/octet-stream
                explode: false
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppsController.ApiBulkImportResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/preview:
    post:
      tags:
      - Apps
      summary: Open the app for the given source
      operationId: previewApp
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The app
        content:
          application/x-yaml:
            schema:
              type: object
              properties:
                parameters:
                  $ref: "#/components/schemas/HttpParameters"
        required: true
      responses:
        "200":
          description: previewApp 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/search:
    get:
      tags:
      - Apps
      summary: Search for apps
      operationId: searchApps
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tags
        in: query
        description: A tags filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchApps 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_AppsController.ApiApp_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/tags:
    get:
      tags:
      - Apps
      summary: Get all the app tags
      operationId: listTags
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listTags 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppsController.ApiAppTags"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/view/{id}/dispatch/{dispatch}:
    post:
      tags:
      - Apps
      summary: Dispatch for a given app.
      operationId: dispatchApp
      parameters:
      - name: id
        in: path
        description: The ID of the app.
        required: true
        schema:
          type: string
      - name: dispatch
        in: path
        description: The ID to dispatch
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The data of the app
        content:
          multipart/form-data:
            schema:
              type: array
              properties:
                parameters:
                  $ref: "#/components/schemas/HttpParameters"
              items:
                type: string
                format: binary
            encoding: {}
      responses:
        "200":
          description: dispatchApp 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/view/{id}/file/download:
    get:
      tags:
      - Apps
      summary: Download file from an app execution
      operationId: downloadFileFromAppExecution
      parameters:
      - name: id
        in: path
        description: The ID of the app.
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        explode: false
        schema:
          type: string
          format: uri
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: downloadFileFromAppExecution 200 response
          content:
            application/json:
              schema:
                type: string
                format: binary
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/view/{id}/file/meta:
    get:
      tags:
      - Apps
      summary: Get file meta information from an app execution
      operationId: getFileMetaFromAppExecution
      parameters:
      - name: id
        in: path
        description: The ID of the app.
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        explode: false
        schema:
          type: string
          format: uri
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFileMetaFromAppExecution 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileMetas"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/view/{id}/file/preview:
    get:
      tags:
      - Apps
      summary: Get file preview from an app execution
      operationId: getFilePreviewFromAppExecution
      parameters:
      - name: id
        in: path
        description: The ID of the app.
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        explode: false
        schema:
          type: string
          format: uri
      - name: maxRows
        in: query
        description: The max row returns
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: encoding
        in: query
        description: The file encoding as Java charset name. Defaults to UTF-8
        required: true
        explode: false
        schema:
          type: string
          default: UTF-8
        example: ISO-8859-1
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFilePreviewFromAppExecution 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/view/{id}/streams/{stream}:
    get:
      tags:
      - Apps
      summary: Get an event stream from a given app.
      operationId: getStreamEventsFromApp
      parameters:
      - name: id
        in: path
        description: The ID of the app.
        required: true
        schema:
          type: string
      - name: stream
        in: path
        description: The ID of the stream to get
        required: true
        schema:
          type: string
      - name: parameters
        in: query
        required: true
        explode: false
        schema:
          $ref: "#/components/schemas/HttpParameters"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getStreamEventsFromApp 200 response
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/Event_AppResponse_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/view/{uid}:
    get:
      tags:
      - Apps
      summary: Open an app
      operationId: openApp
      parameters:
      - name: uid
        in: path
        description: The ID of the app
        required: true
        schema:
          type: string
      - name: parameters
        in: query
        required: true
        explode: false
        schema:
          $ref: "#/components/schemas/HttpParameters"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: openApp 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/view/{uid}/logs/download:
    get:
      tags:
      - Apps
      summary: Download logs for an app execution
      operationId: getLogsFromAppExecution
      parameters:
      - name: uid
        in: path
        description: The ID of the app.
        required: true
        schema:
          type: string
      - name: executionId
        in: query
        description: The ID of the execution.
        required: true
        explode: false
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: taskIds
        in: query
        description: The tasks' IDs
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getLogsFromAppExecution 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/{uid}:
    get:
      tags:
      - Apps
      summary: Retrieve an app
      operationId: getApp
      parameters:
      - name: uid
        in: path
        description: The ID of the app
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getApp 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppsController.ApiAppSource"
      security:
      - bearerAuth: []
      - basicAuth: []
    put:
      tags:
      - Apps
      summary: Update an existing app
      operationId: updateApp
      parameters:
      - name: uid
        in: path
        description: The ID of the app
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The app
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: updateApp 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppsController.ApiAppSource"
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Apps
      summary: Delete an existing app
      operationId: deleteApp
      parameters:
      - name: uid
        in: path
        description: The ID of the app
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApp 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/{uid}/disable:
    post:
      tags:
      - Apps
      summary: Disable the app.
      operationId: disableApp
      parameters:
      - name: uid
        in: path
        description: The ID of app
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: disableApp 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppsController.ApiApp"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/apps/{uid}/enable:
    post:
      tags:
      - Apps
      summary: Enable the app.
      operationId: enableApp
      parameters:
      - name: uid
        in: path
        description: The ID of app
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: enableApp 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppsController.ApiApp"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/auditlogs/find:
    post:
      tags:
      - Audit Logs
      summary: Find a specific audit log
      operationId: findAuditLog
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The find request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuditLogController.FindRequest"
        required: true
      responses:
        "200":
          description: findAuditLog 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditLogController.AuditLogWithUser"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/auditlogs/history/{detailId}:
    get:
      tags:
      - Audit Logs
      summary: Find all audit logs about a specific resource.
      operationId: listAuditLogFromResourceId
      parameters:
      - name: detailId
        in: path
        description: The resource Id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listAuditLogFromResourceId 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AuditLogController.AuditLogOption"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/auditlogs/search:
    get:
      tags:
      - Audit Logs
      summary: Search for audit logs
      operationId: searchAuditLogs
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: namespace
        in: query
        description: A namespace filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: executionId
        in: query
        description: An execution filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: userId
        in: query
        description: A user id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: id
        in: query
        description: A id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: permission
        in: query
        description: A permission filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Permission"
      - name: startDate
        in: query
        description: The start datetime
        explode: false
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        explode: false
        schema:
          type: string
          format: date-time
          nullable: true
      - name: details
        in: query
        description: A list of auditLog details
        explode: false
        schema:
          type: object
          additionalProperties:
            type: string
          nullable: true
      - name: type
        in: query
        description: The event that create the audit log
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/CrudEventType"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchAuditLogs 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_AuditLogController.AuditLogWithUser_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/auditlogs/{id}/diff:
    get:
      tags:
      - Audit Logs
      summary: Retrieve the diff between audit logs
      description: Retrieves the diff between the current version and a selected previous
        version of a given resource based on audit logs.
      operationId: getResourceDiffFromAuditLog
      parameters:
      - name: id
        in: path
        description: The id of the audit log
        required: true
        schema:
          type: string
      - name: previousId
        in: query
        description: The id of a previous audit log to compare with
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getResourceDiffFromAuditLog 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditLogController.AuditLogDiff"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/basicAuth:
    post:
      tags:
      - Misc
      summary: Configure basic authentication for the instance.
      description: Sets up basic authentication credentials.
      operationId: createBasicAuth
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MiscController.BasicAuthCredentials"
        required: true
      responses:
        "200":
          description: createBasicAuth 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/bindings:
    post:
      tags:
      - Bindings
      summary: Create a binding
      operationId: createBinding
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The binding
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMBindingController.ApiCreateBindingRequest"
        required: true
      responses:
        "200":
          description: createBinding 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMBindingController.ApiBindingDetail"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/bindings/bulk:
    post:
      tags:
      - Bindings
      summary: Create multiple bindings
      operationId: bulkCreateBinding
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The bindings
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IAMBindingController.ApiCreateBindingRequest"
        required: true
      responses:
        "200":
          description: bulkCreateBinding 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IAMBindingController.ApiBindingDetail"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/bindings/search:
    get:
      tags:
      - Bindings
      summary: Search for bindings
      operationId: searchBindings
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: Binding type filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Binding.Type"
      - name: id
        in: query
        description: External id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchBindings 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_IAMBindingController.ApiBindingDetail_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/bindings/{id}:
    get:
      tags:
      - Bindings
      summary: Retrieve a binding
      operationId: getBinding
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getBinding 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMBindingController.ApiBindingDetail"
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Bindings
      summary: Delete a binding
      operationId: deleteBinding
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/blueprints/community/{kind}:
    get:
      tags:
      - Blueprints
      summary: List all blueprints
      description: Lists all community blueprints of the specified kind. Community
        blueprints are shared and versioned.
      operationId: searchBlueprints
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: string
          nullable: true
      - name: tags
        in: query
        description: A tags filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: kind
        in: path
        description: The blueprint kind
        required: true
        schema:
          $ref: "#/components/schemas/BlueprintController.Kind"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchBlueprints 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_BlueprintController.ApiBlueprintItem_"
  /api/v1/{tenant}/blueprints/community/{kind}/tags:
    get:
      tags:
      - Blueprint Tags
      summary: List blueprint tags matching the filter
      description: "Lists tags for community blueprints of the specified kind, optionally\
        \ filtered by query."
      operationId: listBlueprintTags
      parameters:
      - name: kind
        in: path
        description: The blueprint kind
        required: true
        schema:
          $ref: "#/components/schemas/BlueprintController.Kind"
      - name: q
        in: query
        description: A string filter to get tags with matching blueprints only
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listBlueprintTags 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlueprintController.ApiBlueprintTagItem"
  /api/v1/{tenant}/blueprints/community/{kind}/{id}:
    get:
      tags:
      - Blueprints
      summary: Retrieve a blueprint
      description: Retrieves details of a specific community blueprint.
      operationId: getBlueprint
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      - name: kind
        in: path
        description: The blueprint kind
        required: true
        schema:
          $ref: "#/components/schemas/BlueprintController.Kind"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getBlueprint 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintController.ApiBlueprintItemWithSource"
  /api/v1/{tenant}/blueprints/community/{kind}/{id}/graph:
    get:
      tags:
      - Blueprints
      summary: Retrieve a blueprint graph
      description: Retrieves the topology graph representation of a specific community
        blueprint.
      operationId: getBlueprintGraph
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      - name: kind
        in: path
        description: The blueprint kind
        required: true
        schema:
          $ref: "#/components/schemas/BlueprintController.Kind"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getBlueprintGraph 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
  /api/v1/{tenant}/blueprints/community/{kind}/{id}/source:
    get:
      tags:
      - Blueprints
      summary: Retrieve a blueprint source code
      description: Retrieves the YAML source code for a specific community blueprint.
      operationId: getBlueprintSource
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      - name: kind
        in: path
        description: The blueprint kind
        required: true
        schema:
          $ref: "#/components/schemas/BlueprintController.Kind"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getBlueprintSource 200 response
          content:
            application/yaml:
              schema:
                type: string
  /api/v1/{tenant}/blueprints/custom:
    get:
      tags:
      - Blueprints
      summary: List all internal blueprints
      description: Lists all internal (custom) blueprints for the current tenant.
        Requires BLUEPRINT permission.
      operationId: searchInternalBlueprints
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: string
          nullable: true
      - name: tags
        in: query
        description: A tags filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchInternalBlueprints 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Blueprint_"
    post:
      tags:
      - Blueprints
      summary: Create a new internal blueprint
      description: Creates a new internal (custom) blueprint for the current tenant.
        Requires BLUEPRINT permission.
      operationId: createInternalBlueprints
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The internal blueprint to create
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlueprintController.ApiBlueprintItemWithSource"
        required: true
      responses:
        "200":
          description: createInternalBlueprints 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintController.ApiBlueprintItemWithSource"
  /api/v1/{tenant}/blueprints/custom/tags:
    get:
      tags:
      - Blueprint Tags
      summary: List all internal blueprint tags
      description: Lists all tags used by internal (custom) blueprints for the current
        tenant.
      operationId: internalBlueprintTags
      parameters:
      - name: q
        in: query
        description: A string filter to get tags with matching blueprints only
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprintTags 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/{tenant}/blueprints/custom/{id}:
    get:
      tags:
      - Blueprints
      summary: Retrieve an internal blueprint
      description: Retrieves details of a specific internal (custom) blueprint. Requires
        BLUEPRINT permission.
      operationId: internalBlueprint
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprint 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintController.ApiBlueprintItemWithSource"
    put:
      tags:
      - Blueprints
      summary: Update an internal blueprint
      description: Updates an existing internal (custom) blueprint for the current
        tenant. Requires BLUEPRINT permission.
      operationId: updateInternalBlueprints
      parameters:
      - name: id
        in: path
        description: The id of the internal blueprint to update
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The new internal blueprint for update
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlueprintController.ApiBlueprintItemWithSource"
        required: true
      responses:
        "200":
          description: updateInternalBlueprints 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintWithFlow"
    delete:
      tags:
      - Blueprints
      summary: Delete an internal blueprint
      description: Deletes an internal (custom) blueprint for the current tenant.
        Requires BLUEPRINT permission.
      operationId: deleteInternalBlueprints
      parameters:
      - name: id
        in: path
        description: The internal blueprint id to delete
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteInternalBlueprints 200 response
  /api/v1/{tenant}/blueprints/custom/{id}/source:
    get:
      tags:
      - Blueprints
      summary: Retrieve an internal blueprint source code
      description: Retrieves the YAML source code for a specific internal (custom)
        blueprint. Requires BLUEPRINT permission.
      operationId: internalBlueprintFlow
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprintFlow 200 response
          content:
            application/yaml:
              schema:
                type: string
  /api/v1/{tenant}/dashboards:
    get:
      tags:
      - Dashboards
      summary: Search for dashboards
      operationId: searchDashboards
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: q
        in: query
        description: The filter query
        explode: false
        schema:
          type: string
          nullable: true
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchDashboards 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Dashboard_"
    post:
      tags:
      - Dashboards
      summary: Create a dashboard from yaml source
      operationId: createDashboard
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The dashboard definition as YAML
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: createDashboard 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
  /api/v1/{tenant}/dashboards/charts/export/to-csv:
    post:
      tags:
      - Dashboards
      summary: Export a table chart data to CSV
      operationId: exportChartToCsv
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DashboardController.PreviewRequest"
        required: true
      responses:
        "200":
          description: exportChartToCsv 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: byte
  /api/v1/{tenant}/dashboards/charts/preview:
    post:
      tags:
      - Dashboards
      summary: Preview a chart data
      operationId: previewChart
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DashboardController.PreviewRequest"
        required: true
      responses:
        "200":
          description: previewChart 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Map_String.Object__"
  /api/v1/{tenant}/dashboards/validate:
    post:
      tags:
      - Dashboards
      summary: Validate dashboard from yaml source
      operationId: validateDashboard
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The dashboard definition as YAML
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateDashboard 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/{tenant}/dashboards/validate/chart:
    post:
      tags:
      - Dashboards
      summary: Validate a chart from yaml source
      operationId: validateChart
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The chart definition as YAML
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateChart 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/{tenant}/dashboards/{id}:
    get:
      tags:
      - Dashboards
      summary: Get a dashboard
      operationId: getDashboard
      parameters:
      - name: id
        in: path
        description: The dashboard id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getDashboard 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
    put:
      tags:
      - Dashboards
      summary: Update a dashboard
      operationId: updateDashboard
      parameters:
      - name: id
        in: path
        description: The dashboard id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The dashboard definition as YAML
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: updateDashboard 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dashboard"
    delete:
      tags:
      - Dashboards
      summary: Delete a dashboard
      operationId: deleteDashboard
      parameters:
      - name: id
        in: path
        description: The dashboard id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteDashboard 200 response
  /api/v1/{tenant}/dashboards/{id}/charts/{chartId}:
    post:
      tags:
      - Dashboards
      summary: Generate a dashboard chart data
      operationId: getDashboardChartData
      parameters:
      - name: id
        in: path
        description: The dashboard id
        required: true
        schema:
          type: string
      - name: chartId
        in: path
        description: The chart id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: "The filters to apply, some can override chart definition like\
          \ labels & namespace"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChartFiltersOverrides"
        required: true
      responses:
        "200":
          description: getDashboardChartData 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Map_String.Object__"
  /api/v1/{tenant}/dashboards/{id}/charts/{chartId}/export/to-csv:
    post:
      tags:
      - Dashboards
      summary: Export a dashboard chart data to CSV
      operationId: exportDashboardChartDataToCSV
      parameters:
      - name: id
        in: path
        description: The dashboard id
        required: true
        schema:
          type: string
      - name: chartId
        in: path
        description: The chart id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: "The filters to apply, some can override chart definition like\
          \ labels & namespace"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChartFiltersOverrides"
        required: true
      responses:
        "200":
          description: exportDashboardChartDataToCSV 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: byte
  /api/v1/{tenant}/dependencies:
    get:
      tags:
      - Tenants
      summary: Get tenant dependencies
      operationId: getFlowDependenciesFromTenant
      parameters:
      - name: destinationOnly
        in: query
        description: "if true, list only destination dependencies, otherwise list\
          \ also source dependencies"
        required: true
        explode: false
        schema:
          type: boolean
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowDependenciesFromTenant 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowTopologyGraph"
  /api/v1/{tenant}/executions:
    get:
      tags:
      - Executions
      summary: Search for executions for a flow
      operationId: searchExecutionsByFlowId
      parameters:
      - name: namespace
        in: query
        description: The flow namespace
        required: true
        explode: false
        schema:
          type: string
      - name: flowId
        in: query
        description: The flow id
        required: true
        explode: false
        schema:
          type: string
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchExecutionsByFlowId 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Execution_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/by-ids:
    delete:
      tags:
      - Executions
      summary: Delete a list of executions
      operationId: deleteExecutionsByIds
      parameters:
      - name: includeNonTerminated
        in: query
        description: Whether to delete non-terminated executions
        explode: false
        schema:
          type: boolean
          nullable: true
          default: false
      - name: deleteLogs
        in: query
        description: Whether to delete execution logs
        required: true
        explode: false
        schema:
          type: boolean
          default: true
      - name: deleteMetrics
        in: query
        description: Whether to delete execution metrics
        required: true
        explode: false
        schema:
          type: boolean
          default: true
      - name: deleteStorage
        in: query
        description: Whether to delete execution files in the internal storage
        required: true
        explode: false
        schema:
          type: boolean
          default: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The execution id
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Deleted with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/by-query:
    delete:
      tags:
      - Executions
      summary: Delete executions filter by query parameters
      operationId: deleteExecutionsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        explode: false
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        explode: false
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: includeNonTerminated
        in: query
        description: Whether to delete non-terminated executions
        explode: false
        schema:
          type: boolean
          nullable: true
          default: false
      - name: deleteLogs
        in: query
        description: Whether to delete execution logs
        required: true
        explode: false
        schema:
          type: boolean
          default: true
      - name: deleteMetrics
        in: query
        description: Whether to delete execution metrics
        required: true
        explode: false
        schema:
          type: boolean
          default: true
      - name: deleteStorage
        in: query
        description: Whether to delete execution files in the internal storage
        required: true
        explode: false
        schema:
          type: boolean
          default: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: deleteExecutionsByQuery 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/change-status/by-ids:
    post:
      tags:
      - Executions
      summary: Change executions state by id
      operationId: updateExecutionsStatusByIds
      parameters:
      - name: newStatus
        in: query
        description: The new state of the executions
        required: true
        explode: false
        schema:
          $ref: "#/components/schemas/State.Type"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The list of executions id
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Changed state with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/change-status/by-query:
    post:
      tags:
      - Executions
      summary: Change executions state by query parameters
      operationId: updateExecutionsStatusByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        explode: false
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        explode: false
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: newStatus
        in: query
        description: The new state of the executions
        required: true
        explode: false
        schema:
          $ref: "#/components/schemas/State.Type"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Changed state with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/flows/{namespace}/{flowId}:
    get:
      tags:
      - Executions
      summary: Get flow information's for an execution
      operationId: getFlowFromExecution
      parameters:
      - name: namespace
        in: path
        description: The namespace of the flow
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowFromExecution 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowForExecution"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/force-run/by-ids:
    post:
      tags:
      - Executions
      summary: Force run a list of executions
      operationId: forceRunByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The list of executions id
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Force run with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/force-run/by-query:
    post:
      tags:
      - Executions
      summary: Force run executions filter by query parameters
      operationId: forceRunExecutionsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        explode: false
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        explode: false
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: forceRunExecutionsByQuery 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/kill/by-ids:
    delete:
      tags:
      - Executions
      summary: Kill a list of executions
      operationId: killExecutionsByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The list of executions id
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Killed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/kill/by-query:
    delete:
      tags:
      - Executions
      summary: Kill executions filter by query parameters
      operationId: killExecutionsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        explode: false
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        explode: false
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: killExecutionsByQuery 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/labels/by-ids:
    post:
      tags:
      - Executions
      summary: Set labels on a list of executions
      operationId: setLabelsOnTerminatedExecutionsByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The request containing a list of labels and a list of executions
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionController.SetLabelsByIdsRequest"
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Killed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/labels/by-query:
    post:
      tags:
      - Executions
      summary: Set label on executions filter by query parameters
      operationId: setLabelsOnTerminatedExecutionsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        explode: false
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        explode: false
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The labels to add to the execution
        content:
          application/json:
            schema:
              type: array
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
              items:
                $ref: "#/components/schemas/Label"
        required: true
      responses:
        "200":
          description: setLabelsOnTerminatedExecutionsByQuery 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/latest:
    post:
      tags:
      - Executions
      summary: Get the latest execution for given flows
      operationId: getLatestExecutions
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/ExecutionRepositoryInterface.FlowFilter"
        required: true
      responses:
        "200":
          description: getLatestExecutions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutionController.LastExecutionResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/namespaces:
    get:
      tags:
      - Executions
      summary: Get all namespaces that have executable flows
      operationId: listExecutableDistinctNamespaces
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listExecutableDistinctNamespaces 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/namespaces/{namespace}/flows:
    get:
      tags:
      - Executions
      summary: Get all flow ids for a namespace. Data returned are FlowForExecution
        containing minimal information about a Flow for when you are allowed to executing
        but not reading.
      operationId: listFlowExecutionsByNamespace
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listFlowExecutionsByNamespace 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowForExecution"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/pause/by-ids:
    post:
      tags:
      - Executions
      summary: Pause a list of running executions
      operationId: pauseExecutionsByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The list of executions id
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Paused with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/pause/by-query:
    post:
      tags:
      - Executions
      summary: Pause executions filter by query parameters
      operationId: pauseExecutionsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        explode: false
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        explode: false
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: pauseExecutionsByQuery 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/replay/by-ids:
    post:
      tags:
      - Executions
      summary: Create new executions from old ones. Keep the flow revision
      operationId: replayExecutionsByIds
      parameters:
      - name: latestRevision
        in: query
        description: If latest revision should be used
        explode: false
        schema:
          type: boolean
          nullable: true
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The list of executions id
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Replayed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/replay/by-query:
    post:
      tags:
      - Executions
      summary: Create new executions from old ones filter by query parameters. Keep
        the flow revision
      operationId: replayExecutionsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        explode: false
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        explode: false
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: latestRevision
        in: query
        description: If latest revision should be used
        explode: false
        schema:
          type: boolean
          nullable: true
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: replayExecutionsByQuery 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/restart/by-ids:
    post:
      tags:
      - Executions
      summary: Restart a list of executions
      operationId: restartExecutionsByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The list of executions id
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Restarted with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/restart/by-query:
    post:
      tags:
      - Executions
      summary: Restart executions filter by query parameters
      operationId: restartExecutionsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        explode: false
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        explode: false
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: restartExecutionsByQuery 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/resume/by-ids:
    post:
      tags:
      - Executions
      summary: Resume a list of paused executions
      operationId: resumeExecutionsByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The list of executions id
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Resumed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/resume/by-query:
    post:
      tags:
      - Executions
      summary: Resume executions filter by query parameters
      operationId: resumeExecutionsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        explode: false
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        explode: false
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: resumeExecutionsByQuery 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/search:
    get:
      tags:
      - Executions
      summary: Search for executions
      operationId: searchExecutions
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: filters
        in: query
        description: Filters
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/QueryFilter"
      - name: q
        in: query
        description: A string filter
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        deprecated: true
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        deprecated: true
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        deprecated: true
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        deprecated: true
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        deprecated: true
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        deprecated: true
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchExecutions 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Execution_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/trigger/{namespace}/{id}:
    post:
      tags:
      - Executions
      summary: Trigger a new execution for a flow
      operationId: triggerExecution
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: wait
        in: query
        description: If the server will wait the end of the execution
        required: true
        explode: false
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: The flow revision or latest if null
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The inputs
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
                format: binary
      responses:
        "409":
          description: if the flow is disabled
        "200":
          description: triggerExecution 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutionController.ExecutionResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/unqueue/by-ids:
    post:
      tags:
      - Executions
      summary: Unqueue a list of executions
      operationId: unqueueExecutionsByIds
      parameters:
      - name: state
        in: query
        description: The new state of the unqueued executions
        required: true
        explode: false
        schema:
          $ref: "#/components/schemas/State.Type"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The list of executions id
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Unqueued with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/unqueue/by-query:
    post:
      tags:
      - Executions
      summary: Unqueue executions filter by query parameters
      operationId: unqueueExecutionsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        explode: false
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        explode: false
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: newState
        in: query
        description: The new state of the unqueued executions
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/State.Type"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: unqueueExecutionsByQuery 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/webhook/{namespace}/{id}/{key}:
    get:
      tags:
      - Executions
      summary: Trigger a new execution by GET webhook trigger
      operationId: triggerExecutionByGetWebhook
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: triggerExecutionByGetWebhook 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionController.WebhookResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
    put:
      tags:
      - Executions
      summary: Trigger a new execution by PUT webhook trigger
      operationId: triggerExecutionByPutWebhook
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: triggerExecutionByPutWebhook 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionController.WebhookResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
    post:
      tags:
      - Executions
      summary: Trigger a new execution by POST webhook trigger
      operationId: triggerExecutionByPostWebhook
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: triggerExecutionByPostWebhook 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionController.WebhookResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}:
    get:
      tags:
      - Executions
      summary: Get an execution
      operationId: getExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getExecution 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Executions
      summary: Delete an execution
      operationId: deleteExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: deleteLogs
        in: query
        description: Whether to delete execution logs
        required: true
        explode: false
        schema:
          type: boolean
          default: true
      - name: deleteMetrics
        in: query
        description: Whether to delete execution metrics
        required: true
        explode: false
        schema:
          type: boolean
          default: true
      - name: deleteStorage
        in: query
        description: Whether to delete execution files in the internal storage
        required: true
        explode: false
        schema:
          type: boolean
          default: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "200":
          description: deleteExecution 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/change-status:
    post:
      tags:
      - Executions
      summary: Change the state of an execution
      operationId: updateExecutionStatus
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: status
        in: query
        description: The new state of the execution
        required: true
        explode: false
        schema:
          $ref: "#/components/schemas/State.Type"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: updateExecutionStatus 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/eval/{taskRunId}:
    post:
      tags:
      - Executions
      summary: Evaluate a variable expression for this taskrun
      operationId: evalTaskRunExpression
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: taskRunId
        in: path
        description: The taskrun id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The Pebble expression that should be evaluated
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: evalTaskRunExpression 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionController.EvalResult"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/file:
    get:
      tags:
      - Executions
      summary: Download file for an execution
      operationId: downloadFileFromExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        explode: false
        schema:
          type: string
          format: uri
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: downloadFileFromExecution 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/file/metas:
    get:
      tags:
      - Executions
      summary: Get file meta information for an execution
      operationId: getFileMetadatasFromExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        explode: false
        schema:
          type: string
          format: uri
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFileMetadatasFromExecution 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileMetas"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/file/preview:
    get:
      tags:
      - Executions
      summary: Get file preview for an execution
      operationId: previewFileFromExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        explode: false
        schema:
          type: string
          format: uri
      - name: maxRows
        in: query
        description: The max row returns
        required: true
        explode: false
        schema:
          type: integer
          format: int32
      - name: encoding
        in: query
        description: The file encoding as Java charset name. Defaults to UTF-8
        required: true
        explode: false
        schema:
          type: string
          default: UTF-8
        example: ISO-8859-1
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: previewFileFromExecution 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/flow:
    get:
      tags:
      - Executions
      summary: Get flow information's for an execution
      operationId: getFlowFromExecutionById
      parameters:
      - name: executionId
        in: path
        description: The execution that you want flow information's
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowFromExecutionById 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowForExecution"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/follow:
    get:
      tags:
      - Executions
      summary: Follow an execution
      operationId: followExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: followExecution 200 response
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/Event_Execution_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/follow-dependencies:
    get:
      tags:
      - Executions
      summary: Follow all execution dependencies executions
      operationId: followDependenciesExecutions
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: destinationOnly
        in: query
        description: "If true, list only destination dependencies, otherwise list\
          \ also source dependencies"
        required: true
        explode: false
        schema:
          type: boolean
          default: false
      - name: expandAll
        in: query
        description: "If true, expand all dependencies recursively"
        required: true
        explode: false
        schema:
          type: boolean
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: followDependenciesExecutions 200 response
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/Event_ExecutionStatusEvent_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/force-run:
    post:
      tags:
      - Executions
      summary: Force run an execution
      operationId: forceRunExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: forceRunExecution 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/graph:
    get:
      tags:
      - Executions
      summary: Generate a graph for an execution
      operationId: getExecutionFlowGraph
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: subflows
        in: query
        description: The subflow tasks to display
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getExecutionFlowGraph 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowGraph"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/kill:
    delete:
      tags:
      - Executions
      summary: Kill an execution
      operationId: killExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: isOnKillCascade
        in: query
        description: Specifies whether killing the execution also kill all subflow
          executions.
        required: true
        explode: false
        schema:
          type: boolean
          default: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "202":
          description: Execution kill was requested successfully
        "409":
          description: if the executions is already finished
        "404":
          description: if the executions is not found
        "200":
          description: killExecution 200 response
          content:
            text/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/labels:
    post:
      tags:
      - Executions
      summary: Add or update labels of a terminated execution
      operationId: setLabelsOnTerminatedExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The labels to add to the execution
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Label"
        required: true
      responses:
        "404":
          description: If the execution cannot be found
        "400":
          description: If the execution is not terminated
        "200":
          description: setLabelsOnTerminatedExecution 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/pause:
    post:
      tags:
      - Executions
      summary: Pause a running execution.
      operationId: pauseExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "409":
          description: if the executions is not running
        "200":
          description: pauseExecution 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/replay:
    post:
      tags:
      - Executions
      summary: Create a new execution from an old one and start it from a specified
        task run id
      operationId: replayExecution
      parameters:
      - name: executionId
        in: path
        description: the original execution id to clone
        required: true
        schema:
          type: string
      - name: taskRunId
        in: query
        description: The taskrun id
        explode: false
        schema:
          type: string
          nullable: true
      - name: revision
        in: query
        description: The flow revision to use for new execution
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: breakpoints
        in: query
        description: "Set a list of breakpoints at specific tasks 'id.value', separated\
          \ by a coma."
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: replayExecution 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/restart:
    post:
      tags:
      - Executions
      summary: Restart a new execution from an old one
      operationId: restartExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision to use for new execution
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: restartExecution 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/resume:
    post:
      tags:
      - Executions
      summary: Resume a paused execution.
      operationId: resumeExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The inputs
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
                format: binary
        required: true
      responses:
        "204":
          description: On success
        "409":
          description: if the executions is not paused
        "200":
          description: resumeExecution 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/resume-from-breakpoint:
    post:
      tags:
      - Executions
      summary: Resume an execution from a breakpoint (in the 'BREAKPOINT' state).
      operationId: resumeExecutionFromBreakpoint
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: breakpoints
        in: query
        description: "\"Set a list of breakpoints at specific tasks 'id.value', separated\
          \ by a coma."
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "409":
          description: If the executions is not in the 'BREAKPOINT' state or has no
            breakpoint
        "200":
          description: resumeExecutionFromBreakpoint 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/resume/validate:
    post:
      tags:
      - Executions
      summary: Validate inputs to resume a paused execution.
      operationId: validateResumeExecutionInputs
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The inputs
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
                format: binary
        required: true
      responses:
        "204":
          description: On success
        "409":
          description: if the executions is not paused
        "200":
          description: validateResumeExecutionInputs 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutionController.ApiValidateExecutionInputsResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/state:
    post:
      tags:
      - Executions
      summary: Change state for a taskrun in an execution
      operationId: updateTaskRunState
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: the taskRun id and state to apply
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionController.StateRequest"
        required: true
      responses:
        "200":
          description: updateTaskRunState 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{executionId}/unqueue:
    post:
      tags:
      - Executions
      summary: Unqueue an execution
      operationId: unqueueExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: state
        in: query
        description: The new state of the execution
        required: true
        explode: false
        schema:
          $ref: "#/components/schemas/State.Type"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: unqueueExecution 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{namespace}/{id}:
    post:
      tags:
      - Executions
      summary: Create a new execution for a flow
      operationId: createExecution
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: wait
        in: query
        description: If the server will wait the end of the execution
        required: true
        explode: false
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: The flow revision or latest if null
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: scheduleDate
        in: query
        description: Schedule the flow on a specific date
        explode: false
        schema:
          type: string
          format: date-time
          nullable: true
      - name: breakpoints
        in: query
        description: "Set a list of breakpoints at specific tasks 'id.value', separated\
          \ by a coma."
        explode: false
        schema:
          type: string
          nullable: true
      - name: kind
        in: query
        description: Specific execution kind
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionKind"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The inputs
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
                format: binary
      responses:
        "409":
          description: if the flow is disabled
        "200":
          description: createExecution 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutionController.ExecutionResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/executions/{namespace}/{id}/validate:
    post:
      tags:
      - Executions
      summary: Validate the creation of a new execution for a flow
      operationId: validateNewExecutionInputs
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        required: true
        schema:
          type: array
          items:
            type: string
      - name: revision
        in: query
        description: The flow revision or latest if null
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The inputs
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
                format: binary
        required: true
      responses:
        "409":
          description: if the flow is disabled
        "200":
          description: validateNewExecutionInputs 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutionController.ApiValidateExecutionInputsResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows:
    post:
      tags:
      - Flows
      summary: Create a flow from yaml source
      operationId: createFlow
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The flow source code
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: createFlow 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowWithSource"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/bulk:
    post:
      tags:
      - Flows
      summary: Update from multiples yaml sources
      description: |-
        All flow will be created / updated for this namespace.
        Flow that already created but not in `flows` will be deleted if the query delete is `true`
      operationId: bulkUpdateFlows
      parameters:
      - name: delete
        in: query
        description: If missing flow should be deleted
        required: true
        explode: false
        schema:
          type: boolean
          default: true
      - name: namespace
        in: query
        description: The namespace where to update flows
        explode: false
        schema:
          type: string
          nullable: true
      - name: allowNamespaceChild
        in: query
        description: If namespace child should are allowed to be updated
        required: true
        explode: false
        schema:
          type: boolean
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: A list of flows source code splitted with "---"
        content:
          application/x-yaml:
            schema:
              type: string
              nullable: true
      responses:
        "200":
          description: bulkUpdateFlows 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowInterface"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/delete/by-ids:
    delete:
      tags:
      - Flows
      summary: Delete flows by their IDs.
      operationId: deleteFlowsByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: A list of tuple flow ID and namespace as flow identifiers
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: deleteFlowsByIds 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/delete/by-query:
    delete:
      tags:
      - Flows
      summary: Delete flows returned by the query parameters.
      operationId: deleteFlowsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        deprecated: true
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        deprecated: true
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: deleteFlowsByQuery 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/disable/by-ids:
    post:
      tags:
      - Flows
      summary: Disable flows by their IDs.
      operationId: disableFlowsByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: A list of tuple flow ID and namespace as flow identifiers
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: disableFlowsByIds 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/disable/by-query:
    post:
      tags:
      - Flows
      summary: Disable flows returned by the query parameters.
      operationId: disableFlowsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        deprecated: true
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        deprecated: true
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: disableFlowsByQuery 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/distinct-namespaces:
    get:
      tags:
      - Flows
      summary: List all distinct namespaces
      operationId: listDistinctNamespaces
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listDistinctNamespaces 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/enable/by-ids:
    post:
      tags:
      - Flows
      summary: Enable flows by their IDs.
      operationId: enableFlowsByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: A list of tuple flow ID and namespace as flow identifiers
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: enableFlowsByIds 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/enable/by-query:
    post:
      tags:
      - Flows
      summary: Enable flows returned by the query parameters.
      operationId: enableFlowsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        deprecated: true
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        deprecated: true
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: enableFlowsByQuery 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/export/by-ids:
    post:
      tags:
      - Flows
      summary: Export flows as a ZIP archive of yaml sources.
      operationId: exportFlowsByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: A list of tuple flow ID and namespace as flow identifiers
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: exportFlowsByIds 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: byte
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/export/by-query:
    get:
      tags:
      - Flows
      summary: Export flows as a ZIP archive of yaml sources.
      operationId: exportFlowsByQuery
      parameters:
      - name: filters
        in: query
        description: Filters
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/QueryFilter"
      - name: q
        in: query
        description: A string filter
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        deprecated: true
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        deprecated: true
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: exportFlowsByQuery 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: byte
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/graph:
    post:
      tags:
      - Flows
      summary: Generate a graph for a flow source
      operationId: generateFlowGraphFromSource
      parameters:
      - name: subflows
        in: query
        description: The subflow tasks to display
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The flow source code
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: generateFlowGraphFromSource 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowGraph"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/import:
    post:
      tags:
      - Flows
      summary: |2
            Import flows as a ZIP archive of yaml sources or a multi-objects YAML file.
            When sending a Yaml that contains one or more flows, a list of index is returned.
            When sending a ZIP archive, a list of files that couldn't be imported is returned.
      operationId: importFlows
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileUpload:
                  type: string
                  description: "The file to import, can be a ZIP archive or a multi-objects\
                    \ YAML file"
                  format: binary
            encoding:
              fileUpload:
                contentType: application/octet-stream
                explode: false
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/search:
    get:
      tags:
      - Flows
      summary: Search for flows
      operationId: searchFlows
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: filters
        in: query
        description: Filters
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/QueryFilter"
      - name: q
        in: query
        description: A string filter
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        deprecated: true
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        deprecated: true
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchFlows 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Flow_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/source:
    get:
      tags:
      - Flows
      summary: Search for flows source code
      operationId: searchFlowsBySourceCode
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchFlowsBySourceCode 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_SearchResult_Flow__"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/validate:
    post:
      tags:
      - Flows
      summary: Validate a list of flows
      operationId: validateFlows
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: A list of flows source code in a single string
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateFlows 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ValidateConstraintViolation"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/validate/task:
    post:
      tags:
      - Flows
      summary: Validate a task
      operationId: validateTask
      parameters:
      - name: section
        in: query
        description: The type of task
        required: true
        explode: false
        schema:
          $ref: "#/components/schemas/FlowController.TaskValidationType"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: A task definition that can be from tasks or triggers
        content:
          application/x-yaml:
            schema:
              type: string
          application/json:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: validateTask 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateConstraintViolation"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/validate/trigger:
    post:
      tags:
      - Flows
      summary: Validate trigger
      operationId: validateTrigger
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The trigger
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateTrigger 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateConstraintViolation"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/{namespace}:
    get:
      tags:
      - Flows
      summary: Retrieve all flows from a given namespace
      operationId: listFlowsByNamespace
      parameters:
      - name: namespace
        in: path
        description: Namespace to filter flows
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listFlowsByNamespace 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Flow"
      security:
      - bearerAuth: []
      - basicAuth: []
    post:
      tags:
      - Flows
      summary: Update a complete namespace from json object
      description: |-
        All flow will be created / updated for this namespace.
        Flow that already created but not in `flows` will be deleted if the query delete is `true`
      operationId: updateFlowsInNamespaceFromJson
      parameters:
      - name: delete
        in: query
        description: If missing flow should be deleted
        required: true
        explode: false
        schema:
          type: boolean
          default: true
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: A list of flows
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Flow"
          application/x-yaml:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: updateFlowsInNamespaceFromJson 200 response
          content:
            application/json:
              schema:
                oneOf:
                - type: array
                  items:
                    $ref: "#/components/schemas/Flow"
                - type: array
                  items:
                    $ref: "#/components/schemas/FlowInterface"
              example: null
      deprecated: true
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/{namespace}/{id}:
    get:
      tags:
      - Flows
      summary: Get a flow
      operationId: getFlow
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Include the source code
        required: true
        explode: false
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: Get latest revision by default
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: allowDeleted
        in: query
        description: Get flow even if deleted
        required: true
        explode: false
        schema:
          type: boolean
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlow 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
    put:
      tags:
      - Flows
      summary: Update a flow
      operationId: updateFlow
      parameters:
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The flow source code
        content:
          application/x-yaml:
            schema:
              type: string
            example: null
          '*/*':
            schema:
              $ref: "#/components/schemas/Flow"
            example: null
        required: true
      responses:
        "200":
          description: updateFlow 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/FlowWithSource"
                - $ref: "#/components/schemas/Flow"
              example: null
      deprecated: true
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Flows
      summary: Delete a flow
      operationId: deleteFlow
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "200":
          description: deleteFlow 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/{namespace}/{id}/dependencies:
    get:
      tags:
      - Flows
      summary: Get flow dependencies
      operationId: getFlowDependencies
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: destinationOnly
        in: query
        description: "If true, list only destination dependencies, otherwise list\
          \ also source dependencies"
        required: true
        explode: false
        schema:
          type: boolean
          default: false
      - name: expandAll
        in: query
        description: "If true, expand all dependencies recursively"
        required: true
        explode: false
        schema:
          type: boolean
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowDependencies 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowTopologyGraph"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/{namespace}/{id}/graph:
    get:
      tags:
      - Flows
      summary: Generate a graph for a flow
      operationId: generateFlowGraph
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: subflows
        in: query
        description: The subflow tasks to display
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Return a FlowGraph object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowGraph"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/{namespace}/{id}/revisions:
    get:
      tags:
      - Flows
      summary: Get revisions for a flow
      operationId: listFlowRevisions
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listFlowRevisions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowWithSource"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/{namespace}/{id}/tasks/{taskId}:
    get:
      tags:
      - Flows
      summary: Get a flow task
      operationId: getTaskFromFlow
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getTaskFromFlow 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/flows/{namespace}/{id}/{taskId}:
    patch:
      tags:
      - Flows
      summary: Update a single task on a flow
      operationId: updateTask
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The task
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        required: true
      responses:
        "200":
          description: updateTask 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flow"
      deprecated: true
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/groups:
    post:
      tags:
      - Groups
      summary: Create a group
      operationId: createGroup
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The group
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMGroupController.ApiCreateGroupRequest"
        required: true
      responses:
        "200":
          description: Group was created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMGroupController.ApiGroupDetail"
        "409":
          description: A group with the given name already exists
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/groups/autocomplete:
    post:
      tags:
      - Groups
      summary: List groups for autocomplete
      operationId: autocompleteGroups
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Autocomplete request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocompleteGroups 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiGroupSummary"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/groups/ids:
    post:
      tags:
      - Groups
      summary: List groups by ids
      operationId: listGroupIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The ids that must be present on results
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
        required: true
      responses:
        "200":
          description: listGroupIds 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiGroupSummary"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/groups/search:
    get:
      tags:
      - Groups
      summary: Search for groups
      operationId: searchGroups
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchGroups 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ApiGroupSummary_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/groups/{id}:
    get:
      tags:
      - Groups
      summary: Retrieve a group
      description: Retrieves details of a specific group by its ID within the current
        tenant.
      operationId: getGroup
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Group details successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMGroupController.ApiGroupDetail"
        "404":
          description: Group not found
      security:
      - bearerAuth: []
      - basicAuth: []
    put:
      tags:
      - Groups
      summary: Update a group
      operationId: updateGroup
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The group
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMGroupController.ApiUpdateGroupRequest"
        required: true
      responses:
        "200":
          description: Group was updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMGroupController.ApiGroupDetail"
        "404":
          description: Group not found
        "409":
          description: A group with the given name already exists
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Groups
      summary: Delete a group
      operationId: deleteGroup
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Group was deleted successfully
        "404":
          description: Group not found
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/groups/{id}/members:
    get:
      tags:
      - Groups
      summary: Search for users in a group
      operationId: searchGroupMembers
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchGroupMembers 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_IAMGroupController.ApiGroupMember_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/groups/{id}/members/membership/{userId}:
    put:
      tags:
      - Groups
      summary: Update a user's membership type in a group
      description: Allows a group owner or an authorized user to change the role of
        a user within a group to OWNER or MEMBER.
      operationId: setUserMembershipForGroup
      parameters:
      - name: id
        in: path
        description: The ID of the group
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The ID of the user whose membership is being updated
        required: true
        schema:
          type: string
      - name: membership
        in: query
        description: The new membership type to assign to the user.
        required: true
        explode: false
        schema:
          $ref: "#/components/schemas/GroupIdentifier.Membership"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Membership type successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMGroupController.ApiGroupMember"
        "404":
          description: User or group not found
        "409":
          description: User is not a member of the group
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/groups/{id}/members/{userId}:
    put:
      tags:
      - Groups
      summary: Add a user to a group
      description: "Adds the specified user to the given group. If the user does not\
        \ already have access to the tenant, tenant access will be created automatically."
      operationId: addUserToGroup
      parameters:
      - name: id
        in: path
        description: The ID of the group
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The ID of the user to add to the group
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User was successfully added to the group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMGroupController.ApiGroupMember"
        "404":
          description: Group or user not found
        "409":
          description: User is already a member of the group
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Groups
      summary: Remove a user from a group
      description: "Removes the specified user from the given group. If the user has\
        \ no other group bindings within the tenant, their access to the tenant will\
        \ also be revoked."
      operationId: deleteUserFromGroup
      parameters:
      - name: id
        in: path
        description: The ID of the group
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The ID of the user to remove from the group
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User was successfully removed from the group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMGroupController.ApiGroupMember"
        "404":
          description: Group or user not found
        "409":
          description: User is not a member of the group
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Groups:
    get:
      tags:
      - SCIM-Groups
      description: Find by a combination of query parameters
      operationId: queryGroups
      parameters:
      - name: attributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: filter
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: sortBy
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: sortOrder
        in: query
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/SortOrder"
      - name: startIndex
        in: query
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: count
        in: query
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    post:
      tags:
      - SCIM-Groups
      description: Create
      operationId: createSCIMResourceByIdGroups
      parameters:
      - name: attributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/ScimUser"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/.search:
    post:
      tags:
      - SCIM-Groups
      description: Search
      operationId: findGroups
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        required: true
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/{id}:
    get:
      tags:
      - SCIM-Groups
      description: Find by id
      operationId: getSCIMResourceByIdGroups
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    put:
      tags:
      - SCIM-Groups
      description: Update
      operationId: updateGroups
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/ScimResource"
        required: true
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    delete:
      tags:
      - SCIM-Groups
      description: Delete from the backing store
      operationId: deleteGroups
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
    patch:
      tags:
      - SCIM-Groups
      description: Patch a portion of the backing store
      operationId: patchGroups
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/PatchRequest"
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
  /api/v1/{tenant}/integrations/{integration}/scim/v2/ResourceTypes:
    get:
      tags:
      - SCIM-Configuration
      description: Get All Resource Types
      operationId: getAllResourceTypes
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceType"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/ResourceTypes/{name}:
    get:
      tags:
      - SCIM-Configuration
      description: Get Resource Type by URN
      operationId: getResourceType
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ResourceType"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Schemas:
    get:
      tags:
      - SCIM-Configuration
      description: Get All Schemas
      operationId: getAllSchemas
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Schema"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Schemas/{uri}:
    get:
      tags:
      - SCIM-Configuration
      description: Get Schemas by URN
      operationId: getSchema
      parameters:
      - name: uri
        in: path
        required: true
        schema:
          type: string
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/Schema"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/ServiceProviderConfig:
    get:
      tags:
      - SCIM-Configuration
      description: Get Service Provider Configuration
      operationId: getServiceProviderConfiguration
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ServiceProviderConfiguration"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Users:
    get:
      tags:
      - SCIM-Users
      description: Find by a combination of query parameters
      operationId: queryUsers
      parameters:
      - name: attributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: filter
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: sortBy
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: sortOrder
        in: query
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/SortOrder"
      - name: startIndex
        in: query
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: count
        in: query
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    post:
      tags:
      - SCIM-Users
      description: Create
      operationId: createSCIMResourceByIdUsers
      parameters:
      - name: attributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/ScimUser"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Users/.search:
    post:
      tags:
      - SCIM-Users
      description: Search
      operationId: findUsers
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        required: true
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Users/{id}:
    get:
      tags:
      - SCIM-Users
      description: Find by id
      operationId: getSCIMResourceByIdUsers
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    put:
      tags:
      - SCIM-Users
      description: Update
      operationId: updateUsers
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/ScimResource"
        required: true
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    delete:
      tags:
      - SCIM-Users
      description: Delete from the backing store
      operationId: deleteUsers
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
    patch:
      tags:
      - SCIM-Users
      description: Patch a portion of the backing store
      operationId: patchUsers
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        explode: false
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/PatchRequest"
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
  /api/v1/{tenant}/invitations:
    post:
      tags:
      - Invitations
      summary: Create an invitation
      description: Creates a new invitation and sends an email if the mail server
        is enabled.
      operationId: createInvitation
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: "Create a new invitation, send an email if the server-mail is\
          \ enabled"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMInvitationController.ApiInvitationCreateRequest"
        required: true
      responses:
        "201":
          description: Invitation successfully created
        "204":
          description: Tenant access granted to the user
        "403":
          description: Insufficient privileges to invite a Superadmin user
        "409":
          description: "Invitation already exists for the given email, or user already\
            \ had access to the tenant"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/invitations/email/{email}:
    get:
      tags:
      - Invitations
      summary: Retrieve all invitations for a given email
      description: Returns all invitations created for a given email address in the
        current tenant.
      operationId: listInvitationsByEmail
      parameters:
      - name: email
        in: path
        description: The email address of the invited
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listInvitationsByEmail 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IAMInvitationController.ApiInvitationDetail"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/invitations/search:
    get:
      tags:
      - Invitations
      summary: Search for invitations
      description: "Search and filter invitations by email, status, and pagination."
      operationId: searchInvitations
      parameters:
      - name: email
        in: query
        description: The email address of the invited
        explode: false
        schema:
          type: string
          nullable: true
      - name: status
        in: query
        description: The current status of the invitations
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Invitation.InvitationStatus"
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchInvitations 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_IAMInvitationController.ApiInvitationDetail_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/invitations/{id}:
    get:
      tags:
      - Invitations
      summary: Retrieve an invitation
      description: "Retrieves the invitation by its ID, including the invitation link."
      operationId: getInvitation
      parameters:
      - name: id
        in: path
        description: The id of the invitation
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Invitation not found
        "200":
          description: getInvitation 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMInvitationController.ApiInvitationDetail"
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Invitations
      summary: Delete an invitation
      description: Deletes the invitation by its ID.
      operationId: deleteInvitation
      parameters:
      - name: id
        in: path
        description: The id of the invitation
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Invitation successfully deleted
        "404":
          description: Invitation not found
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/logs/search:
    get:
      tags:
      - Logs
      summary: Search for logs
      operationId: searchLogs
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: filters
        in: query
        description: Filters
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/QueryFilter"
      - name: q
        in: query
        description: A string filter
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: triggerId
        in: query
        description: A trigger id filter
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: minLevel
        in: query
        description: The min log level filter
        deprecated: true
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: startDate
        in: query
        description: The start datetime
        deprecated: true
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        deprecated: true
        schema:
          type: string
          format: date-time
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchLogs 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_LogEntry_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/logs/{executionId}:
    get:
      tags:
      - Logs
      summary: "Get logs for a specific execution, taskrun or task"
      operationId: listLogsFromExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: taskRunId
        in: query
        description: The taskrun id
        explode: false
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        explode: false
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listLogsFromExecution 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogEntry"
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Logs
      summary: "Delete logs for a specific execution, taskrun or task"
      operationId: deleteLogsFromExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: taskRunId
        in: query
        description: The taskrun id
        explode: false
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        explode: false
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteLogsFromExecution 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/logs/{executionId}/download:
    get:
      tags:
      - Logs
      summary: "Download logs for a specific execution, taskrun or task"
      operationId: downloadLogsFromExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: taskRunId
        in: query
        description: The taskrun id
        explode: false
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        explode: false
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        explode: false
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: downloadLogsFromExecution 200 response
          content:
            text/plain:
              schema:
                type: string
                format: binary
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/logs/{executionId}/follow:
    get:
      tags:
      - Logs
      summary: Follow logs for a specific execution
      operationId: followLogsFromExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: followLogsFromExecution 200 response
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/Event_LogEntry_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/logs/{namespace}/{flowId}:
    delete:
      tags:
      - Logs
      summary: "Delete logs for a specific execution, taskrun or task"
      operationId: deleteLogsFromFlow
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        schema:
          type: string
      - name: triggerId
        in: query
        description: The trigger id
        required: true
        explode: false
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteLogsFromFlow 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/metrics/aggregates/{namespace}/{flowId}/{metric}:
    get:
      tags:
      - Metrics
      summary: Get metrics aggregations for a specific flow
      operationId: aggregateMetricsFromFlow
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: metric
        in: path
        description: The metric name
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: "The start datetime, default to now - 30 days"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: "The end datetime, default to now"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: aggregation
        in: query
        description: "The type of aggregation: avg, sum, min or max"
        required: true
        explode: false
        schema:
          type: string
          default: sum
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: aggregateMetricsFromFlow 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricAggregations"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/metrics/aggregates/{namespace}/{flowId}/{taskId}/{metric}:
    get:
      tags:
      - Metrics
      summary: Get metrics aggregations for a specific flow
      operationId: aggregateMetricsFromTask
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task Id
        required: true
        schema:
          type: string
      - name: metric
        in: path
        description: The metric name
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: "The start datetime, default to now - 30 days"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: "The end datetime, default to now"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: aggregation
        in: query
        description: "The type of aggregation: avg, sum, min or max"
        required: true
        explode: false
        schema:
          type: string
          default: sum
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: aggregateMetricsFromTask 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricAggregations"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/metrics/names/{namespace}/{flowId}:
    get:
      tags:
      - Metrics
      summary: Get metrics names for a specific flow
      operationId: listFlowMetrics
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listFlowMetrics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/metrics/names/{namespace}/{flowId}/{taskId}:
    get:
      tags:
      - Metrics
      summary: Get metrics names for a specific task in a flow
      operationId: listTaskMetrics
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task Id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listTaskMetrics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/metrics/tasks/{namespace}/{flowId}:
    get:
      tags:
      - Metrics
      summary: "Get tasks id that have metrics for a specific flow, include deleted\
        \ or renamed tasks"
      operationId: listTasksWithMetrics
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listTasksWithMetrics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/metrics/{executionId}:
    get:
      tags:
      - Metrics
      summary: Get metrics for a specific execution
      operationId: searchByExecution
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: taskRunId
        in: query
        description: The taskrun id
        explode: false
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchByExecution 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_MetricEntry_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces:
    post:
      tags:
      - Namespaces
      summary: Create a namespace
      operationId: createNamespace
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The namespace
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Namespace"
        required: true
      responses:
        "200":
          description: createNamespace 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Namespace"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/autocomplete:
    post:
      tags:
      - Namespaces
      summary: List namespaces for autocomplete
      description: "Returns a list of namespaces for use in autocomplete fields, optionally\
        \ allowing to filter by query and ids. Used especially for binding creation."
      operationId: autocompleteNamespaces
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocompleteNamespaces 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/search:
    get:
      tags:
      - Namespaces
      summary: Search for namespaces
      operationId: searchNamespaces
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: existing
        in: query
        description: Return only existing namespace
        explode: false
        schema:
          type: boolean
          nullable: true
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchNamespaces 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_NamespaceWithDisabled_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/{id}:
    get:
      tags:
      - Namespaces
      summary: Retrieve namespace details
      operationId: getNamespace
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getNamespace 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Namespace"
      security:
      - bearerAuth: []
      - basicAuth: []
    put:
      tags:
      - Namespaces
      summary: Update a namespace
      operationId: updateNamespace
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The namespace
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Namespace"
        required: true
      responses:
        "200":
          description: updateNamespace 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Namespace"
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Namespaces
      summary: Delete a namespace
      operationId: deleteNamespace
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/{id}/inherited-plugindefaults:
    get:
      tags:
      - Namespaces
      summary: List inherited plugin defaults
      operationId: inheritedPluginDefaults
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inheritedPluginDefaults 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PluginDefault"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/{id}/inherited-variables:
    get:
      tags:
      - Namespaces
      summary: List inherited variables
      operationId: inheritedVariables
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inheritedVariables 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/{namespace}/dependencies:
    get:
      tags:
      - Flows
      summary: Retrieve flow dependencies
      operationId: getFlowDependenciesFromNamespace
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: destinationOnly
        in: query
        description: "if true, list only destination dependencies, otherwise list\
          \ also source dependencies"
        required: true
        explode: false
        schema:
          type: boolean
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowDependenciesFromNamespace 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowTopologyGraph"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/{namespace}/files:
    get:
      tags:
      - Files
      summary: Get namespace file content
      operationId: getFileContent
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        explode: false
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFileContent 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
      security:
      - bearerAuth: []
      - basicAuth: []
    put:
      tags:
      - Files
      summary: Move a file or directory
      operationId: moveFileDirectory
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: from
        in: query
        description: The internal storage uri to move from
        required: true
        explode: false
        schema:
          type: string
          format: uri
      - name: to
        in: query
        description: The internal storage uri to move to
        required: true
        explode: false
        schema:
          type: string
          format: uri
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: moveFileDirectory 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
    post:
      tags:
      - Files
      summary: Create a file
      operationId: createNamespaceFile
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        explode: false
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileContent:
                  type: string
                  description: The file to upload
                  format: binary
            encoding:
              fileContent:
                contentType: application/octet-stream
                explode: false
        required: true
      responses:
        "200":
          description: createNamespaceFile 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Files
      summary: Delete a file or directory
      operationId: deleteFileDirectory
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri of the file / directory to delete
        required: true
        explode: false
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteFileDirectory 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/{namespace}/files/directory:
    get:
      tags:
      - Files
      summary: List directory content
      operationId: listNamespaceDirectoryFiles
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listNamespaceDirectoryFiles 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileAttributes"
      security:
      - bearerAuth: []
      - basicAuth: []
    post:
      tags:
      - Files
      summary: Create a directory
      operationId: createNamespaceDirectory
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: createNamespaceDirectory 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/{namespace}/files/export:
    get:
      tags:
      - Files
      summary: Export namespace files as a ZIP
      operationId: exportNamespaceFiles
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: exportNamespaceFiles 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: byte
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/{namespace}/files/search:
    get:
      tags:
      - Files
      summary: Find files which path contain the given string in their URI
      operationId: searchNamespaceFiles
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: The string the file path should contain
        required: true
        explode: false
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchNamespaceFiles 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/{namespace}/files/stats:
    get:
      tags:
      - Files
      summary: "Get namespace file stats such as size, creation & modification dates\
        \ and type"
      operationId: getFileMetadatas
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFileMetadatas 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileAttributes"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/{namespace}/inherited-secrets:
    get:
      tags:
      - Namespaces
      summary: List inherited secrets
      operationId: getInheritedSecrets
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getInheritedSecrets 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/{namespace}/kv:
    get:
      tags:
      - KV
      summary: List all keys for a namespace
      operationId: listKeys
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listKeys 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KVEntry"
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - KV
      summary: Bulk-delete multiple key/value pairs from the given namespace.
      operationId: deleteKeyValues
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The keys
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/KVController.ApiDeleteBulkRequest"
        required: true
      responses:
        "200":
          description: deleteKeyValues 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KVController.ApiDeleteBulkResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/{namespace}/kv/{key}:
    get:
      tags:
      - KV
      summary: Get value for a key
      operationId: getKeyValue
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The key
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getKeyValue 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KVController.TypedValue"
      security:
      - bearerAuth: []
      - basicAuth: []
    put:
      tags:
      - KV
      summary: Puts a key-value pair in store
      operationId: setKeyValue
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The key
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The value of the key
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: setKeyValue 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - KV
      summary: Delete a key-value pair
      operationId: deleteKeyValue
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The key
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteKeyValue 200 response
          content:
            application/json:
              schema:
                type: boolean
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/{namespace}/secrets:
    get:
      tags:
      - Namespaces
      summary: Get secrets for a namespace
      operationId: listNamespaceSecrets
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: filters
        in: query
        description: Filters
        required: true
        explode: false
        schema:
          type: array
          items:
            $ref: "#/components/schemas/QueryFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listNamespaceSecrets 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiSecretListResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
    put:
      tags:
      - Namespaces
      summary: Update secrets for a namespace
      operationId: putSecrets
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiSecretValue"
        required: true
      responses:
        "200":
          description: putSecrets 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiSecretMeta"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/namespaces/{namespace}/secrets/{key}:
    delete:
      tags:
      - Namespaces
      summary: Delete a secret for a namespace
      operationId: deleteSecret
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The secret key
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteSecret 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
      - bearerAuth: []
      - basicAuth: []
    patch:
      tags:
      - Namespaces
      summary: Patch a secret metadata for a namespace
      operationId: patchSecret
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiSecretMetaEE"
        required: true
      responses:
        "200":
          description: patchSecret 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiSecretMeta"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/roles:
    post:
      tags:
      - Roles
      summary: Create a role
      operationId: createRole
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMRoleController.ApiRoleCreateOrUpdateRequest"
        required: true
      responses:
        "200":
          description: Role successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMRoleController.ApiRoleDetail"
        "403":
          description: Insufficient privileges to create the role
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/roles/autocomplete:
    post:
      tags:
      - Roles
      summary: List roles for autocomplete
      operationId: autocompleteRoles
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Autocomplete request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocompleteRoles 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiRoleSummary"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/roles/ids:
    post:
      tags:
      - Roles
      summary: List roles by ids
      operationId: listRolesFromGivenIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The ids that must be present on results
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
        required: true
      responses:
        "200":
          description: listRolesFromGivenIds 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/roles/search:
    get:
      tags:
      - Roles
      summary: Search for roles
      operationId: searchRoles
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchRoles 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ApiRoleSummary_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/roles/{id}:
    get:
      tags:
      - Roles
      summary: Retrieve a role
      operationId: getRole
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Role not found
        "200":
          description: getRole 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMRoleController.ApiRoleDetail"
      security:
      - bearerAuth: []
      - basicAuth: []
    put:
      tags:
      - Roles
      summary: Update a role
      operationId: updateRole
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMRoleController.ApiRoleCreateOrUpdateRequest"
        required: true
      responses:
        "200":
          description: Role successfully updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMRoleController.ApiRoleDetail"
        "404":
          description: Role not found
        "403":
          description: Insufficient privileges to update the role
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Roles
      summary: Delete a role
      operationId: deleteRole
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/security-integrations:
    get:
      tags:
      - SecurityIntegrations
      summary: List all security integrations
      description: Superadmin-only.
      operationId: listSecurityIntegrations
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listSecurityIntegrations 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
    post:
      tags:
      - SecurityIntegrations
      summary: Create a security integration
      description: Superadmin-only.
      operationId: createSecurityIntegration
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The security integration definition
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSecurityIntegrationRequest"
        required: true
      responses:
        "200":
          description: createSecurityIntegration 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/security-integrations/{id}:
    get:
      tags:
      - SecurityIntegrations
      summary: Retrieve a security integration
      description: Superadmin-only.
      operationId: getSecurityIntegration
      parameters:
      - name: id
        in: path
        description: The ID of security integration
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getSecurityIntegration 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - SecurityIntegrations
      summary: Delete a security integration
      description: Superadmin-only.
      operationId: deleteSecurityIntegration
      parameters:
      - name: id
        in: path
        description: The ID of security integration
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteSecurityIntegration 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/security-integrations/{id}/disable:
    post:
      tags:
      - SecurityIntegrations
      summary: Disable a security integration
      description: Superadmin-only. Disables the specified integration.
      operationId: disableSecurityIntegration
      parameters:
      - name: id
        in: path
        description: The ID of security integration
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: disableSecurityIntegration 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/security-integrations/{id}/enable:
    post:
      tags:
      - SecurityIntegrations
      summary: Enable a security integration
      description: Superadmin-only. Enables the specified integration.
      operationId: enableSecurityIntegration
      parameters:
      - name: id
        in: path
        description: The ID of security integration
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: enableSecurityIntegration 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/service-accounts:
    post:
      tags:
      - ServiceAccount
      summary: Create a user service account
      operationId: createServiceAccount
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The service account
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMServiceAccountController.ApiServiceAccountRequest"
        required: true
      responses:
        "200":
          description: Service account successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMServiceAccountController.ApiServiceAccountResponse"
        "404":
          description: Group not found
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/service-accounts/{id}:
    get:
      tags:
      - ServiceAccount
      summary: Retrieve a service account
      operationId: getServiceAccount
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Service account not found
        "200":
          description: getServiceAccount 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMServiceAccountController.ApiServiceAccountResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
    put:
      tags:
      - ServiceAccount
      summary: Update a user service account
      operationId: updateServiceAccount
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMServiceAccountController.ApiServiceAccountRequest"
        required: true
      responses:
        "404":
          description: "Service account, or group not found"
        "200":
          description: updateServiceAccount 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMServiceAccountController.ApiServiceAccountResponse"
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - ServiceAccount
      summary: Delete a service account
      operationId: deleteServiceAccount
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: Service account
        "200":
          description: deleteServiceAccount 200 response
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/service-accounts/{id}/api-tokens:
    get:
      tags:
      - Users
      summary: List API tokens for a specific user
      operationId: listApiTokens_1
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listApiTokens_1 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
    post:
      tags:
      - Users
      summary: Create new API Token for a specific user
      operationId: createApiTokensForUser_1
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The create api-token request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiTokenRequest"
        required: true
      responses:
        "200":
          description: createApiTokensForUser_1 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/service-accounts/{id}/api-tokens/{tokenId}:
    delete:
      tags:
      - Users
      summary: Delete an API Token for specific user and token id
      operationId: deleteApiToken_1
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken_1 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/stats/generate-reports:
    get:
      operationId: generate
      parameters:
      - name: from
        in: query
        description: The start date
        schema:
          type: string
          format: date
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: generate 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: byte
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/taskruns/search:
    get:
      tags:
      - Executions
      summary: "Search for taskruns, only available with the Elasticsearch repository"
      operationId: searchTaskRun
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: filters
        in: query
        description: Filters
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/QueryFilter"
      - name: q
        in: query
        description: A string filter
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        deprecated: true
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        deprecated: true
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        deprecated: true
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        deprecated: true
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        deprecated: true
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchTaskRun 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_TaskRun_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/tenant-access:
    get:
      tags:
      - Tenant Access
      summary: Retrieve users belonging to the tenant
      operationId: listTenantAccess
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: The type of user
        explode: false
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/UserType"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listTenantAccess 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_IAMTenantAccessController.ApiUserTenantAccess_"
      security:
      - bearerAuth: []
      - basicAuth: []
    post:
      tags:
      - Tenant Access
      summary: Create tenant access for a user
      description: Grants tenant access permissions to a user identified by email
      operationId: createTenantAccess
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMTenantAccessController.ApiCreateTenantAccessRequest"
        required: true
      responses:
        "204":
          description: Access successfully created
        "404":
          description: User not found
        "409":
          description: User already has access to the tenant
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/tenant-access/autocomplete:
    post:
      tags:
      - Users
      summary: List users for autocomplete
      operationId: autocompleteUsers
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: Autocomplete request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMTenantAccessController.UserApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocompleteUsers 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IAMTenantAccessController.ApiUserTenantAccess"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/tenant-access/{userId}:
    get:
      tags:
      - Tenant Access
      summary: Retrieve tenant access for a user
      description: Fetches the tenant access configuration for a given user
      operationId: getTenantAccess
      parameters:
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Tenant access successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IAMTenantAccessController.ApiTenantAccess"
        "404":
          description: "User, or tenant access not found"
      security:
      - bearerAuth: []
      - basicAuth: []
    put:
      tags:
      - Tenant Access
      summary: Create tenant access for a user
      description: Grants tenant access permissions to a user identified by userId
      operationId: createTenantAccess_1
      parameters:
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "201":
          description: Access successfully created
        "404":
          description: User not found
      security:
      - bearerAuth: []
      - basicAuth: []
    delete:
      tags:
      - Tenant Access
      summary: Delete tenant access for a user
      description: Removes tenant access permissions for the specified user
      operationId: deleteTenantAccess
      parameters:
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: Access successfully deleted
        "404":
          description: "User, or tenant access not found"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/tests:
    post:
      tags:
      - TestSuites
      summary: Create a test from YAML source
      description: Creates a new test from a YAML definition. Requires TEST permission
        with the CREATE action.
      operationId: createTestSuite
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The TestSuite source code
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: createTestSuite 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestSuite"
  /api/v1/{tenant}/tests/by-ids:
    delete:
      tags:
      - TestSuites
      summary: Delete multiple tests by id
      description: Deletes a test by namespace and ID. Requires TEST permission with
        the DELETE action.
      operationId: deleteTestSuitesByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestSuiteController.TestSuiteBulkRequest"
        required: true
      responses:
        "200":
          description: deleteTestSuitesByIds 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/{tenant}/tests/disable/by-ids:
    post:
      tags:
      - TestSuites
      summary: Disable multiple tests by id
      description: Disable a test by namespace and ID. Requires TEST permission with
        the UPDATE action.
      operationId: disableTestSuitesByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestSuiteController.TestSuiteBulkRequest"
        required: true
      responses:
        "200":
          description: disableTestSuitesByIds 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/{tenant}/tests/enable/by-ids:
    post:
      tags:
      - TestSuites
      summary: Enable multiple tests by id
      description: Enable a test by namespace and ID. Requires TEST permission with
        the UPDATE action.
      operationId: enableTestSuitesByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestSuiteController.TestSuiteBulkRequest"
        required: true
      responses:
        "200":
          description: enableTestSuitesByIds 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/{tenant}/tests/results/search/last:
    post:
      tags:
      - TestSuites
      summary: Get tests last result
      description: Get multiple tests last result for a query.
      operationId: getTestsLastResult
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestSuiteController.SearchTestsLastResult"
        required: true
      responses:
        "200":
          description: getTestsLastResult 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestSuiteController.TestsLastResultResponse"
  /api/v1/{tenant}/tests/results/{id}:
    get:
      tags:
      - TestSuites
      summary: Get a test result
      description: Get a test result once it was run.
      operationId: getTestResult
      parameters:
      - name: id
        in: path
        description: The test run ID
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getTestResult 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestSuiteRunResult"
  /api/v1/{tenant}/tests/search:
    get:
      tags:
      - TestSuites
      summary: Search for tests
      description: Searches for tests with optional filtering by namespace and flow
        ID. Requires TEST permission with the READ action.
      operationId: searchTestSuites
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: namespace
        in: query
        description: The namespace to filter on
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: The flow id to filter on
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchTestSuites 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_TestSuite_"
  /api/v1/{tenant}/tests/validate:
    post:
      tags:
      - TestSuites
      summary: Validate a test
      description: Validates a test YAML definition without persisting it. Returns
        constraint violations if any. Requires TEST permission with the READ action.
      operationId: validateTestSuite
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The TestSuite source code
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateTestSuite 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/{tenant}/tests/{namespace}/{id}:
    get:
      tags:
      - TestSuites
      summary: Retrieve a test
      description: Retrieves a test by namespace and ID. Requires TEST permission
        with the READ action.
      operationId: getTestSuite
      parameters:
      - name: namespace
        in: path
        description: The TestSuite namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The TestSuite ID
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getTestSuite 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestSuite"
    put:
      tags:
      - TestSuites
      summary: Update a test from YAML source
      description: Updates an existing test with a new YAML definition. Requires TEST
        permission with the UPDATE action.
      operationId: updateTestSuite
      parameters:
      - name: namespace
        in: path
        description: The TestSuite namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The TestSuite ID
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The TestSuite source code
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: updateTestSuite 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestSuite"
    delete:
      tags:
      - TestSuites
      summary: Delete a test
      description: Deletes a test by namespace and ID. Requires TEST permission with
        the DELETE action.
      operationId: deleteTestSuite
      parameters:
      - name: namespace
        in: path
        description: The TestSuite namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The TestSuite ID
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteTestSuite 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/tests/{namespace}/{id}/run:
    post:
      tags:
      - TestSuites
      summary: Run a full test
      description: Executes all test cases in the specified test. Requires TEST permission
        with the CREATE action.
      operationId: runTestSuite
      parameters:
      - name: namespace
        in: path
        description: The TestSuite namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The TestSuite ID
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: runTestSuite 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TestSuiteRunResult"
  /api/v1/{tenant}/triggers:
    put:
      tags:
      - Triggers
      summary: Update a trigger
      operationId: updateTrigger
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: updateTrigger 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/backfill/delete:
    post:
      tags:
      - Triggers
      summary: Delete a backfill
      operationId: deleteBackfill
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: deleteBackfill 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/backfill/delete/by-query:
    post:
      tags:
      - Triggers
      summary: Delete backfill for given triggers
      operationId: deleteBackfillByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: deleteBackfillByQuery 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/backfill/delete/by-triggers:
    post:
      tags:
      - Triggers
      summary: Delete backfill for given triggers
      operationId: deleteBackfillByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: deleteBackfillByIds 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/backfill/pause:
    put:
      tags:
      - Triggers
      summary: Pause a backfill
      operationId: pauseBackfill
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: pauseBackfill 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/backfill/pause/by-query:
    post:
      tags:
      - Triggers
      summary: Pause backfill for given triggers
      operationId: pauseBackfillByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: pauseBackfillByQuery 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/backfill/pause/by-triggers:
    post:
      tags:
      - Triggers
      summary: Pause backfill for given triggers
      operationId: pauseBackfillByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: pauseBackfillByIds 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/backfill/unpause:
    put:
      tags:
      - Triggers
      summary: Unpause a backfill
      operationId: unpauseBackfill
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: unpauseBackfill 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/backfill/unpause/by-query:
    post:
      tags:
      - Triggers
      summary: Unpause backfill for given triggers
      operationId: unpauseBackfillByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: unpauseBackfillByQuery 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/backfill/unpause/by-triggers:
    post:
      tags:
      - Triggers
      summary: Unpause backfill for given triggers
      operationId: unpauseBackfillByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: unpauseBackfillByIds 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/search:
    get:
      tags:
      - Triggers
      summary: Search for triggers
      operationId: searchTriggers
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: filters
        in: query
        description: Filters
        explode: false
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/QueryFilter"
      - name: q
        in: query
        description: A string filter
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: workerId
        in: query
        description: The identifier of the worker currently evaluating the trigger
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: The flow identifier
        deprecated: true
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchTriggers 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_TriggerController.Triggers_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/set-disabled/by-query:
    post:
      tags:
      - Triggers
      summary: Disable/enable triggers by query parameters
      operationId: disabledTriggersByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: disabled
        in: query
        description: The disabled state
        required: true
        explode: false
        schema:
          type: boolean
          default: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: disabledTriggersByQuery 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/set-disabled/by-triggers:
    post:
      tags:
      - Triggers
      summary: Disable/enable given triggers
      operationId: disabledTriggersByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TriggerController.SetDisabledRequest"
        required: true
      responses:
        "200":
          description: disabledTriggersByIds 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/unlock/by-query:
    post:
      tags:
      - Triggers
      summary: Unlock triggers by query parameters
      operationId: unlockTriggersByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        explode: false
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                filters:
                  type: array
                  description: Filters
                  nullable: true
                  items:
                    $ref: "#/components/schemas/QueryFilter"
        required: true
      responses:
        "200":
          description: unlockTriggersByQuery 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/unlock/by-triggers:
    post:
      tags:
      - Triggers
      summary: Unlock given triggers
      operationId: unlockTriggersByIds
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: unlockTriggersByIds 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/{namespace}/{flowId}:
    get:
      tags:
      - Triggers
      summary: Get all triggers for a flow
      operationId: searchTriggersForFlow
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        explode: false
        schema:
          minimum: 1
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        explode: false
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        explode: false
        schema:
          type: string
          nullable: true
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
          nullable: true
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: searchTriggersForFlow 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Trigger_"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/{namespace}/{flowId}/{triggerId}/restart:
    post:
      tags:
      - Triggers
      summary: Restart a trigger
      operationId: restartTrigger
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: triggerId
        in: path
        description: The trigger id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: restartTrigger 200 response
          content:
            application/json:
              schema:
                type: object
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/triggers/{namespace}/{flowId}/{triggerId}/unlock:
    post:
      tags:
      - Triggers
      summary: Unlock a trigger
      operationId: unlockTrigger
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: triggerId
        in: path
        description: The trigger id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: unlockTrigger 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/usages:
    get:
      tags:
      - Misc
      summary: Retrieve usage information for the current tenant
      operationId: tenantUsage
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: tenantUsage 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsageEE"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/usages/all:
    get:
      tags:
      - Misc
      summary: Retrieve instance usage information
      operationId: getUsages
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getUsages 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usage"
      security:
      - bearerAuth: []
      - basicAuth: []
  /api/v1/{tenant}/users/{id}/groups:
    put:
      tags:
      - Users
      summary: Update the list of groups a user belongs to for the given tenant
      operationId: updateUserGroups
      parameters:
      - name: id
        in: path
        description: The user ID
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IAMUserGroupController.ApiUpdateUserGroupsRequest"
        required: true
      responses:
        "204":
          description: User's groups successfully updated
        "404":
          description: User or one of the groups not found
        "400":
          description: Invalid request payload
      security:
      - bearerAuth: []
      - basicAuth: []
  /login:
    post:
      operationId: login
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/UsernamePasswordCredentials"
          application/json:
            schema:
              $ref: "#/components/schemas/UsernamePasswordCredentials"
        required: true
      responses:
        "200":
          description: login 200 response
          content:
            application/json:
              schema:
                type: object
components:
  schemas:
    AbstractFlow:
      required:
      - deleted
      - disabled
      - id
      - namespace
      type: object
      properties:
        id:
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9._-]*"
          type: string
        namespace:
          maxLength: 150
          minLength: 1
          pattern: "^[a-z0-9][a-z0-9._-]*"
          type: string
        revision:
          minimum: 1
          type: integer
          format: int32
        inputs:
          type: array
          items:
            $ref: "#/components/schemas/Input_Object_"
        outputs:
          type: array
          items:
            $ref: "#/components/schemas/Output"
        disabled:
          type: boolean
        labels:
          oneOf:
          - type: array
          - $ref: "#/components/schemas/Map_Object.Object_"
        variables:
          type: object
          additionalProperties: true
        workerGroup:
          $ref: "#/components/schemas/WorkerGroup"
        deleted:
          type: boolean
    AbstractGraph:
      type: object
      properties:
        uid:
          type: string
        type:
          type: string
        branchType:
          $ref: "#/components/schemas/AbstractGraph.BranchType"
    AbstractGraph.BranchType:
      type: string
      enum:
      - ERROR
      - FINALLY
      - AFTER_EXECUTION
    AbstractMetricEntry_Object_:
      required:
      - name
      type: object
      properties:
        type:
          type: string
        value:
          type: object
        name:
          type: string
        description:
          type: string
        tags:
          type: object
          additionalProperties:
            type: string
        timestamp:
          type: string
          format: date-time
    AbstractRetry:
      type: object
    AbstractTrigger:
      required:
      - disabled
      - id
      - type
      type: object
      properties:
        minLogLevel:
          deprecated: true
          allOf:
          - $ref: "#/components/schemas/Level"
        id:
          title: A unique ID for the whole flow.
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          title: The class name for this current trigger.
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
        version:
          title: The version of the plugin to use.
          pattern: "\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9-]+)?|([a-zA-Z0-9]+)"
          type: string
        description:
          type: string
        conditions:
          title: List of conditions in order to limit the flow trigger.
          type: array
          items:
            $ref: "#/components/schemas/Condition"
        disabled:
          type: boolean
        workerGroup:
          $ref: "#/components/schemas/WorkerGroup"
        logLevel:
          $ref: "#/components/schemas/Level"
        labels:
          title: The labels to pass to the execution created.
          oneOf:
          - type: array
          - $ref: "#/components/schemas/Map_Object.Object_"
        stopAfter:
          title: List of execution states after which a trigger should be stopped
            (a.k.a. disabled).
          type: array
          items:
            $ref: "#/components/schemas/State.Type"
        logToFile:
          type: boolean
        failOnTriggerError:
          type: boolean
    AbstractTriggerForExecution:
      required:
      - id
      - type
      type: object
      properties:
        id:
          title: A unique ID for the whole flow.
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          title: The class name for this current trigger.
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
        version:
          title: The version of the plugin to use.
          pattern: "\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9-]+)?|([a-zA-Z0-9]+)"
          type: string
    AbstractUser:
      required:
      - email
      - type
      - username
      type: object
      properties:
        type:
          $ref: "#/components/schemas/UserType"
        groupList:
          type: array
          items:
            $ref: "#/components/schemas/GroupIdentifier"
        groups:
          type: array
          items:
            type: object
        username:
          type: string
        email:
          pattern: "^$|^[a-zA-Z0-9_!#$%&’*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$"
          type: string
        superAdmin:
          type: boolean
        id:
          type: string
        name:
          type: string
        description:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        providers:
          type: array
          items:
            $ref: "#/components/schemas/AbstractUser.TenantIdentityProvider"
    AbstractUser.TenantIdentityProvider:
      type: object
      allOf:
      - $ref: "#/components/schemas/IdentityProvider"
      - type: object
        properties:
          tenantId:
            type: string
            nullable: true
    Action:
      type: string
      enum:
      - READ
      - CREATE
      - UPDATE
      - DELETE
    ApiAuth:
      required:
      - name
      - type
      - uid
      type: object
      properties:
        uid:
          type: string
        type:
          type: string
        name:
          type: string
    ApiAutocomplete:
      type: object
      properties:
        q:
          type: string
          nullable: true
        ids:
          type: array
          nullable: true
          items:
            type: string
    ApiGroupSummary:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    ApiIds:
      required:
      - ids
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
    ApiRoleSummary:
      required:
      - id
      - isDefault
      - isManaged
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        isDefault:
          type: boolean
        isManaged:
          type: boolean
    ApiSecretListResponse:
      required:
      - readOnly
      - results
      - total
      type: object
      properties:
        readOnly:
          type: boolean
        results:
          type: array
          items:
            $ref: "#/components/schemas/ApiSecretMeta"
        total:
          type: integer
          format: int64
    ApiSecretMeta:
      required:
      - key
      type: object
      properties:
        key:
          type: string
    ApiSecretMetaEE:
      required:
      - description
      - tags
      type: object
      properties:
        description:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/ApiSecretTag"
      allOf:
      - $ref: "#/components/schemas/ApiSecretMeta"
    ApiSecretTag:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ApiSecretValue:
      required:
      - description
      - key
      - tags
      - value
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: "#/components/schemas/ApiSecretTag"
        key:
          minLength: 1
          type: string
        value:
          minLength: 1
          type: string
        description:
          type: string
    ApiTenant:
      required:
      - deleted
      - logo
      type: object
      allOf:
      - $ref: "#/components/schemas/Tenant"
      - type: object
        properties:
          deleted:
            type: boolean
          logo:
            type: string
    ApiUser:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractUser"
      - type: object
        properties:
          auths:
            type: array
            items:
              $ref: "#/components/schemas/ApiAuth"
    AppResponse:
      required:
      - dispatch
      - layout
      - stream
      type: object
      properties:
        dispatch:
          type: string
        stream:
          type: string
        layout:
          $ref: "#/components/schemas/AppResponse.UILayout"
    AppResponse.UIBlock:
      type: object
    AppResponse.UILayout:
      required:
      - blocks
      type: object
      properties:
        blocks:
          type: array
          items:
            $ref: "#/components/schemas/AppResponse.UIBlock"
    AppsController.ApiApp:
      required:
      - created
      - enabled
      - id
      - name
      - namespace
      - tags
      - type
      - uid
      - updated
      type: object
      properties:
        uid:
          type: string
        id:
          type: string
        name:
          type: string
        type:
          type: string
        namespace:
          type: string
        tags:
          type: array
          items:
            type: string
        enabled:
          type: boolean
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    AppsController.ApiAppCatalogItem:
      required:
      - description
      - name
      - tags
      - type
      - uid
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        description:
          type: string
        type:
          type: string
        tags:
          type: array
          items:
            type: string
    AppsController.ApiAppSource:
      required:
      - created
      - disabled
      - name
      - namespace
      - source
      - tags
      - uid
      - updated
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        namespace:
          type: string
        tags:
          type: array
          items:
            type: string
        disabled:
          type: boolean
        source:
          type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
    AppsController.ApiAppTags:
      required:
      - tags
      type: object
      properties:
        tags:
          type: array
          items:
            type: string
    AppsController.ApiBulkImportResponse:
      required:
      - errors
      - success
      type: object
      properties:
        success:
          type: array
          items:
            type: string
        errors:
          type: array
          items:
            $ref: "#/components/schemas/AppsController.ApiBulkImportResponse.Error"
    AppsController.ApiBulkImportResponse.Error:
      required:
      - message
      - source
      type: object
      properties:
        source:
          type: string
        message:
          type: string
    AppsController.ApiBulkOperationRequest:
      required:
      - uids
      type: object
      properties:
        uids:
          type: array
          items:
            type: string
    Assertion:
      required:
      - value
      type: object
      properties:
        value:
          $ref: "#/components/schemas/Property_Object_"
        taskId:
          type: string
        errorMessage:
          $ref: "#/components/schemas/Property_String_"
        description:
          $ref: "#/components/schemas/Property_String_"
        endsWith:
          $ref: "#/components/schemas/Property_String_"
        startsWith:
          $ref: "#/components/schemas/Property_String_"
        contains:
          $ref: "#/components/schemas/Property_String_"
        equalTo:
          $ref: "#/components/schemas/Property_Object_"
        notEqualTo:
          $ref: "#/components/schemas/Property_Object_"
        greaterThan:
          $ref: "#/components/schemas/Property_Double_"
        greaterThanOrEqualTo:
          $ref: "#/components/schemas/Property_Double_"
        lessThan:
          $ref: "#/components/schemas/Property_Double_"
        lessThanOrEqualTo:
          $ref: "#/components/schemas/Property_Double_"
        in:
          $ref: "#/components/schemas/Property_List_String__"
        notIn:
          $ref: "#/components/schemas/Property_List_String__"
        isNull:
          $ref: "#/components/schemas/Property_Boolean_"
        isNotNull:
          $ref: "#/components/schemas/Property_Boolean_"
    AssertionResult:
      required:
      - actual
      - description
      - errorMessage
      - expected
      - isSuccess
      - operator
      - taskId
      type: object
      properties:
        operator:
          type: string
        expected:
          type: object
        actual:
          type: object
        isSuccess:
          type: boolean
        taskId:
          type: string
        description:
          type: string
        errorMessage:
          type: string
    AssertionRunError:
      required:
      - details
      - message
      type: object
      properties:
        message:
          type: string
        details:
          type: string
    AttributeReference:
      type: object
      properties:
        fullAttributeName:
          type: string
        fullyQualifiedAttributeName:
          type: string
        attributeBase:
          type: string
        urn:
          type: string
        attributeName:
          type: string
        subAttributeName:
          type: string
    AuditLog:
      required:
      - appliedPatch
      - revertPatch
      type: object
      allOf:
      - $ref: "#/components/schemas/BaseAuditLog"
      - type: object
        properties:
          deleted:
            type: boolean
          appliedPatch:
            type: array
            items:
              type: object
          revertPatch:
            type: array
            items:
              type: object
    AuditLogController.AuditLogDiff:
      required:
      - after
      - before
      type: object
      properties:
        before:
          type: string
        after:
          type: string
    AuditLogController.AuditLogOption:
      required:
      - date
      - id
      - username
      type: object
      properties:
        id:
          type: string
        date:
          type: string
          format: date-time
        username:
          type: string
    AuditLogController.AuditLogWithUser:
      required:
      - auditLog
      - user
      type: object
      properties:
        auditLog:
          $ref: "#/components/schemas/AuditLog"
        user:
          $ref: "#/components/schemas/ApiUser"
    AuditLogController.FindRequest:
      required:
      - detail
      - permission
      type: object
      properties:
        permission:
          $ref: "#/components/schemas/Permission"
        type:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/CrudEventType"
        detail:
          type: object
          additionalProperties:
            type: object
    AuditLogDetail:
      required:
      - cls
      - permission
      - type
      type: object
      properties:
        type:
          type: string
        cls:
          type: string
        permission:
          $ref: "#/components/schemas/Permission"
        id:
          type: string
    AuthController.Auth:
      type: object
      properties:
        loginPassword:
          type: boolean
        mailsEnabled:
          type: boolean
        oauths:
          type: array
          items:
            type: string
    AuthController.InvitationUserRequest:
      required:
      - firstName
      - lastName
      - password
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
    AuthController.ResetPasswordRequest:
      required:
      - password
      - token
      type: object
      properties:
        token:
          type: string
        password:
          type: string
    Backfill:
      title: A backfill configuration.
      required:
      - start
      type: object
      properties:
        start:
          title: The start date.
          type: string
          format: date-time
        end:
          title: The end date.
          type: string
          format: date-time
        currentDate:
          title: The current date of the backfill being done.
          type: string
          format: date-time
        paused:
          title: Whether the backfill is paused.
          type: boolean
        inputs:
          title: The inputs to pass to the backfilled executions.
          type: object
          additionalProperties:
            type: object
        labels:
          title: The labels to pass to the backfilled executions.
          type: array
          items:
            $ref: "#/components/schemas/Label"
        previousNextExecutionDate:
          title: The nextExecutionDate before the backfill was created.
          type: string
          format: date-time
    Banner:
      required:
      - message
      type: object
      properties:
        id:
          type: string
        message:
          type: string
        type:
          $ref: "#/components/schemas/Banner.Type"
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        tenantId:
          type: string
          nullable: true
        active:
          type: boolean
    Banner.Type:
      type: string
      enum:
      - INFO
      - WARNING
      - ERROR
    BaseAuditLog:
      required:
      - date
      - deleted
      - detail
      - id
      - impersonatedBy
      - ipAddress
      - type
      - userId
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/CrudEventType"
        detail:
          $ref: "#/components/schemas/AuditLogDetail"
        date:
          type: string
          format: date-time
        userId:
          type: string
        ipAddress:
          type: string
        impersonatedBy:
          type: string
        deleted:
          type: boolean
    BaseResource_PatchRequest_:
      type: object
      properties:
        schemas:
          minItems: 1
          type: array
          items:
            type: string
    BaseResource_ScimResource_:
      type: object
      properties:
        schemas:
          minItems: 1
          type: array
          items:
            type: string
    BaseResource_SearchRequest_:
      type: object
      properties:
        schemas:
          minItems: 1
          type: array
          items:
            type: string
    Binding:
      required:
      - deleted
      - externalId
      - id
      - namespaceId
      - roleId
      - type
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/Binding.Type"
        externalId:
          type: string
        roleId:
          type: string
        namespaceId:
          type: string
        deleted:
          type: boolean
    Binding.Type:
      type: string
      enum:
      - USER
      - GROUP
    Blueprint:
      required:
      - deleted
      - description
      - id
      - includedTasks
      - publishedAt
      - tags
      - title
      type: object
      properties:
        id:
          type: string
        title:
          maxLength: 150
          minLength: 1
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        includedTasks:
          type: array
          items:
            type: string
        publishedAt:
          type: string
          format: date-time
        deleted:
          type: boolean
    BlueprintController.ApiBlueprintItem:
      required:
      - description
      - id
      - includedTasks
      - publishedAt
      - tags
      - title
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        includedTasks:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        publishedAt:
          type: string
          format: date-time
    BlueprintController.ApiBlueprintItemWithSource:
      type: object
      allOf:
      - $ref: "#/components/schemas/BlueprintController.ApiBlueprintItem"
      - type: object
        properties:
          source:
            type: string
          kind:
            $ref: "#/components/schemas/BlueprintController.Kind"
    BlueprintController.ApiBlueprintTagItem:
      required:
      - id
      - name
      - publishedAt
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        publishedAt:
          type: string
          format: date-time
    BlueprintController.Kind:
      type: string
      enum:
      - APP
      - DASHBOARD
      - FLOW
    BlueprintWithFlow:
      required:
      - deleted
      - flow
      type: object
      allOf:
      - $ref: "#/components/schemas/Blueprint"
      - type: object
        properties:
          deleted:
            type: boolean
          flow:
            minLength: 1
            type: string
    Breakpoint:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        value:
          type: string
          nullable: true
    BulkErrorResponse:
      type: object
      properties:
        message:
          type: string
        invalids:
          type: object
    BulkResponse:
      type: object
      properties:
        count:
          type: integer
          format: int32
    Cache:
      required:
      - enabled
      type: object
      properties:
        enabled:
          type: boolean
        ttl:
          type: string
    ChartFiltersOverrides:
      type: object
      properties:
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        namespace:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
        filters:
          type: array
          items:
            $ref: "#/components/schemas/QueryFilter"
    Chart_ChartOption_:
      required:
      - id
      - type
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
        chartOptions:
          type: object
    Concurrency:
      required:
      - behavior
      - limit
      type: object
      properties:
        limit:
          minimum: 1
          type: integer
          format: int32
        behavior:
          $ref: "#/components/schemas/Concurrency.Behavior"
    Concurrency.Behavior:
      type: string
      enum:
      - QUEUE
      - CANCEL
      - FAIL
    Condition:
      required:
      - type
      type: object
      properties:
        type:
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
    ConfigurationUsage:
      type: object
      properties:
        repositoryType:
          type: string
        queueType:
          type: string
        storageType:
          type: string
        secretType:
          type: string
        javaSecurityEnabled:
          type: boolean
    ConversionService:
      type: object
    ConversionServiceProvider:
      required:
      - conversionService
      type: object
      properties:
        conversionService:
          $ref: "#/components/schemas/ConversionService"
    ConvertibleMultiValues_String_:
      type: object
      allOf:
      - $ref: "#/components/schemas/ConvertibleValues_List_String__"
      - $ref: "#/components/schemas/ConversionServiceProvider"
      - type: object
        properties:
          empty:
            type: boolean
    ConvertibleValues_List_String__:
      type: object
      allOf:
      - $ref: "#/components/schemas/ConversionServiceProvider"
      - type: object
        properties:
          empty:
            type: boolean
          conversionService:
            $ref: "#/components/schemas/ConversionService"
    CreateApiTokenRequest:
      required:
      - description
      - extended
      - maxAge
      - name
      type: object
      properties:
        name:
          pattern: "^(?=.{1,63}$)[a-z0-9]+(?:-[a-z0-9]+)*$"
          type: string
        description:
          type: string
        maxAge:
          type: string
        extended:
          type: boolean
    CreateApiTokenResponse:
      required:
      - fullToken
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        fullToken:
          type: string
    CreateSecurityIntegrationRequest:
      required:
      - description
      - name
      - type
      type: object
      properties:
        name:
          pattern: "^(?=.{1,63}$)[a-z0-9]+(?:-[a-z0-9]+)*$"
          type: string
          description: The name of security integration.
        description:
          type: string
          description: The description of security integration.
        type:
          $ref: "#/components/schemas/SecurityIntegration.Type"
      description: Create SecurityIntegration Request
    CrudEventType:
      type: string
      enum:
      - READ
      - CREATE
      - UPDATE
      - DELETE
      - LOGIN
      - LOGOUT
      - IMPERSONATE
      - LOGIN_FAILURE
      - ACCOUNT_LOCKED
    CustomLink:
      required:
      - name
      - title
      - url
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        url:
          type: string
    DailyExecutionStatistics:
      required:
      - duration
      - executionCounts
      - groupBy
      - startDate
      type: object
      properties:
        startDate:
          type: string
          format: date-time
        duration:
          $ref: "#/components/schemas/DailyExecutionStatistics.Duration"
        executionCounts:
          type: object
          properties:
            CREATED:
              type: integer
              format: int64
            RUNNING:
              type: integer
              format: int64
            PAUSED:
              type: integer
              format: int64
            RESTARTED:
              type: integer
              format: int64
            KILLING:
              type: integer
              format: int64
            SUCCESS:
              type: integer
              format: int64
            WARNING:
              type: integer
              format: int64
            FAILED:
              type: integer
              format: int64
            KILLED:
              type: integer
              format: int64
            CANCELLED:
              type: integer
              format: int64
            QUEUED:
              type: integer
              format: int64
            RETRYING:
              type: integer
              format: int64
            RETRIED:
              type: integer
              format: int64
            SKIPPED:
              type: integer
              format: int64
            BREAKPOINT:
              type: integer
              format: int64
        groupBy:
          type: string
    DailyExecutionStatistics.Duration:
      required:
      - avg
      - count
      - max
      - min
      - sum
      type: object
      properties:
        min:
          type: string
        avg:
          type: string
        max:
          type: string
        sum:
          type: string
        count:
          type: integer
          format: int64
    Dashboard:
      required:
      - title
      type: object
      properties:
        title:
          minLength: 1
          type: string
        description:
          type: string
        timeWindow:
          $ref: "#/components/schemas/TimeWindow"
        charts:
          type: array
          items:
            $ref: "#/components/schemas/Chart_ChartOption_"
        sourceCode:
          type: string
    DashboardController.PreviewRequest:
      required:
      - chart
      type: object
      properties:
        chart:
          minLength: 1
          type: string
        globalFilter:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ChartFiltersOverrides"
    DeletedInterface:
      type: object
      properties:
        deleted:
          type: boolean
    DependsOn:
      type: object
      properties:
        inputs:
          type: array
          nullable: true
          items:
            type: string
        condition:
          type: string
          nullable: true
    DocumentationWithSchema:
      type: object
      properties:
        markdown:
          type: string
        schema:
          $ref: "#/components/schemas/PluginSchema"
    Email:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
        primary:
          type: boolean
      description: Scim core schema.
    Event_AppResponse_:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AppResponse"
        id:
          type: string
        name:
          type: string
        comment:
          type: string
        retry:
          type: string
    Event_ExecutionStatusEvent_:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ExecutionStatusEvent"
        id:
          type: string
        name:
          type: string
        comment:
          type: string
        retry:
          type: string
    Event_Execution_:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Execution"
        id:
          type: string
        name:
          type: string
        comment:
          type: string
        retry:
          type: string
    Event_LogEntry_:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/LogEntry"
        id:
          type: string
        name:
          type: string
        comment:
          type: string
        retry:
          type: string
    ExecutableTask.SubflowId:
      required:
      - flowId
      - namespace
      type: object
      properties:
        namespace:
          type: string
        flowId:
          type: string
        revision:
          type: integer
          format: int32
          nullable: true
    Execution:
      required:
      - deleted
      - flowId
      - flowRevision
      - id
      - inputs
      - labels
      - metadata
      - namespace
      - originalId
      - outputs
      - parentId
      - state
      - taskRunList
      - traceParent
      - trigger
      - variables
      type: object
      properties:
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
        id:
          type: string
        namespace:
          type: string
        flowId:
          type: string
        flowRevision:
          type: integer
          format: int32
        taskRunList:
          type: array
          items:
            $ref: "#/components/schemas/TaskRun"
        inputs:
          type: object
          additionalProperties:
            type: object
        outputs:
          type: object
          additionalProperties:
            type: object
        variables:
          type: object
          additionalProperties:
            type: object
        state:
          $ref: "#/components/schemas/State"
        parentId:
          type: string
        originalId:
          type: string
        trigger:
          $ref: "#/components/schemas/ExecutionTrigger"
        deleted:
          type: boolean
        metadata:
          $ref: "#/components/schemas/ExecutionMetadata"
        scheduleDate:
          type: string
          format: date-time
          nullable: true
        traceParent:
          type: string
        fixtures:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/TaskFixture"
        kind:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionKind"
        breakpoints:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Breakpoint"
    ExecutionController.ApiValidateExecutionInputsResponse:
      required:
      - id
      - inputs
      - namespace
      type: object
      properties:
        id:
          type: string
        namespace:
          type: string
        inputs:
          type: array
          items:
            $ref: "#/components/schemas/ExecutionController.ApiValidateExecutionInputsResponse.ApiInputAndValue"
    ExecutionController.ApiValidateExecutionInputsResponse.ApiInputAndValue:
      required:
      - enabled
      - errors
      - input
      - value
      type: object
      properties:
        input:
          $ref: "#/components/schemas/Input_Object_"
        value:
          type: object
        enabled:
          type: boolean
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ExecutionController.ApiValidateExecutionInputsResponse.ApiInputError"
    ExecutionController.ApiValidateExecutionInputsResponse.ApiInputError:
      required:
      - message
      type: object
      properties:
        message:
          type: string
    ExecutionController.EvalResult:
      type: object
      properties:
        result:
          type: string
        error:
          type: string
        stackTrace:
          type: string
    ExecutionController.ExecutionResponse:
      required:
      - deleted
      - url
      type: object
      allOf:
      - $ref: "#/components/schemas/Execution"
      - type: object
        properties:
          deleted:
            type: boolean
          url:
            type: string
            format: uri
    ExecutionController.LastExecutionResponse:
      required:
      - flowId
      - id
      - namespace
      - startDate
      - status
      type: object
      properties:
        id:
          type: string
        flowId:
          type: string
        namespace:
          type: string
        startDate:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/State.Type"
    ExecutionController.SetLabelsByIdsRequest:
      required:
      - executionLabels
      - executionsId
      type: object
      properties:
        executionsId:
          type: array
          items:
            type: string
        executionLabels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
    ExecutionController.StateRequest:
      required:
      - state
      - taskRunId
      type: object
      properties:
        taskRunId:
          type: string
        state:
          $ref: "#/components/schemas/State.Type"
    ExecutionController.WebhookResponse:
      required:
      - flowId
      - flowRevision
      - id
      - labels
      - namespace
      - outputs
      - state
      - tenantId
      - trigger
      - url
      type: object
      properties:
        tenantId:
          type: string
        id:
          type: string
        namespace:
          type: string
        flowId:
          type: string
        flowRevision:
          type: integer
          format: int32
        trigger:
          $ref: "#/components/schemas/ExecutionTrigger"
        outputs:
          type: object
          additionalProperties:
            type: object
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
        state:
          $ref: "#/components/schemas/State"
        url:
          type: string
          format: uri
    ExecutionKind:
      type: string
      enum:
      - NORMAL
      - TEST
      - PLAYGROUND
    ExecutionMetadata:
      required:
      - attemptNumber
      - originalCreatedDate
      type: object
      properties:
        attemptNumber:
          type: integer
          format: int32
        originalCreatedDate:
          type: string
          format: date-time
    ExecutionRepositoryInterface.ChildFilter:
      type: string
      enum:
      - CHILD
      - MAIN
    ExecutionRepositoryInterface.FlowFilter:
      required:
      - id
      - namespace
      type: object
      properties:
        namespace:
          type: string
        id:
          type: string
    ExecutionStatusEvent:
      required:
      - executionId
      - flowId
      - namespace
      - state
      - tenantId
      type: object
      properties:
        executionId:
          type: string
        tenantId:
          type: string
        namespace:
          type: string
        flowId:
          type: string
        state:
          $ref: "#/components/schemas/State"
    ExecutionTrigger:
      required:
      - id
      - logFile
      - type
      - variables
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        variables:
          type: object
          additionalProperties:
            type: object
        logFile:
          type: string
          format: uri
    ExecutionUsage:
      type: object
      properties:
        dailyExecutionsCount:
          type: array
          items:
            $ref: "#/components/schemas/DailyExecutionStatistics"
        dailyTaskRunsCount:
          type: array
          items:
            $ref: "#/components/schemas/DailyExecutionStatistics"
    FileAttributes:
      type: object
      properties:
        fileName:
          type: string
        lastModifiedTime:
          type: integer
          format: int64
        creationTime:
          type: integer
          format: int64
        type:
          $ref: "#/components/schemas/FileAttributes.FileType"
        size:
          type: integer
          format: int64
        metadata:
          type: object
          additionalProperties:
            type: string
    FileAttributes.FileType:
      type: string
      enum:
      - File
      - Directory
      x-enum-varnames:
      - File
      - Directory
    FileMetas:
      required:
      - size
      type: object
      properties:
        size:
          type: integer
          format: int64
    Filter:
      required:
      - filter
      type: object
      properties:
        filter:
          type: string
        expression:
          $ref: "#/components/schemas/FilterExpression"
    FilterExpression:
      type: object
    Fixtures:
      type: object
      properties:
        inputs:
          type: object
          additionalProperties: true
        files:
          type: object
          additionalProperties:
            type: string
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/TaskFixture"
        trigger:
          $ref: "#/components/schemas/TriggerFixture"
    Flow:
      required:
      - deleted
      - disabled
      - id
      - namespace
      - tasks
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractFlow"
      - type: object
        properties:
          id:
            maxLength: 100
            minLength: 1
            pattern: "^[a-zA-Z0-9][a-zA-Z0-9._-]*"
            type: string
          namespace:
            maxLength: 150
            minLength: 1
            pattern: "^[a-z0-9][a-z0-9._-]*"
            type: string
          revision:
            minimum: 1
            type: integer
            format: int32
          inputs:
            type: array
            items:
              $ref: "#/components/schemas/Input_Object_"
          disabled:
            type: boolean
          labels:
            oneOf:
            - type: array
            - $ref: "#/components/schemas/Map_Object.Object_"
          workerGroup:
            $ref: "#/components/schemas/WorkerGroup"
          deleted:
            type: boolean
          finally:
            type: array
            items:
              $ref: "#/components/schemas/Task"
          taskDefaults:
            type: array
            deprecated: true
            items:
              $ref: "#/components/schemas/PluginDefault"
          description:
            type: string
          variables:
            type: object
            additionalProperties:
              type: object
          tasks:
            minItems: 1
            type: array
            additionalProperties: true
            items:
              $ref: "#/components/schemas/Task"
          errors:
            type: array
            items:
              $ref: "#/components/schemas/Task"
          listeners:
            type: array
            deprecated: true
            items:
              $ref: "#/components/schemas/Listener"
          afterExecution:
            type: array
            items:
              $ref: "#/components/schemas/Task"
          triggers:
            type: array
            items:
              $ref: "#/components/schemas/AbstractTrigger"
          pluginDefaults:
            type: array
            items:
              $ref: "#/components/schemas/PluginDefault"
          concurrency:
            $ref: "#/components/schemas/Concurrency"
          outputs:
            title: Output values available and exposes to other flows.
            type: array
            description: Output values make information about the execution of your
              Flow available and expose for other Kestra flows to use. Output values
              are similar to return values in programming languages.
            items:
              $ref: "#/components/schemas/Output"
          retry:
            $ref: "#/components/schemas/AbstractRetry"
          sla:
            type: array
            items:
              $ref: "#/components/schemas/SLA"
    FlowController.TaskValidationType:
      type: string
      enum:
      - TASKS
      - TRIGGERS
    FlowForExecution:
      required:
      - deleted
      - disabled
      - id
      - namespace
      - tasks
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractFlow"
      - type: object
        properties:
          id:
            maxLength: 100
            minLength: 1
            pattern: "^[a-zA-Z0-9][a-zA-Z0-9._-]*"
            type: string
          namespace:
            maxLength: 150
            minLength: 1
            pattern: "^[a-z0-9][a-z0-9._-]*"
            type: string
          revision:
            minimum: 1
            type: integer
            format: int32
          inputs:
            type: array
            items:
              $ref: "#/components/schemas/Input_Object_"
          outputs:
            type: array
            items:
              $ref: "#/components/schemas/Output"
          disabled:
            type: boolean
          labels:
            oneOf:
            - type: array
            - $ref: "#/components/schemas/Map_Object.Object_"
          variables:
            type: object
            additionalProperties: true
          workerGroup:
            $ref: "#/components/schemas/WorkerGroup"
          deleted:
            type: boolean
          tasks:
            minItems: 1
            type: array
            items:
              $ref: "#/components/schemas/TaskForExecution"
          errors:
            type: array
            items:
              $ref: "#/components/schemas/TaskForExecution"
          finally:
            type: array
            items:
              $ref: "#/components/schemas/TaskForExecution"
          afterExecution:
            type: array
            items:
              $ref: "#/components/schemas/TaskForExecution"
          triggers:
            type: array
            items:
              $ref: "#/components/schemas/AbstractTriggerForExecution"
    FlowGenerationPrompt:
      required:
      - flowYaml
      - userPrompt
      type: object
      properties:
        userPrompt:
          type: string
        flowYaml:
          type: string
    FlowGraph:
      required:
      - clusters
      - edges
      - flowables
      - nodes
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/AbstractGraph"
        edges:
          type: array
          items:
            $ref: "#/components/schemas/FlowGraph.Edge"
        clusters:
          type: array
          items:
            $ref: "#/components/schemas/FlowGraph.Cluster"
        flowables:
          type: array
          items:
            type: string
    FlowGraph.Cluster:
      required:
      - cluster
      - end
      - nodes
      - parents
      - start
      type: object
      properties:
        cluster:
          $ref: "#/components/schemas/AbstractGraph"
        nodes:
          type: array
          items:
            type: string
        parents:
          type: array
          items:
            type: string
        start:
          type: string
        end:
          type: string
    FlowGraph.Edge:
      required:
      - relation
      - source
      - target
      type: object
      properties:
        source:
          type: string
        target:
          type: string
        relation:
          $ref: "#/components/schemas/Relation"
    FlowId:
      type: object
      properties:
        id:
          type: string
        namespace:
          type: string
        revision:
          type: integer
          format: int32
        tenantId:
          type: string
    FlowInterface:
      type: object
      allOf:
      - $ref: "#/components/schemas/FlowId"
      - $ref: "#/components/schemas/DeletedInterface"
      - $ref: "#/components/schemas/TenantInterface"
      - type: object
        properties:
          disabled:
            type: boolean
          deleted:
            type: boolean
          labels:
            type: array
            items:
              $ref: "#/components/schemas/Label"
          inputs:
            type: array
            items:
              $ref: "#/components/schemas/Input_Object_"
          outputs:
            type: array
            items:
              $ref: "#/components/schemas/Output"
          variables:
            type: object
            additionalProperties:
              type: object
          workerGroup:
            $ref: "#/components/schemas/WorkerGroup"
          concurrency:
            $ref: "#/components/schemas/Concurrency"
          sla:
            type: array
            items:
              $ref: "#/components/schemas/SLA"
          source:
            type: string
    FlowNode:
      required:
      - id
      - namespace
      - uid
      type: object
      properties:
        uid:
          type: string
        namespace:
          type: string
        id:
          type: string
    FlowRelation:
      type: string
      enum:
      - FLOW_TASK
      - FLOW_TRIGGER
    FlowScope:
      type: string
      enum:
      - USER
      - SYSTEM
    FlowTopologyGraph:
      required:
      - edges
      - nodes
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/FlowNode"
        edges:
          type: array
          items:
            $ref: "#/components/schemas/FlowTopologyGraph.Edge"
    FlowTopologyGraph.Edge:
      required:
      - relation
      - source
      - target
      type: object
      properties:
        source:
          type: string
        target:
          type: string
        relation:
          $ref: "#/components/schemas/FlowRelation"
    FlowUsage:
      type: object
      properties:
        count:
          type: integer
          format: int32
        namespacesCount:
          type: integer
          format: int64
        taskTypeCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
        triggerTypeCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
        taskRunnerTypeCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
    FlowWithSource:
      required:
      - deleted
      - disabled
      - id
      - namespace
      type: object
      allOf:
      - $ref: "#/components/schemas/Flow"
      - $ref: "#/components/schemas/AbstractFlow"
      - type: object
        properties:
          id:
            maxLength: 100
            minLength: 1
            pattern: "^[a-zA-Z0-9][a-zA-Z0-9._-]*"
            type: string
          namespace:
            maxLength: 150
            minLength: 1
            pattern: "^[a-z0-9][a-z0-9._-]*"
            type: string
          revision:
            minimum: 1
            type: integer
            format: int32
          inputs:
            type: array
            items:
              $ref: "#/components/schemas/Input_Object_"
          disabled:
            type: boolean
          labels:
            oneOf:
            - type: array
            - $ref: "#/components/schemas/Map_Object.Object_"
          workerGroup:
            $ref: "#/components/schemas/WorkerGroup"
          deleted:
            type: boolean
          variables:
            type: object
            additionalProperties:
              type: object
          concurrency:
            $ref: "#/components/schemas/Concurrency"
          outputs:
            title: Output values available and exposes to other flows.
            type: array
            description: Output values make information about the execution of your
              Flow available and expose for other Kestra flows to use. Output values
              are similar to return values in programming languages.
            items:
              $ref: "#/components/schemas/Output"
          sla:
            type: array
            items:
              $ref: "#/components/schemas/SLA"
    GroupIdentifier:
      required:
      - groupId
      - managedExternally
      - membership
      - tenantId
      type: object
      properties:
        tenantId:
          type: string
          nullable: true
        groupId:
          type: string
        membership:
          $ref: "#/components/schemas/GroupIdentifier.Membership"
        managedExternally:
          type: boolean
    GroupIdentifier.Membership:
      type: string
      enum:
      - OWNER
      - MEMBER
    GroupUsage:
      type: object
      properties:
        count:
          type: integer
          format: int64
    HostUsage:
      type: object
      properties:
        uuid:
          type: string
        hardware:
          $ref: "#/components/schemas/HostUsage.Hardware"
        os:
          $ref: "#/components/schemas/HostUsage.Os"
        jvm:
          $ref: "#/components/schemas/HostUsage.Jvm"
    HostUsage.Hardware:
      type: object
      properties:
        logicalProcessorCount:
          type: integer
          format: int32
        physicalProcessorCount:
          type: integer
          format: int64
        maxFreq:
          type: integer
          format: int64
        memory:
          type: integer
          format: int64
        knownVmMacAddr:
          type: boolean
        knownDockerMacAddr:
          type: boolean
    HostUsage.Jvm:
      type: object
      properties:
        name:
          type: string
        vendor:
          type: string
        version:
          type: string
    HostUsage.Os:
      type: object
      properties:
        family:
          type: string
        version:
          type: string
        codeName:
          type: string
        buildNumber:
          type: string
    HttpParameters:
      type: object
      allOf:
      - $ref: "#/components/schemas/ConvertibleMultiValues_String_"
      - $ref: "#/components/schemas/ConvertibleValues_List_String__"
      - $ref: "#/components/schemas/ConversionServiceProvider"
    IAMBindingController.ApiBindingDetail:
      required:
      - id
      - role
      - type
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/Binding.Type"
        namespace:
          type: string
          nullable: true
        role:
          $ref: "#/components/schemas/IAMBindingController.ApiRole"
        group:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/IAMBindingController.ApiBindingGroup"
        user:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/IAMBindingController.ApiBindingUser"
    IAMBindingController.ApiBindingGroup:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    IAMBindingController.ApiBindingUser:
      required:
      - displayName
      - id
      - type
      - username
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        displayName:
          type: string
        type:
          $ref: "#/components/schemas/UserType"
    IAMBindingController.ApiCreateBindingRequest:
      required:
      - externalId
      - roleId
      - type
      type: object
      properties:
        type:
          $ref: "#/components/schemas/Binding.Type"
        externalId:
          type: string
        roleId:
          type: string
        namespaceId:
          type: string
          nullable: true
    IAMBindingController.ApiRole:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    IAMGroupController.ApiCreateGroupRequest:
      required:
      - description
      - membersId
      - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        membersId:
          type: array
          items:
            type: string
    IAMGroupController.ApiGroupDetail:
      required:
      - description
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
    IAMGroupController.ApiGroupMember:
      required:
      - displayName
      - groups
      - id
      - username
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        displayName:
          type: string
        groups:
          type: array
          items:
            $ref: "#/components/schemas/IAMGroupController.ApiGroupMembership"
    IAMGroupController.ApiGroupMembership:
      required:
      - external
      - id
      - membership
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        external:
          type: boolean
        membership:
          $ref: "#/components/schemas/GroupIdentifier.Membership"
    IAMGroupController.ApiUpdateGroupRequest:
      required:
      - description
      - name
      type: object
      properties:
        name:
          type: string
          description: of the group.
        description:
          type: string
          description: of the group.
      description: Represents updatable properties for a Group.
    IAMInvitationController.ApiInvitationCreateRequest:
      required:
      - createUserIfNotExist
      - email
      - groups
      - roles
      - superAdmin
      type: object
      properties:
        createUserIfNotExist:
          type: boolean
        superAdmin:
          type: boolean
        roles:
          type: array
          items:
            $ref: "#/components/schemas/IAMInvitationController.ApiInvitationRole"
        groups:
          type: array
          items:
            type: string
        email:
          type: string
    IAMInvitationController.ApiInvitationDetail:
      required:
      - acceptedAt
      - email
      - expiredAt
      - groups
      - id
      - link
      - roles
      - sentAt
      - status
      - superAdmin
      - tenantId
      type: object
      properties:
        id:
          type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/ApiRoleSummary"
        groups:
          type: array
          items:
            $ref: "#/components/schemas/ApiGroupSummary"
        tenantId:
          type: string
        email:
          type: string
        status:
          $ref: "#/components/schemas/Invitation.InvitationStatus"
        sentAt:
          type: string
          format: date-time
        expiredAt:
          type: string
          format: date-time
        acceptedAt:
          type: string
          format: date-time
        superAdmin:
          type: boolean
        link:
          type: string
    IAMInvitationController.ApiInvitationRole:
      required:
      - id
      - namespaces
      type: object
      properties:
        id:
          type: string
        namespaces:
          type: array
          items:
            type: string
    IAMRoleController.ApiRoleCreateOrUpdateRequest:
      required:
      - description
      - isDefault
      - name
      - permissions
      type: object
      properties:
        permissions:
          type: object
          properties:
            FLOW:
              type: array
            BLUEPRINT:
              type: array
            TEMPLATE:
              type: array
            NAMESPACE:
              type: array
            EXECUTION:
              type: array
            USER:
              type: array
            GROUP:
              type: array
            ROLE:
              type: array
            BINDING:
              type: array
            AUDITLOG:
              type: array
            SECRET:
              type: array
            KVSTORE:
              type: array
            IMPERSONATE:
              type: array
            SETTING:
              type: array
            INFRASTRUCTURE:
              type: array
            APP:
              type: array
            APPEXECUTION:
              type: array
            TEST:
              type: array
            DASHBOARD:
              type: array
            TENANT_ACCESS:
              type: array
            SERVICE_ACCOUNT:
              type: array
            INVITATION:
              type: array
            GROUP_MEMBERSHIP:
              type: array
            UNKNOWN:
              type: array
        name:
          type: string
        description:
          type: string
        isDefault:
          type: boolean
    IAMRoleController.ApiRoleDetail:
      required:
      - description
      - id
      - isDefault
      - isManaged
      - name
      - permissions
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        permissions:
          type: object
          properties:
            FLOW:
              type: array
            BLUEPRINT:
              type: array
            TEMPLATE:
              type: array
            NAMESPACE:
              type: array
            EXECUTION:
              type: array
            USER:
              type: array
            GROUP:
              type: array
            ROLE:
              type: array
            BINDING:
              type: array
            AUDITLOG:
              type: array
            SECRET:
              type: array
            KVSTORE:
              type: array
            IMPERSONATE:
              type: array
            SETTING:
              type: array
            INFRASTRUCTURE:
              type: array
            APP:
              type: array
            APPEXECUTION:
              type: array
            TEST:
              type: array
            DASHBOARD:
              type: array
            TENANT_ACCESS:
              type: array
            SERVICE_ACCOUNT:
              type: array
            INVITATION:
              type: array
            GROUP_MEMBERSHIP:
              type: array
            UNKNOWN:
              type: array
        isDefault:
          type: boolean
        isManaged:
          type: boolean
    IAMServiceAccountController.ApiGroup:
      required:
      - id
      type: object
      properties:
        id:
          type: string
    IAMServiceAccountController.ApiServiceAccountRequest:
      required:
      - description
      - groups
      - name
      - superAdmin
      type: object
      properties:
        groups:
          type: array
          items:
            $ref: "#/components/schemas/IAMServiceAccountController.ApiGroup"
        name:
          pattern: "^(?=.{1,63}$)[a-z0-9]+(?:-[a-z0-9]+)*$"
          type: string
        description:
          type: string
        superAdmin:
          type: boolean
      description: A User Service Account.
    IAMServiceAccountController.ApiServiceAccountResponse:
      required:
      - description
      - groups
      - id
      - name
      - superAdmin
      type: object
      properties:
        id:
          type: string
          description: the identifier of this service account.
        name:
          pattern: "^(?=.{1,63}$)[a-z0-9]+(?:-[a-z0-9]+)*$"
          type: string
          description: the name of this service account.
        description:
          type: string
          description: the description of this service account.
        groups:
          type: array
          items:
            $ref: "#/components/schemas/IAMServiceAccountController.ApiGroup"
        superAdmin:
          type: boolean
      description: A User Service Account.
    IAMTenantAccessController.ApiAuthentication:
      required:
      - name
      - type
      type: object
      properties:
        name:
          type: string
        type:
          type: string
    IAMTenantAccessController.ApiCreateTenantAccessRequest:
      required:
      - email
      type: object
      properties:
        email:
          type: string
    IAMTenantAccessController.ApiGroup:
      required:
      - external
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        external:
          type: boolean
    IAMTenantAccessController.ApiRoleAssignment:
      required:
      - id
      - name
      - namespace
      - origin
      - permissions
      - sourceId
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        namespace:
          type: string
        origin:
          $ref: "#/components/schemas/RBACService.RoleAssignment.RoleOrigin"
        sourceId:
          type: string
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/IAMTenantAccessController.ApiUserPermission"
    IAMTenantAccessController.ApiTenantAccess:
      required:
      - displayName
      - groups
      - roles
      - superAdmin
      - tenantId
      - userId
      - username
      type: object
      properties:
        tenantId:
          type: string
        userId:
          type: string
        username:
          type: string
        displayName:
          type: string
        groups:
          type: array
          items:
            $ref: "#/components/schemas/IAMTenantAccessController.ApiGroup"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/IAMTenantAccessController.ApiRoleAssignment"
        superAdmin:
          type: boolean
    IAMTenantAccessController.ApiUserPermission:
      required:
      - actions
      - permission
      type: object
      properties:
        permission:
          $ref: "#/components/schemas/Permission"
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
    IAMTenantAccessController.ApiUserTenantAccess:
      required:
      - auths
      - description
      - displayName
      - groups
      - id
      - username
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        displayName:
          type: string
        description:
          type: string
        groups:
          type: array
          items:
            $ref: "#/components/schemas/IAMTenantAccessController.ApiGroup"
        auths:
          type: array
          items:
            $ref: "#/components/schemas/IAMTenantAccessController.ApiAuthentication"
    IAMTenantAccessController.UserApiAutocomplete:
      type: object
      allOf:
      - $ref: "#/components/schemas/ApiAutocomplete"
      - type: object
        properties:
          username:
            type: string
            nullable: true
    IAMUserController.ApiCreateOrUpdateUserRequest:
      required:
      - email
      - firstName
      - groups
      - lastName
      - password
      - restricted
      - superAdmin
      - tenants
      type: object
      properties:
        tenants:
          type: array
          items:
            type: string
        groups:
          type: array
          items:
            type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        superAdmin:
          type: boolean
        restricted:
          type: boolean
    IAMUserController.ApiGroup:
      required:
      - id
      - tenantId
      type: object
      properties:
        id:
          type: string
        tenantId:
          type: string
    IAMUserController.ApiPatchRestrictedRequest:
      required:
      - restricted
      type: object
      properties:
        restricted:
          type: boolean
    IAMUserController.ApiPatchSuperAdminRequest:
      required:
      - superAdmin
      type: object
      properties:
        superAdmin:
          type: boolean
    IAMUserController.ApiPatchUserPasswordRequest:
      required:
      - password
      type: object
      properties:
        password:
          type: string
    IAMUserController.ApiTenant:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    IAMUserController.ApiUser:
      required:
      - auths
      - displayName
      - email
      - firstName
      - groups
      - id
      - lastName
      - restricted
      - superAdmin
      - tenants
      - username
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        displayName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        tenants:
          type: array
          items:
            $ref: "#/components/schemas/IAMUserController.ApiTenant"
        auths:
          type: array
          items:
            $ref: "#/components/schemas/IAMUserController.ApiUserAuth"
        groups:
          type: array
          items:
            $ref: "#/components/schemas/IAMUserController.ApiGroup"
        superAdmin:
          type: boolean
        restricted:
          type: boolean
    IAMUserController.ApiUserAuth:
      required:
      - id
      - name
      - type
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
    IAMUserController.ApiUserSummary:
      required:
      - auths
      - displayName
      - id
      - superAdmin
      - tenants
      - username
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        displayName:
          type: string
        tenants:
          type: array
          items:
            $ref: "#/components/schemas/IAMUserController.ApiTenant"
        auths:
          type: array
          items:
            $ref: "#/components/schemas/IAMUserController.ApiUserAuth"
        superAdmin:
          type: boolean
    IAMUserGroupController.ApiUpdateUserGroupsRequest:
      required:
      - groupIds
      type: object
      properties:
        groupIds:
          type: array
          items:
            type: string
    IdWithNamespace:
      type: object
      properties:
        namespace:
          type: string
        id:
          type: string
    IdentityProvider:
      required:
      - attributes
      - externalId
      - securityIntegrationId
      - securityIntegrationName
      type: object
      properties:
        attributes:
          type: object
          additionalProperties:
            type: object
        externalId:
          type: string
        securityIntegrationId:
          type: string
        securityIntegrationName:
          type: string
    InputType:
      required:
      - cls
      - type
      type: object
      properties:
        type:
          type: string
        cls:
          type: string
    Input_Object_:
      required:
      - id
      - type
      type: object
      properties:
        name:
          type: string
          deprecated: true
        id:
          title: The ID of the input.
          minLength: 1
          pattern: "^[a-zA-Z0-9][.a-zA-Z0-9_-]*"
          type: string
        type:
          title: The type of the input.
          allOf:
          - $ref: "#/components/schemas/Type"
        description:
          title: The description of the input.
          type: string
        dependsOn:
          title: The dependencies of the input.
          allOf:
          - $ref: "#/components/schemas/DependsOn"
        required:
          type: boolean
        defaults:
          title: The default value to use if no value is specified.
          type: object
        displayName:
          title: The display name of the input.
          type: string
    InstanceController.ApiActiveService:
      required:
      - total
      - type
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ServiceType"
        total:
          type: integer
          format: int64
    InstanceController.ApiActiveServiceList:
      required:
      - services
      - total
      type: object
      properties:
        total:
          type: integer
          format: int32
        services:
          type: array
          items:
            $ref: "#/components/schemas/InstanceController.ApiActiveService"
    InstanceController.ApiCreateOrUpdateWorkerGroupRequest:
      required:
      - allowedTenants
      - description
      - key
      type: object
      properties:
        key:
          type: string
          description: The key of the worker group.
        description:
          type: string
          description: The description of the worker group.
        allowedTenants:
          type: array
          items:
            type: string
      description: ApiCreateWorkerGroupRequest.
    InstanceController.ApiPluginArtifact:
      required:
      - artifactId
      - groupId
      - icon
      - title
      - versions
      type: object
      properties:
        title:
          type: string
        icon:
          type: string
        groupId:
          type: string
        artifactId:
          type: string
        versions:
          type: array
          items:
            type: string
    InstanceController.ApiPluginArtifactList_PluginArtifact_:
      required:
      - results
      - total
      type: object
      properties:
        total:
          type: integer
          format: int32
        results:
          type: array
          items:
            type: object
    InstanceController.ApiPluginArtifactList_PluginResolutionResult_:
      required:
      - results
      - total
      type: object
      properties:
        total:
          type: integer
          format: int32
        results:
          type: array
          items:
            type: object
    InstanceController.ApiPluginListRequest:
      required:
      - plugins
      type: object
      properties:
        plugins:
          type: array
          items:
            type: string
    InstanceController.ApiPluginVersionDetails:
      required:
      - artifactId
      - classes
      - description
      - groupId
      - icon
      - title
      - version
      type: object
      properties:
        artifactId:
          type: string
        groupId:
          type: string
        version:
          type: string
        title:
          type: string
        description:
          type: string
        icon:
          type: string
        classes:
          type: array
          items:
            $ref: "#/components/schemas/InstanceController.ApiPluginVersionDetails.ApiPluginClasses"
    InstanceController.ApiPluginVersionDetails.ApiPluginClass:
      required:
      - icon
      - name
      type: object
      properties:
        name:
          type: string
        icon:
          type: string
    InstanceController.ApiPluginVersionDetails.ApiPluginClasses:
      required:
      - classes
      - type
      type: object
      properties:
        type:
          type: string
        classes:
          type: array
          items:
            $ref: "#/components/schemas/InstanceController.ApiPluginVersionDetails.ApiPluginClass"
    InstanceController.ApiPluginVersions:
      required:
      - artifactId
      - groupId
      - versions
      type: object
      properties:
        groupId:
          type: string
        artifactId:
          type: string
        versions:
          type: array
          items:
            $ref: "#/components/schemas/InstanceController.ApiPluginVersions.ApiPluginVersionAndMetadata"
    InstanceController.ApiPluginVersions.ApiPluginVersionAndMetadata:
      required:
      - metadata
      - version
      type: object
      properties:
        version:
          type: string
        metadata:
          $ref: "#/components/schemas/PluginArtifactMetadata"
    InstanceController.ApiServerInstance:
      required:
      - hostname
      - id
      - type
      - version
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/ServerInstance.Type"
        version:
          type: string
        hostname:
          type: string
    InstanceController.ApiServiceInstance:
      required:
      - createdAt
      - id
      - server
      - state
      - type
      - updatedAt
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/ServiceType"
        state:
          $ref: "#/components/schemas/Service.ServiceState"
        server:
          $ref: "#/components/schemas/InstanceController.ApiServerInstance"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    InstanceController.ApiWorkerGroup:
      required:
      - allowedTenants
      - description
      - id
      - key
      type: object
      properties:
        id:
          type: string
          description: The ID of worker group.
        key:
          type: string
          description: The key of the worker group.
        description:
          type: string
          description: The description of the worker group.
        allowedTenants:
          type: array
          items:
            type: string
      description: ApiWorkerGroup.
    InstanceController.ApiWorkerGroupDetails:
      required:
      - allowedTenants
      - description
      - id
      - key
      - workers
      type: object
      properties:
        id:
          type: string
          description: The ID of worker group.
        key:
          type: string
          description: The key of the worker group.
        description:
          type: string
          description: The description of the worker group.
        allowedTenants:
          type: array
          items:
            type: string
        workers:
          type: array
          description: The list of workers for the group.
          items:
            $ref: "#/components/schemas/ServiceInstance"
      description: ApiWorkerGroupDetails.
    InstanceController.ApiWorkerGroupItem:
      required:
      - activeWorkers
      - description
      - id
      - key
      type: object
      properties:
        id:
          type: string
          description: The ID of worker group.
        key:
          type: string
          description: The key of the worker group.
        description:
          type: string
          description: The description of the worker group.
        activeWorkers:
          type: integer
          description: The number of active workers for the group.
          format: int32
      description: ApiWorkerGroup.
    InstanceController.ApiWorkerGroupList:
      required:
      - workerGroups
      type: object
      properties:
        workerGroups:
          type: array
          description: The list of worker groups.
          items:
            $ref: "#/components/schemas/InstanceController.ApiWorkerGroupItem"
      description: ApiWorkerGroupList.
    Invitation:
      required:
      - acceptedAt
      - bindings
      - deleted
      - email
      - expiredAt
      - groupIds
      - id
      - isExpired
      - link
      - sentAt
      - status
      - superAdmin
      - tenantId
      - userType
      type: object
      properties:
        isExpired:
          type: boolean
        email:
          pattern: "^$|^[a-zA-Z0-9_!#$%&’*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$"
          type: string
        id:
          type: string
        bindings:
          type: array
          items:
            $ref: "#/components/schemas/Binding"
        groupIds:
          type: array
          items:
            type: string
        tenantId:
          type: string
        status:
          $ref: "#/components/schemas/Invitation.InvitationStatus"
        sentAt:
          type: string
          format: date-time
        expiredAt:
          type: string
          format: date-time
        acceptedAt:
          type: string
          format: date-time
        deleted:
          type: boolean
        userType:
          $ref: "#/components/schemas/UserType"
        superAdmin:
          type: boolean
        link:
          type: string
    Invitation.InvitationStatus:
      type: string
      enum:
      - PENDING
      - ACCEPTED
      - EXPIRED
    Isolation:
      required:
      - deniedServices
      - enabled
      type: object
      properties:
        deniedServices:
          type: array
          items:
            $ref: "#/components/schemas/ServiceType"
        enabled:
          type: boolean
    KVController.ApiDeleteBulkRequest:
      required:
      - keys
      type: object
      properties:
        keys:
          type: array
          items:
            type: string
    KVController.ApiDeleteBulkResponse:
      required:
      - keys
      type: object
      properties:
        keys:
          type: array
          items:
            type: string
    KVController.TypedValue:
      required:
      - type
      - value
      type: object
      properties:
        type:
          $ref: "#/components/schemas/KVType"
        value:
          type: object
    KVEntry:
      required:
      - creationDate
      - description
      - expirationDate
      - key
      - updateDate
      type: object
      properties:
        key:
          type: string
        description:
          type: string
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        expirationDate:
          type: string
          format: date-time
    KVType:
      type: string
      enum:
      - STRING
      - NUMBER
      - BOOLEAN
      - DATETIME
      - DATE
      - DURATION
      - JSON
    Label:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Level:
      type: string
      enum:
      - ERROR
      - WARN
      - INFO
      - DEBUG
      - TRACE
    Listener:
      required:
      - conditions
      - description
      - tasks
      type: object
      properties:
        description:
          type: string
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/Condition"
        tasks:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Task"
    LogEntry:
      required:
      - deleted
      - flowId
      - level
      - message
      - namespace
      - thread
      - timestamp
      type: object
      properties:
        namespace:
          type: string
        flowId:
          type: string
        taskId:
          type: string
          nullable: true
        executionId:
          type: string
          nullable: true
        taskRunId:
          type: string
          nullable: true
        attemptNumber:
          type: integer
          format: int32
          nullable: true
        triggerId:
          type: string
          nullable: true
        timestamp:
          type: string
          format: date-time
        level:
          $ref: "#/components/schemas/Level"
        thread:
          type: string
        message:
          type: string
        deleted:
          type: boolean
        executionKind:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionKind"
    Map_Object.Object_:
      type: object
      properties:
        empty:
          type: boolean
    MeController.ApiMe:
      required:
      - auths
      - id
      - profile
      - restricted
      - superAdmin
      - tenants
      type: object
      properties:
        id:
          type: string
        superAdmin:
          type: boolean
        restricted:
          type: boolean
        profile:
          $ref: "#/components/schemas/MeController.ApiProfile"
        auths:
          type: array
          items:
            $ref: "#/components/schemas/IAMTenantAccessController.ApiAuthentication"
        tenants:
          type: array
          items:
            $ref: "#/components/schemas/MeController.ApiTenant"
    MeController.ApiProfile:
      required:
      - email
      - firstName
      - lastName
      - username
      type: object
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
    MeController.ApiTenant:
      required:
      - id
      - logo
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        logo:
          type: string
    MeController.ApiUpdatePasswordRequest:
      required:
      - newPassword
      - oldPassword
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    MeController.ApiUserDetailsRequest:
      required:
      - email
      - firstName
      - lastName
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    Meta:
      type: object
      properties:
        resourceType:
          minLength: 1
          type: string
        created:
          type: string
          format: date-time
        lastModified:
          type: string
          format: date-time
        location:
          type: string
        version:
          type: string
    Metric:
      required:
      - baseUnit
      - description
      - name
      - tags
      - type
      - value
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        description:
          type: string
        baseUnit:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Metric.Tag"
        value:
          type: object
    Metric.Tag:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    MetricAggregation:
      required:
      - date
      - name
      - value
      type: object
      properties:
        name:
          type: string
        value:
          type: number
          format: double
        date:
          type: string
          format: date-time
    MetricAggregations:
      required:
      - aggregations
      - groupBy
      type: object
      properties:
        groupBy:
          type: string
        aggregations:
          type: array
          items:
            $ref: "#/components/schemas/MetricAggregation"
    MetricEntry:
      required:
      - deleted
      - flowId
      - name
      - namespace
      - timestamp
      - type
      - value
      type: object
      properties:
        namespace:
          type: string
        flowId:
          type: string
        taskId:
          type: string
          nullable: true
        executionId:
          type: string
          nullable: true
        taskRunId:
          type: string
          nullable: true
        type:
          type: string
        name:
          type: string
        value:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
        tags:
          type: object
          additionalProperties:
            type: string
          nullable: true
        deleted:
          type: boolean
        executionKind:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionKind"
    MiscController.BasicAuthCredentials:
      required:
      - password
      - uid
      - username
      type: object
      properties:
        uid:
          type: string
        username:
          type: string
        password:
          type: string
    MiscController.Configuration:
      type: object
      properties:
        uuid:
          type: string
        version:
          type: string
        commitId:
          type: string
        commitDate:
          type: string
          format: date-time
        isCustomDashboardsEnabled:
          type: boolean
        isTaskRunEnabled:
          type: boolean
        isAnonymousUsageEnabled:
          type: boolean
        isTemplateEnabled:
          type: boolean
        environment:
          $ref: "#/components/schemas/MiscController.Environment"
        url:
          type: string
        preview:
          $ref: "#/components/schemas/MiscController.Preview"
        systemNamespace:
          type: string
        hiddenLabelsPrefixes:
          type: array
          items:
            type: string
        resourceToFilters:
          type: array
          items:
            $ref: "#/components/schemas/QueryFilter.ResourceField"
        isAiEnabled:
          type: boolean
        isBasicAuthInitialized:
          type: boolean
    MiscController.EEConfiguration:
      type: object
      allOf:
      - $ref: "#/components/schemas/MiscController.Configuration"
      - type: object
        properties:
          tenants:
            $ref: "#/components/schemas/MiscController.TenantConfigurationInfo"
          secretsEnabled:
            type: boolean
          supportedStorages:
            type: array
            items:
              $ref: "#/components/schemas/MiscController.PluginIdAndVersion"
          supportedSecrets:
            type: array
            items:
              $ref: "#/components/schemas/MiscController.PluginIdAndVersion"
          pluginManagementEnabled:
            type: boolean
          pluginCustomEnabled:
            type: boolean
          banner:
            $ref: "#/components/schemas/Banner"
          mailServiceEnabled:
            type: boolean
          outputsInInternalStorageEnabled:
            type: boolean
          contextCustomLinks:
            type: object
            additionalProperties:
              $ref: "#/components/schemas/CustomLink"
          inMaintenance:
            type: boolean
          passwordRegexp:
            type: string
    MiscController.Environment:
      required:
      - color
      - name
      type: object
      properties:
        name:
          type: string
        color:
          type: string
    MiscController.LicenseInfo:
      required:
      - expired
      - expiry
      - maxServers
      - standalone
      - type
      - workerGroups
      type: object
      properties:
        type:
          type: string
        expiry:
          type: string
          format: date-time
        expired:
          type: boolean
        maxServers:
          type: integer
          format: int32
        standalone:
          type: boolean
        workerGroups:
          type: boolean
    MiscController.PluginIdAndVersion:
      required:
      - id
      - version
      type: object
      properties:
        id:
          type: string
        version:
          type: string
    MiscController.Preview:
      required:
      - initial
      - max
      type: object
      properties:
        initial:
          type: integer
          format: int32
        max:
          type: integer
          format: int32
    MiscController.TenantConfigurationInfo:
      required:
      - secretByTenant
      - storageByTenant
      type: object
      properties:
        storageByTenant:
          type: boolean
        secretByTenant:
          type: boolean
    Name:
      type: object
      properties:
        familyName:
          type: string
        givenName:
          type: string
      description: Scim core schema.
    Namespace:
      required:
      - allowedNamespaces
      - deleted
      - description
      - id
      - pluginDefaults
      - variables
      - workerGroup
      type: object
      properties:
        id:
          pattern: "^[a-z0-9][a-z0-9._-]*"
          type: string
        deleted:
          type: boolean
        allowedTriggers:
          type: array
          deprecated: true
          items:
            $ref: "#/components/schemas/Namespace.AllowedTrigger"
        storageIsolation:
          $ref: "#/components/schemas/Isolation"
        secretIsolation:
          $ref: "#/components/schemas/Isolation"
        description:
          type: string
        variables:
          type: object
          additionalProperties:
            type: object
        pluginDefaults:
          type: array
          items:
            $ref: "#/components/schemas/PluginDefault"
        allowedNamespaces:
          type: array
          items:
            $ref: "#/components/schemas/Namespace.AllowedNamespace"
        workerGroup:
          $ref: "#/components/schemas/WorkerGroup"
        storageType:
          type: string
        storageConfiguration:
          type: object
          additionalProperties:
            type: object
        secretType:
          type: string
        secretReadOnly:
          type: boolean
        secretConfiguration:
          type: object
          additionalProperties:
            type: object
        outputsInInternalStorage:
          type: boolean
      description: A namespace is a logical grouping of flows and tasks. It is used
        to organize and manage flows and tasks within Kestra.
      allOf:
      - $ref: "#/components/schemas/NamespaceLight"
    Namespace.AllowedNamespace:
      required:
      - namespace
      type: object
      properties:
        namespace:
          type: string
    Namespace.AllowedTrigger:
      required:
      - flowId
      - namespace
      type: object
      properties:
        namespace:
          type: string
        flowId:
          type: string
      deprecated: true
    NamespaceLight:
      required:
      - deleted
      - id
      type: object
      properties:
        id:
          pattern: "^[a-z0-9][a-z0-9._-]*"
          type: string
        deleted:
          type: boolean
    NamespaceUsage:
      type: object
      properties:
        count:
          type: integer
          format: int64
    NamespaceWithDisabled:
      required:
      - deleted
      - disabled
      - id
      type: object
      allOf:
      - $ref: "#/components/schemas/Namespace"
      - $ref: "#/components/schemas/NamespaceLight"
      - type: object
        properties:
          id:
            pattern: "^[a-z0-9][a-z0-9._-]*"
            type: string
          deleted:
            type: boolean
          description:
            type: string
          variables:
            type: object
            additionalProperties:
              type: object
          pluginDefaults:
            type: array
            items:
              $ref: "#/components/schemas/PluginDefault"
          allowedNamespaces:
            type: array
            items:
              $ref: "#/components/schemas/Namespace.AllowedNamespace"
          workerGroup:
            $ref: "#/components/schemas/WorkerGroup"
          disabled:
            type: boolean
    Output:
      required:
      - id
      - type
      - value
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][.a-zA-Z0-9_-]*"
          type: string
        description:
          type: string
        value:
          type: object
        type:
          $ref: "#/components/schemas/Type"
        displayName:
          type: string
    PageRequest:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
    PagedResults_ApiGroupSummary_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ApiGroupSummary"
        total:
          type: integer
          format: int64
    PagedResults_ApiRoleSummary_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/ApiRoleSummary"
        total:
          type: integer
          format: int64
    PagedResults_AppsController.ApiAppCatalogItem_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/AppsController.ApiAppCatalogItem"
        total:
          type: integer
          format: int64
    PagedResults_AppsController.ApiApp_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/AppsController.ApiApp"
        total:
          type: integer
          format: int64
    PagedResults_AuditLogController.AuditLogWithUser_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/AuditLogController.AuditLogWithUser"
        total:
          type: integer
          format: int64
    PagedResults_BlueprintController.ApiBlueprintItem_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/BlueprintController.ApiBlueprintItem"
        total:
          type: integer
          format: int64
    PagedResults_Blueprint_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Blueprint"
        total:
          type: integer
          format: int64
    PagedResults_Dashboard_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Dashboard"
        total:
          type: integer
          format: int64
    PagedResults_Execution_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Execution"
        total:
          type: integer
          format: int64
    PagedResults_Flow_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Flow"
        total:
          type: integer
          format: int64
    PagedResults_IAMBindingController.ApiBindingDetail_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/IAMBindingController.ApiBindingDetail"
        total:
          type: integer
          format: int64
    PagedResults_IAMGroupController.ApiGroupMember_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/IAMGroupController.ApiGroupMember"
        total:
          type: integer
          format: int64
    PagedResults_IAMInvitationController.ApiInvitationDetail_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/IAMInvitationController.ApiInvitationDetail"
        total:
          type: integer
          format: int64
    PagedResults_IAMTenantAccessController.ApiUserTenantAccess_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/IAMTenantAccessController.ApiUserTenantAccess"
        total:
          type: integer
          format: int64
    PagedResults_IAMUserController.ApiUserSummary_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/IAMUserController.ApiUserSummary"
        total:
          type: integer
          format: int64
    PagedResults_InstanceController.ApiPluginArtifact_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/InstanceController.ApiPluginArtifact"
        total:
          type: integer
          format: int64
    PagedResults_InstanceController.ApiServiceInstance_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/InstanceController.ApiServiceInstance"
        total:
          type: integer
          format: int64
    PagedResults_LogEntry_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/LogEntry"
        total:
          type: integer
          format: int64
    PagedResults_Map_String.Object__:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
        total:
          type: integer
          format: int64
    PagedResults_MetricEntry_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/MetricEntry"
        total:
          type: integer
          format: int64
    PagedResults_NamespaceWithDisabled_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/NamespaceWithDisabled"
        total:
          type: integer
          format: int64
    PagedResults_SearchResult_Flow__:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/SearchResult_Flow_"
        total:
          type: integer
          format: int64
    PagedResults_TaskRun_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/TaskRun"
        total:
          type: integer
          format: int64
    PagedResults_Tenant_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Tenant"
        total:
          type: integer
          format: int64
    PagedResults_TestSuite_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/TestSuite"
        total:
          type: integer
          format: int64
    PagedResults_TriggerController.Triggers_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/TriggerController.Triggers"
        total:
          type: integer
          format: int64
    PagedResults_Trigger_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/Trigger"
        total:
          type: integer
          format: int64
    PatchOperation:
      type: object
      properties:
        operation:
          $ref: "#/components/schemas/PatchOperation.Type"
        path:
          $ref: "#/components/schemas/PatchOperationPath"
        value:
          type: object
    PatchOperation.Type:
      type: string
      enum:
      - ADD
      - REMOVE
      - REPLACE
    PatchOperationPath:
      required:
      - valuePathExpression
      type: object
      properties:
        valuePathExpression:
          $ref: "#/components/schemas/ValuePathExpression"
    PatchRequest:
      type: object
      allOf:
      - $ref: "#/components/schemas/BaseResource_PatchRequest_"
      - type: object
        properties:
          patchOperationList:
            type: array
            items:
              $ref: "#/components/schemas/PatchOperation"
    Permission:
      type: string
      enum:
      - FLOW
      - BLUEPRINT
      - TEMPLATE
      - NAMESPACE
      - EXECUTION
      - USER
      - GROUP
      - ROLE
      - BINDING
      - AUDITLOG
      - SECRET
      - KVSTORE
      - IMPERSONATE
      - SETTING
      - INFRASTRUCTURE
      - APP
      - APPEXECUTION
      - TEST
      - DASHBOARD
      - TENANT_ACCESS
      - SERVICE_ACCOUNT
      - INVITATION
      - GROUP_MEMBERSHIP
      - UNKNOWN
      x-deprecated:
      - INFRASTRUCTURE
    Plugin:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
        license:
          type: string
        longDescription:
          type: string
        group:
          type: string
        version:
          type: string
        manifest:
          type: object
          additionalProperties:
            type: string
        guides:
          type: array
          items:
            type: string
        aliases:
          type: array
          items:
            type: string
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/Plugin.PluginElementMetadata"
        triggers:
          type: array
          items:
            $ref: "#/components/schemas/Plugin.PluginElementMetadata"
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/Plugin.PluginElementMetadata"
        controllers:
          type: array
          items:
            $ref: "#/components/schemas/Plugin.PluginElementMetadata"
        storages:
          type: array
          items:
            $ref: "#/components/schemas/Plugin.PluginElementMetadata"
        secrets:
          type: array
          items:
            $ref: "#/components/schemas/Plugin.PluginElementMetadata"
        taskRunners:
          type: array
          items:
            $ref: "#/components/schemas/Plugin.PluginElementMetadata"
        apps:
          type: array
          items:
            $ref: "#/components/schemas/Plugin.PluginElementMetadata"
        appBlocks:
          type: array
          items:
            $ref: "#/components/schemas/Plugin.PluginElementMetadata"
        charts:
          type: array
          items:
            $ref: "#/components/schemas/Plugin.PluginElementMetadata"
        dataFilters:
          type: array
          items:
            $ref: "#/components/schemas/Plugin.PluginElementMetadata"
        logExporters:
          type: array
          items:
            $ref: "#/components/schemas/Plugin.PluginElementMetadata"
        additionalPlugins:
          type: array
          items:
            $ref: "#/components/schemas/Plugin.PluginElementMetadata"
        categories:
          type: array
          items:
            $ref: "#/components/schemas/PluginSubGroup.PluginCategory"
        subGroup:
          type: string
    Plugin.PluginElementMetadata:
      required:
      - cls
      - deprecated
      type: object
      properties:
        cls:
          type: string
        deprecated:
          type: boolean
    PluginArtifact:
      required:
      - artifactId
      - classifier
      - extension
      - groupId
      - uri
      - version
      type: object
      properties:
        groupId:
          type: string
        artifactId:
          type: string
        extension:
          type: string
        classifier:
          type: string
        version:
          type: string
        uri:
          type: string
          format: uri
    PluginArtifactMetadata:
      required:
      - creationTime
      - lastModifiedTime
      - name
      - size
      - uri
      type: object
      properties:
        uri:
          type: string
          format: uri
        name:
          type: string
        size:
          type: integer
          format: int64
        lastModifiedTime:
          type: integer
          format: int64
        creationTime:
          type: integer
          format: int64
    PluginController.ApiPluginVersions:
      required:
      - type
      - versions
      type: object
      properties:
        type:
          type: string
        versions:
          type: array
          items:
            type: string
    PluginDefault:
      required:
      - forced
      - type
      - values
      type: object
      properties:
        type:
          type: string
        forced:
          type: boolean
        values:
          type: object
          additionalProperties:
            type: object
    PluginIcon:
      type: object
      properties:
        name:
          type: string
        icon:
          type: string
        flowable:
          type: boolean
    PluginMetric:
      required:
      - count
      - meanTime
      - totalTime
      - type
      type: object
      properties:
        type:
          type: string
        count:
          type: number
          format: double
        totalTime:
          type: number
          format: double
        meanTime:
          type: number
          format: double
    PluginSchema:
      type: object
      properties:
        properties:
          type: object
          additionalProperties:
            type: object
        outputs:
          type: object
          additionalProperties:
            type: object
        definitions:
          type: object
          additionalProperties:
            type: object
    PluginSubGroup.PluginCategory:
      type: string
      enum:
      - DATABASE
      - MESSAGING
      - SCRIPT
      - TRANSFORMATION
      - BATCH
      - ALERTING
      - CLOUD
      - STORAGE
      - OTHER
      - TOOL
      - AI
      - CORE
      - INGESTION
      - BI
    PluginUsage:
      type: object
      properties:
        manifest:
          type: object
          additionalProperties:
            type: string
    Property_Boolean_:
      required:
      - expression
      type: object
      properties:
        expression:
          type: string
        value:
          type: boolean
    Property_Double_:
      required:
      - expression
      type: object
      properties:
        expression:
          type: string
        value:
          type: number
          format: double
    Property_Duration_:
      required:
      - expression
      type: object
      properties:
        expression:
          type: string
        value:
          type: string
    Property_List_String__:
      required:
      - expression
      type: object
      properties:
        expression:
          type: string
        value:
          type: array
          items:
            type: string
    Property_Object_:
      required:
      - expression
      type: object
      properties:
        expression:
          type: string
        value:
          type: object
    Property_String_:
      required:
      - expression
      type: object
      properties:
        expression:
          type: string
        value:
          type: string
    QueryFilter:
      required:
      - field
      - operation
      - value
      type: object
      properties:
        field:
          $ref: "#/components/schemas/QueryFilter.Field"
        operation:
          $ref: "#/components/schemas/QueryFilter.Op"
        value:
          type: object
    QueryFilter.Field:
      type: string
      enum:
      - QUERY
      - SCOPE
      - NAMESPACE
      - LABELS
      - FLOW_ID
      - START_DATE
      - END_DATE
      - STATE
      - TIME_RANGE
      - TRIGGER_EXECUTION_ID
      - TRIGGER_ID
      - CHILD_FILTER
      - WORKER_ID
      - EXISTING_ONLY
      - MIN_LEVEL
      x-type: String
    QueryFilter.FieldOp:
      required:
      - name
      - operations
      - value
      type: object
      properties:
        name:
          type: string
        value:
          type: string
        operations:
          type: array
          items:
            $ref: "#/components/schemas/QueryFilter.Operation"
    QueryFilter.Op:
      type: string
      enum:
      - EQUALS
      - NOT_EQUALS
      - GREATER_THAN
      - LESS_THAN
      - GREATER_THAN_OR_EQUAL_TO
      - LESS_THAN_OR_EQUAL_TO
      - IN
      - NOT_IN
      - STARTS_WITH
      - ENDS_WITH
      - CONTAINS
      - REGEX
      - PREFIX
    QueryFilter.Operation:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    QueryFilter.ResourceField:
      required:
      - fields
      - name
      type: object
      properties:
        name:
          type: string
        fields:
          type: array
          items:
            $ref: "#/components/schemas/QueryFilter.FieldOp"
    RBACService.RoleAssignment.RoleOrigin:
      type: string
      enum:
      - BINDING
      - GROUP
    Relation:
      required:
      - relationType
      - value
      type: object
      properties:
        relationType:
          $ref: "#/components/schemas/RelationType"
        value:
          type: string
    RelationType:
      type: string
      enum:
      - SEQUENTIAL
      - CHOICE
      - ERROR
      - FINALLY
      - AFTER_EXECUTION
      - PARALLEL
      - DYNAMIC
    ResourceType:
      type: object
      allOf:
      - $ref: "#/components/schemas/ScimResourceWithOptionalId"
      - $ref: "#/components/schemas/ScimResource"
      - $ref: "#/components/schemas/BaseResource_ScimResource_"
      - type: object
        properties:
          id:
            type: string
          name:
            minLength: 1
            type: string
          description:
            type: string
          endpoint:
            minLength: 1
            type: string
          schemaUrn:
            minLength: 1
            type: string
          schemaExtensions:
            type: array
            items:
              $ref: "#/components/schemas/ResourceType.SchemaExtensionConfiguration"
    ResourceType.SchemaExtensionConfiguration:
      type: object
      properties:
        schemaUrn:
          minLength: 1
          type: string
        required:
          type: boolean
    Role:
      required:
      - deleted
      - description
      - id
      - isDefault
      - isManaged
      - name
      - permissions
      type: object
      properties:
        isManaged:
          type: boolean
        permissions:
          type: object
          properties:
            FLOW:
              type: array
            BLUEPRINT:
              type: array
            TEMPLATE:
              type: array
            NAMESPACE:
              type: array
            EXECUTION:
              type: array
            USER:
              type: array
            GROUP:
              type: array
            ROLE:
              type: array
            BINDING:
              type: array
            AUDITLOG:
              type: array
            SECRET:
              type: array
            KVSTORE:
              type: array
            IMPERSONATE:
              type: array
            SETTING:
              type: array
            INFRASTRUCTURE:
              type: array
            APP:
              type: array
            APPEXECUTION:
              type: array
            TEST:
              type: array
            DASHBOARD:
              type: array
            TENANT_ACCESS:
              type: array
            SERVICE_ACCOUNT:
              type: array
            INVITATION:
              type: array
            GROUP_MEMBERSHIP:
              type: array
            UNKNOWN:
              type: array
        id:
          type: string
        name:
          type: string
        description:
          type: string
        isDefault:
          type: boolean
        deleted:
          type: boolean
    RoleUsage:
      type: object
      properties:
        count:
          type: integer
          format: int64
    SLA:
      required:
      - behavior
      - id
      - type
      type: object
      properties:
        id:
          minLength: 1
          type: string
        type:
          $ref: "#/components/schemas/SLA.Type"
        behavior:
          $ref: "#/components/schemas/SLA.Behavior"
        labels:
          oneOf:
          - type: array
          - $ref: "#/components/schemas/Map_Object.Object_"
    SLA.Behavior:
      type: string
      enum:
      - FAIL
      - CANCEL
      - NONE
    SLA.Type:
      type: string
      enum:
      - MAX_DURATION
      - EXECUTION_ASSERTION
    Schema:
      required:
      - id
      type: object
      properties:
        attributes:
          maxItems: 65535
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Schema.Attribute"
        id:
          maxLength: 65535
          minLength: 1
          type: string
        name:
          type: string
        description:
          type: string
        meta:
          $ref: "#/components/schemas/Meta"
    Schema.Attribute:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/Schema.Attribute"
        urn:
          type: string
        name:
          pattern: "\\p{Alpha}(-|_|\\p{Alnum})*"
          type: string
        type:
          $ref: "#/components/schemas/Schema.Attribute.Type"
        subAttributes:
          type: array
          items:
            $ref: "#/components/schemas/Schema.Attribute"
        multiValued:
          type: boolean
        description:
          type: string
        required:
          type: boolean
        canonicalValues:
          type: array
          items:
            type: string
        caseExact:
          type: boolean
        mutability:
          $ref: "#/components/schemas/Schema.Attribute.Mutability"
        returned:
          $ref: "#/components/schemas/Schema.Attribute.Returned"
        uniqueness:
          $ref: "#/components/schemas/Schema.Attribute.Uniqueness"
        referenceTypes:
          type: array
          items:
            type: string
        accessor:
          $ref: "#/components/schemas/Schema.AttributeAccessor"
        scimResourceIdReference:
          type: boolean
    Schema.Attribute.Mutability:
      type: string
      enum:
      - IMMUTABLE
      - READ_ONLY
      - READ_WRITE
      - WRITE_ONLY
    Schema.Attribute.Returned:
      type: string
      enum:
      - ALWAYS
      - DEFAULT
      - NEVER
      - REQUEST
    Schema.Attribute.Type:
      type: string
      enum:
      - BINARY
      - BOOLEAN
      - COMPLEX
      - DATE_TIME
      - DECIMAL
      - INTEGER
      - REFERENCE
      - STRING
    Schema.Attribute.Uniqueness:
      type: string
      enum:
      - GLOBAL
      - NONE
      - SERVER
    Schema.AttributeAccessor:
      type: object
    SchemaType:
      type: string
      enum:
      - FLOW
      - TEMPLATE
      - TASK
      - TRIGGER
      - PLUGINDEFAULT
      - APPS
      - TESTSUITES
      - DASHBOARD
    ScimExtension:
      type: object
      properties:
        urn:
          type: string
    ScimResource:
      required:
      - meta
      - resourceType
      type: object
      allOf:
      - $ref: "#/components/schemas/BaseResource_ScimResource_"
      - type: object
        properties:
          baseUrn:
            type: string
          extensions:
            type: object
            additionalProperties:
              $ref: "#/components/schemas/ScimExtension"
          meta:
            $ref: "#/components/schemas/Meta"
          id:
            minLength: 1
            type: string
          externalId:
            type: string
          resourceType:
            type: string
    ScimResourceWithOptionalId:
      type: object
      allOf:
      - $ref: "#/components/schemas/ScimResource"
      - $ref: "#/components/schemas/BaseResource_ScimResource_"
      - type: object
        properties:
          id:
            type: string
    ScimUser:
      type: object
      description: Scim core schema.
      allOf:
      - $ref: "#/components/schemas/ScimResource"
      - $ref: "#/components/schemas/BaseResource_ScimResource_"
      - type: object
        properties:
          primaryEmailAddress:
            nullable: true
            allOf:
            - $ref: "#/components/schemas/Email"
          active:
            type: boolean
          emails:
            type: array
            items:
              $ref: "#/components/schemas/Email"
          userName:
            type: string
          name:
            $ref: "#/components/schemas/Name"
          groups:
            type: array
            items:
              $ref: "#/components/schemas/UserGroup"
    SearchRequest:
      type: object
      allOf:
      - $ref: "#/components/schemas/BaseResource_SearchRequest_"
      - type: object
        properties:
          pageRequest:
            $ref: "#/components/schemas/PageRequest"
          sortRequest:
            $ref: "#/components/schemas/SortRequest"
          attributes:
            type: array
            items:
              $ref: "#/components/schemas/AttributeReference"
          excludedAttributes:
            type: array
            items:
              $ref: "#/components/schemas/AttributeReference"
          filter:
            $ref: "#/components/schemas/Filter"
          sortBy:
            $ref: "#/components/schemas/AttributeReference"
          sortOrder:
            $ref: "#/components/schemas/SortOrder"
          startIndex:
            type: integer
            format: int32
          count:
            type: integer
            format: int32
    SearchResult_Flow_:
      required:
      - fragments
      - model
      type: object
      properties:
        model:
          $ref: "#/components/schemas/Flow"
        fragments:
          type: array
          items:
            type: string
    SecurityIntegration.Type:
      type: string
      enum:
      - SCIM
    ServerConfig:
      required:
      - liveness
      - terminationGracePeriod
      type: object
      properties:
        workerTaskRestartStrategy:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/WorkerTaskRestartStrategy"
        terminationGracePeriod:
          type: string
          default: 5m
        liveness:
          $ref: "#/components/schemas/ServerConfig.Liveness"
    ServerConfig.Liveness:
      required:
      - enabled
      - heartbeatInterval
      - initialDelay
      - interval
      - timeout
      type: object
      properties:
        enabled:
          type: boolean
          default: true
        interval:
          type: string
          default: 5s
        timeout:
          type: string
          default: 45s
        initialDelay:
          type: string
          default: 45s
        heartbeatInterval:
          type: string
          default: 3s
    ServerInstance:
      required:
      - hostname
      - id
      - metrics
      - props
      - type
      - version
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/ServerInstance.Type"
        version:
          type: string
        hostname:
          type: string
        props:
          type: object
          additionalProperties:
            type: object
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/Metric"
    ServerInstance.Type:
      type: string
      enum:
      - SERVER
      - STANDALONE
    ServerType:
      type: string
      enum:
      - EXECUTOR
      - INDEXER
      - SCHEDULER
      - STANDALONE
      - WEBSERVER
      - WORKER
    Service.ServiceState:
      type: string
      enum:
      - CREATED
      - RUNNING
      - ERROR
      - DISCONNECTED
      - TERMINATING
      - TERMINATED_GRACEFULLY
      - TERMINATED_FORCED
      - NOT_RUNNING
      - EMPTY
      - MAINTENANCE
    ServiceInstance:
      required:
      - config
      - createdAt
      - events
      - id
      - metrics
      - props
      - seqId
      - server
      - state
      - type
      - updatedAt
      type: object
      properties:
        server:
          $ref: "#/components/schemas/ServerInstance"
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/Metric"
        state:
          $ref: "#/components/schemas/Service.ServiceState"
        id:
          type: string
        type:
          $ref: "#/components/schemas/ServiceType"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        events:
          type: array
          items:
            $ref: "#/components/schemas/ServiceInstance.TimestampedEvent"
        config:
          $ref: "#/components/schemas/ServerConfig"
        props:
          type: object
          additionalProperties:
            type: object
        seqId:
          type: integer
          format: int64
    ServiceInstance.TimestampedEvent:
      required:
      - state
      - ts
      - type
      - value
      type: object
      properties:
        ts:
          type: string
          format: date-time
        value:
          type: string
        type:
          type: string
        state:
          $ref: "#/components/schemas/Service.ServiceState"
    ServiceProviderConfiguration:
      type: object
      allOf:
      - $ref: "#/components/schemas/ScimResourceWithOptionalId"
      - $ref: "#/components/schemas/ScimResource"
      - $ref: "#/components/schemas/BaseResource_ScimResource_"
      - type: object
        properties:
          id:
            type: string
          documentationUrl:
            type: string
          patch:
            $ref: "#/components/schemas/ServiceProviderConfiguration.SupportedConfiguration"
          bulk:
            $ref: "#/components/schemas/ServiceProviderConfiguration.BulkConfiguration"
          filter:
            $ref: "#/components/schemas/ServiceProviderConfiguration.FilterConfiguration"
          changePassword:
            $ref: "#/components/schemas/ServiceProviderConfiguration.SupportedConfiguration"
          sort:
            $ref: "#/components/schemas/ServiceProviderConfiguration.SupportedConfiguration"
          etag:
            $ref: "#/components/schemas/ServiceProviderConfiguration.SupportedConfiguration"
          authenticationSchemes:
            type: array
            items:
              $ref: "#/components/schemas/ServiceProviderConfiguration.AuthenticationSchema"
    ServiceProviderConfiguration.AuthenticationSchema:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ServiceProviderConfiguration.AuthenticationSchema.Type"
        name:
          type: string
        description:
          type: string
        specUri:
          type: string
        documentationUri:
          type: string
    ServiceProviderConfiguration.AuthenticationSchema.Type:
      type: string
      enum:
      - OAUTH
      - OAUTH2
      - OAUTH_BEARER
      - HTTP_BASIC
      - HTTP_DIGEST
    ServiceProviderConfiguration.BulkConfiguration:
      type: object
      allOf:
      - $ref: "#/components/schemas/ServiceProviderConfiguration.SupportedConfiguration"
      - type: object
        properties:
          maxOperations:
            type: integer
            format: int32
          maxPayloadSize:
            type: integer
            format: int32
    ServiceProviderConfiguration.FilterConfiguration:
      type: object
      allOf:
      - $ref: "#/components/schemas/ServiceProviderConfiguration.SupportedConfiguration"
      - type: object
        properties:
          maxResults:
            type: integer
            format: int32
    ServiceProviderConfiguration.SupportedConfiguration:
      type: object
      properties:
        supported:
          type: boolean
    ServiceType:
      type: string
      enum:
      - EXECUTOR
      - INDEXER
      - SCHEDULER
      - WEBSERVER
      - WORKER
    ServiceUsage:
      required:
      - dailyStatistics
      type: object
      properties:
        dailyStatistics:
          type: array
          items:
            $ref: "#/components/schemas/ServiceUsage.DailyServiceStatistics"
    ServiceUsage.DailyServiceStatistics:
      required:
      - type
      - values
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            $ref: "#/components/schemas/ServiceUsage.DailyStatistics"
    ServiceUsage.DailyStatistics:
      required:
      - avg
      - date
      - max
      - min
      type: object
      properties:
        date:
          type: string
          format: date
        min:
          type: integer
          format: int64
        max:
          type: integer
          format: int64
        avg:
          type: integer
          format: int64
    SetupConfiguration:
      required:
      - done
      - passwordRegexp
      type: object
      properties:
        done:
          type: boolean
        repositoryType:
          type: string
        queueType:
          type: string
        storageType:
          type: string
        secretType:
          type: string
        passwordRegexp:
          type: string
    SetupConfiguration.SetupData:
      required:
      - password
      - tenant
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        tenant:
          $ref: "#/components/schemas/Tenant"
    SortOrder:
      type: string
      enum:
      - ASCENDING
      - DESCENDING
    SortRequest:
      type: object
      properties:
        sortBy:
          $ref: "#/components/schemas/AttributeReference"
        sortOrder:
          $ref: "#/components/schemas/SortOrder"
    State:
      required:
      - current
      type: object
      properties:
        duration:
          type: string
          readOnly: true
        startDate:
          type: string
          format: date-time
          readOnly: true
        endDate:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        current:
          $ref: "#/components/schemas/State.Type"
        histories:
          type: array
          items:
            $ref: "#/components/schemas/State.History"
    State.History:
      required:
      - date
      - state
      type: object
      properties:
        state:
          $ref: "#/components/schemas/State.Type"
        date:
          type: string
          format: date-time
    State.Type:
      type: string
      enum:
      - CREATED
      - RUNNING
      - PAUSED
      - RESTARTED
      - KILLING
      - SUCCESS
      - WARNING
      - FAILED
      - KILLED
      - CANCELLED
      - QUEUED
      - RETRYING
      - RETRIED
      - SKIPPED
      - BREAKPOINT
    Task:
      required:
      - id
      - type
      type: object
      properties:
        id:
          maxLength: 256
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
          x-size-message: Task id must be at most 256 characters
        type:
          title: The class name of this task.
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
        version:
          title: The version of the plugin to use.
          pattern: "\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9-]+)?|([a-zA-Z0-9]+)"
          type: string
        description:
          type: string
        retry:
          $ref: "#/components/schemas/AbstractRetry"
        timeout:
          $ref: "#/components/schemas/Property_Duration_"
        disabled:
          type: boolean
        workerGroup:
          $ref: "#/components/schemas/WorkerGroup"
        logLevel:
          $ref: "#/components/schemas/Level"
        allowFailure:
          type: boolean
        logToFile:
          type: boolean
        runIf:
          type: string
        allowWarning:
          type: boolean
        taskCache:
          $ref: "#/components/schemas/Cache"
    TaskFixture:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        value:
          type: string
        state:
          $ref: "#/components/schemas/State.Type"
        outputs:
          type: object
          additionalProperties:
            type: object
        description:
          $ref: "#/components/schemas/Property_String_"
    TaskForExecution:
      required:
      - id
      - type
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          title: The class name of this task.
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
        version:
          title: The version of the plugin to use.
          pattern: "\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9-]+)?|([a-zA-Z0-9]+)"
          type: string
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/TaskForExecution"
        inputs:
          type: array
          items:
            $ref: "#/components/schemas/Input_Object_"
        subflowId:
          $ref: "#/components/schemas/ExecutableTask.SubflowId"
    TaskRun:
      required:
      - attempts
      - dynamic
      - executionId
      - flowId
      - id
      - iteration
      - namespace
      - outputs
      - parentTaskRunId
      - state
      - taskId
      - value
      type: object
      properties:
        items:
          type: string
          deprecated: true
        id:
          type: string
        executionId:
          type: string
        namespace:
          type: string
        flowId:
          type: string
        taskId:
          type: string
        parentTaskRunId:
          type: string
        value:
          type: string
        attempts:
          type: array
          items:
            $ref: "#/components/schemas/TaskRunAttempt"
        outputs:
          type: object
          additionalProperties:
            type: object
        state:
          $ref: "#/components/schemas/State"
        iteration:
          type: integer
          format: int32
        dynamic:
          type: boolean
        forceExecution:
          type: boolean
          nullable: true
    TaskRunAttempt:
      required:
      - state
      type: object
      properties:
        metrics:
          type: array
          deprecated: true
          items:
            $ref: "#/components/schemas/AbstractMetricEntry_Object_"
        state:
          $ref: "#/components/schemas/State"
        workerId:
          type: string
          nullable: true
        logFile:
          type: string
          format: uri
          nullable: true
    Tenant:
      required:
      - deleted
      - id
      - name
      - outputsInInternalStorage
      - requireExistingNamespace
      - secretConfiguration
      - secretIsolation
      - secretReadOnly
      - secretType
      - storageConfiguration
      - storageIsolation
      - storageType
      - workerGroup
      type: object
      properties:
        storageIsolation:
          $ref: "#/components/schemas/Isolation"
        secretIsolation:
          $ref: "#/components/schemas/Isolation"
        id:
          pattern: "^[a-z0-9][a-z0-9_-]*"
          type: string
        name:
          type: string
        deleted:
          type: boolean
        workerGroup:
          $ref: "#/components/schemas/WorkerGroup"
        storageType:
          type: string
        storageConfiguration:
          type: object
          additionalProperties:
            type: object
        secretType:
          type: string
        secretReadOnly:
          type: boolean
        secretConfiguration:
          type: object
          additionalProperties:
            type: object
        requireExistingNamespace:
          type: boolean
        outputsInInternalStorage:
          type: boolean
    TenantInterface:
      type: object
      properties:
        tenantId:
          type: string
    TenantUsage:
      type: object
      properties:
        count:
          type: integer
          format: int64
    TestState:
      type: string
      enum:
      - ERROR
      - SUCCESS
      - FAILED
      - SKIPPED
    TestSuite:
      required:
      - flowId
      - id
      - namespace
      - testCases
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        description:
          type: string
        namespace:
          maxLength: 150
          minLength: 1
          pattern: "^[a-z0-9][a-z0-9._-]*"
          type: string
        flowId:
          maxLength: 100
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9._-]*"
          type: string
        source:
          type: string
        testCases:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/UnitTest"
        deleted:
          type: boolean
        disabled:
          type: boolean
    TestSuiteController.SearchTestsLastResult:
      required:
      - testSuiteIds
      type: object
      properties:
        testSuiteIds:
          type: array
          items:
            $ref: "#/components/schemas/TestSuiteController.TestSuiteApiId"
    TestSuiteController.TestSuiteApiId:
      required:
      - id
      - namespace
      type: object
      properties:
        namespace:
          minLength: 1
          type: string
        id:
          minLength: 1
          type: string
    TestSuiteController.TestSuiteBulkRequest:
      required:
      - ids
      type: object
      properties:
        ids:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/TestSuiteController.TestSuiteApiId"
    TestSuiteController.TestsLastResultResponse:
      required:
      - results
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/TestSuiteRunResult"
    TestSuiteRunResult:
      required:
      - endDate
      - flowId
      - id
      - namespace
      - results
      - startDate
      - state
      - testSuiteId
      type: object
      properties:
        id:
          type: string
        testSuiteId:
          type: string
        namespace:
          type: string
        flowId:
          type: string
        state:
          $ref: "#/components/schemas/TestState"
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        results:
          type: array
          items:
            $ref: "#/components/schemas/UnitTestResult"
    TimeWindow:
      type: object
      properties:
        default:
          type: string
        max:
          type: string
    Trigger:
      type: object
      allOf:
      - $ref: "#/components/schemas/TriggerContext"
      - type: object
        properties:
          executionId:
            type: string
            nullable: true
          updatedDate:
            type: string
            format: date-time
            nullable: true
          evaluateRunningDate:
            type: string
            format: date-time
            nullable: true
          workerId:
            type: string
            nullable: true
    TriggerContext:
      required:
      - date
      - flowId
      - namespace
      - triggerId
      type: object
      properties:
        disabled:
          type: boolean
        tenantId:
          pattern: "^[a-z0-9][a-z0-9_-]"
          type: string
        namespace:
          type: string
        flowId:
          type: string
        triggerId:
          type: string
        date:
          type: string
          format: date-time
        nextExecutionDate:
          type: string
          format: date-time
          nullable: true
        backfill:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Backfill"
        stopAfter:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
    TriggerController.SetDisabledRequest:
      required:
      - disabled
      - triggers
      type: object
      properties:
        triggers:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Trigger"
        disabled:
          type: boolean
    TriggerController.Triggers:
      required:
      - abstractTrigger
      - triggerContext
      type: object
      properties:
        abstractTrigger:
          $ref: "#/components/schemas/AbstractTrigger"
        triggerContext:
          $ref: "#/components/schemas/Trigger"
    TriggerFixture:
      required:
      - id
      - type
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        variables:
          type: object
          additionalProperties:
            type: object
    Type:
      type: string
      enum:
      - STRING
      - ENUM
      - SELECT
      - INT
      - FLOAT
      - BOOLEAN
      - BOOL
      - DATETIME
      - DATE
      - TIME
      - DURATION
      - FILE
      - JSON
      - URI
      - SECRET
      - ARRAY
      - MULTISELECT
      - YAML
      - EMAIL
    UnitTest:
      required:
      - assertions
      - id
      - type
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        disabled:
          type: boolean
        description:
          type: string
        fixtures:
          $ref: "#/components/schemas/Fixtures"
        assertions:
          type: array
          items:
            $ref: "#/components/schemas/Assertion"
    UnitTestResult:
      required:
      - assertionResults
      - errors
      - executionId
      - fixtures
      - state
      - testId
      - testType
      - url
      type: object
      properties:
        testId:
          type: string
        testType:
          type: string
        executionId:
          type: string
        url:
          type: string
          format: uri
        state:
          $ref: "#/components/schemas/TestState"
        assertionResults:
          type: array
          items:
            $ref: "#/components/schemas/AssertionResult"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/AssertionRunError"
        fixtures:
          $ref: "#/components/schemas/Fixtures"
    Usage:
      required:
      - configurations
      - executions
      - flows
      - host
      - instanceUuid
      - plugins
      - serverType
      - startTime
      - startUuid
      - uuid
      - version
      - zoneId
      type: object
      properties:
        uuid:
          type: string
        startUuid:
          type: string
        instanceUuid:
          type: string
        serverType:
          $ref: "#/components/schemas/ServerType"
        version:
          type: string
        zoneId:
          type: string
        uri:
          type: string
          nullable: true
        environments:
          type: array
          nullable: true
          items:
            type: string
        startTime:
          type: string
          format: date-time
        host:
          $ref: "#/components/schemas/HostUsage"
        configurations:
          $ref: "#/components/schemas/ConfigurationUsage"
        plugins:
          type: array
          items:
            $ref: "#/components/schemas/PluginUsage"
        flows:
          $ref: "#/components/schemas/FlowUsage"
        executions:
          $ref: "#/components/schemas/ExecutionUsage"
        services:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ServiceUsage"
        pluginMetrics:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/PluginMetric"
    UsageEE:
      type: object
      properties:
        groups:
          $ref: "#/components/schemas/GroupUsage"
        users:
          $ref: "#/components/schemas/UserUsage"
        roles:
          $ref: "#/components/schemas/RoleUsage"
        namespaces:
          $ref: "#/components/schemas/NamespaceUsage"
        tenants:
          $ref: "#/components/schemas/TenantUsage"
      allOf:
      - $ref: "#/components/schemas/Usage"
    UserGroup:
      type: object
      properties:
        value:
          type: string
        ref:
          type: string
        display:
          type: string
        type:
          $ref: "#/components/schemas/UserGroup.Type"
    UserGroup.Type:
      type: string
      enum:
      - DIRECT
      - INDIRECT
    UserType:
      type: string
      enum:
      - STANDARD
      - SERVICE_ACCOUNT
    UserUsage:
      required:
      - apiKeyCount
      - basicAuthCount
      - count
      - oidcCount
      type: object
      properties:
        count:
          type: integer
          format: int64
        apiKeyCount:
          type: integer
          format: int64
        oidcCount:
          type: integer
          format: int64
        basicAuthCount:
          type: integer
          format: int64
    UsernamePasswordCredentials:
      required:
      - password
      - username
      type: object
      properties:
        username:
          minLength: 1
          type: string
        password:
          minLength: 1
          type: string
        identity:
          type: string
          nullable: true
        secret:
          type: string
          nullable: true
    ValidateConstraintViolation:
      required:
      - constraints
      - deprecationPaths
      - flow
      - index
      - infos
      - namespace
      - outdated
      - warnings
      type: object
      properties:
        flow:
          type: string
        namespace:
          type: string
        index:
          type: integer
          format: int32
        constraints:
          type: string
        outdated:
          type: boolean
        deprecationPaths:
          type: array
          items:
            type: string
        warnings:
          type: array
          items:
            type: string
        infos:
          type: array
          items:
            type: string
    ValuePathExpression:
      required:
      - attributePath
      type: object
      properties:
        attributePath:
          $ref: "#/components/schemas/AttributeReference"
        attributeExpression:
          $ref: "#/components/schemas/FilterExpression"
    WorkerGroup:
      type: object
      properties:
        key:
          type: string
        fallback:
          $ref: "#/components/schemas/WorkerGroup.Fallback"
    WorkerGroup.Fallback:
      type: string
      enum:
      - FAIL
      - WAIT
      - CANCEL
    WorkerTaskRestartStrategy:
      type: string
      enum:
      - NEVER
      - IMMEDIATELY
      - AFTER_TERMINATION_GRACE_PERIOD
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: Bearer
