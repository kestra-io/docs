openapi: 3.0.1
info:
  title: Kestra EE
  description: |-
    All API operations allow an optional tenant identifier in the HTTP path, if you don't use multi-tenancy you must omit the tenant identifier.<br/>
    This means that, for example, when trying to access the Flows API, instead of using <code>/api/v1/{tenant}/flows</code> you must use <code>/api/v1/flows</code>.
tags:
- name: Flows
  description: Flows api
- name: Templates
  description: Templates api
- name: Executions
  description: Executions api
- name: Logs
  description: Logs api
- name: Namespaces
  description: Namespaces api
- name: Users
  description: Users api
- name: Groups
  description: Groups api
- name: Bindings
  description: Bindings api
- name: Roles
  description: Roles api
- name: Audit Logs
  description: Audit Logs api
- name: Auths
  description: Auth api
- name: Stats
  description: Stats api
- name: Tenants
  description: Tenants api
- name: Misc
  description: Misc api
paths:
  /api/v1/acls/actions:
    get:
      tags:
      - Misc
      summary: Get list of actions
      operationId: actions
      responses:
        "200":
          description: actions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Action"
  /api/v1/acls/permissions:
    get:
      tags:
      - Misc
      summary: Get list of permissions
      operationId: permissions
      responses:
        "200":
          description: permissions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
  /api/v1/auditlogs/find:
    post:
      tags:
      - Audit Logs
      summary: Find audit logs
      operationId: find
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuditLogController.FindRequest"
        required: true
      responses:
        "200":
          description: find 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditLogController.AuditLogWithUser"
  /api/v1/auditlogs/search:
    get:
      tags:
      - Audit Logs
      summary: Search for audit logs
      operationId: search
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: executionId
        in: query
        description: An execution filter
        schema:
          type: string
          nullable: true
      - name: userId
        in: query
        description: A user id filter
        schema:
          type: string
          nullable: true
      - name: id
        in: query
        description: A id filter
        schema:
          type: string
          nullable: true
      - name: permission
        in: query
        description: A permission filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Permission"
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: details
        in: query
        description: A list of auditLog details
        schema:
          type: object
          additionalProperties:
            type: string
          nullable: true
      - name: type
        in: query
        description: The event that create the audit log
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/CrudEventType"
      responses:
        "200":
          description: search 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_AuditLogController.AuditLogWithUser_"
  /api/v1/auditlogs/{id}/diff:
    get:
      tags:
      - Audit Logs
      summary: Get the diff of an audit log
      operationId: diff
      parameters:
      - name: id
        in: path
        description: The id of the audit log
        required: true
        schema:
          type: string
      responses:
        "200":
          description: diff 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditLogController.AuditLogDiff"
  /api/v1/auths:
    get:
      tags:
      - Auths
      summary: Get list of authentification methods
      operationId: index
      responses:
        "200":
          description: index 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthController.Auth"
  /api/v1/basicAuth:
    post:
      tags:
      - Misc
      summary: Add basic auth to current instance
      operationId: addBasicAuth
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MiscController.BasicAuthCredentials"
        required: true
      responses:
        "200":
          description: addBasicAuth 200 response
  /api/v1/bindings:
    post:
      tags:
      - Bindings
      summary: Create a binding
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Binding"
        required: true
      responses:
        "200":
          description: create 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractBindingController.BindingDetail"
  /api/v1/bindings/search:
    get:
      tags:
      - Bindings
      summary: Search for bindings
      operationId: find_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: Binding type filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Binding.Type"
      - name: id
        in: query
        description: External id filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_AbstractBindingController.BindingDetail_"
  /api/v1/bindings/{id}:
    get:
      tags:
      - Bindings
      summary: Get a binding
      operationId: index_1
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractBindingController.BindingDetail"
    delete:
      tags:
      - Bindings
      summary: Delete a binding
      operationId: delete
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/blueprints/community:
    get:
      tags:
      - Blueprints
      summary: List all blueprints
      operationId: blueprints
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: string
          nullable: true
      - name: tags
        in: query
        description: A tags filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        "200":
          description: blueprints 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_BlueprintController.BlueprintItem_"
  /api/v1/blueprints/community/tags:
    get:
      tags:
      - Blueprint Tags
      summary: List blueprint tags matching the filter
      operationId: blueprintTags
      parameters:
      - name: q
        in: query
        description: A string filter to get tags with matching blueprints only
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: blueprintTags 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlueprintController.BlueprintTagItem"
  /api/v1/blueprints/community/{id}:
    get:
      tags:
      - blueprints
      summary: Get a blueprint
      operationId: blueprint
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprint 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintController.BlueprintItemWithFlow"
  /api/v1/blueprints/community/{id}/flow:
    get:
      tags:
      - blueprints
      summary: Get a blueprint flow
      operationId: blueprintFlow
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprintFlow 200 response
          content:
            application/yaml:
              schema:
                type: string
  /api/v1/blueprints/community/{id}/graph:
    get:
      tags:
      - blueprints
      summary: Get a blueprint graph
      operationId: blueprintGraph
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprintGraph 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v1/blueprints/custom:
    get:
      tags:
      - Blueprints
      summary: List all internal blueprints
      operationId: internalBlueprints
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: string
          nullable: true
      - name: tags
        in: query
        description: A tags filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      responses:
        "200":
          description: internalBlueprints 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Blueprint_"
    post:
      tags:
      - Blueprints
      summary: Create a new internal blueprint
      operationId: createInternalBlueprints
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlueprintWithFlow"
        required: true
      responses:
        "200":
          description: createInternalBlueprints 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintWithFlow"
  /api/v1/blueprints/custom/tags:
    get:
      tags:
      - Blueprint Tags
      summary: List all internal blueprint tags
      operationId: internalBlueprintTags
      parameters:
      - name: q
        in: query
        description: A string filter to get tags with matching blueprints only
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: internalBlueprintTags 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/blueprints/custom/{id}:
    get:
      tags:
      - blueprints
      summary: Get an internal blueprint
      operationId: internalBlueprint
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprint 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintWithFlow"
    put:
      tags:
      - Blueprints
      summary: Update an internal blueprint
      operationId: updateInternalBlueprints
      parameters:
      - name: id
        in: path
        description: The id of the internal blueprint to update
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlueprintWithFlow"
        required: true
      responses:
        "200":
          description: updateInternalBlueprints 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintWithFlow"
    delete:
      tags:
      - Blueprints
      summary: Delete an internal blueprint
      operationId: internalBlueprints_1
      parameters:
      - name: id
        in: path
        description: The internal blueprint id to delete
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprints_1 200 response
  /api/v1/blueprints/custom/{id}/flow:
    get:
      tags:
      - blueprints
      summary: Get an internal blueprint flow
      operationId: internalBlueprintFlow
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprintFlow 200 response
          content:
            application/yaml:
              schema:
                type: string
  /api/v1/cluster/services/active:
    get:
      tags:
      - Services
      summary: Get details about active services
      operationId: active
      responses:
        "200":
          description: active 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterController.ApiActiveServiceList"
  /api/v1/cluster/services/search:
    get:
      tags:
      - Services
      summary: Search for service
      operationId: find_2
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: state
        in: query
        description: The state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Service.ServiceState"
      - name: type
        in: query
        description: The server type filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Service.ServiceType"
      responses:
        "200":
          description: find_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ClusterController.ApiServiceInstance_"
  /api/v1/cluster/services/{id}:
    get:
      tags:
      - Services
      summary: Get details about a service
      operationId: index_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceInstance"
  /api/v1/configs:
    get:
      tags:
      - Misc
      summary: Get current configurations
      operationId: configuration
      responses:
        "200":
          description: configuration 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MiscController.ConfigurationEe"
  /api/v1/executions:
    get:
      tags:
      - Executions
      summary: Search for executions for a flow
      operationId: findByFlowId
      parameters:
      - name: namespace
        in: query
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: query
        description: The flow id
        required: true
        schema:
          type: string
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: findByFlowId 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Execution_"
  /api/v1/executions/by-ids:
    delete:
      tags:
      - Executions
      summary: Delete a list of executions
      operationId: deleteByIds
      parameters:
      - name: includeNonTerminated
        in: query
        description: Whether to delete non-terminated executions
        schema:
          type: boolean
          nullable: true
          default: false
      - name: deleteLogs
        in: query
        description: Whether to delete execution logs
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteMetrics
        in: query
        description: Whether to delete execution metrics
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteStorage
        in: query
        description: Whether to delete execution files in the internal storage
        required: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Deleted with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/by-query:
    delete:
      tags:
      - Executions
      summary: Delete executions filter by query parameters
      operationId: deleteByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: includeNonTerminated
        in: query
        description: Whether to delete non-terminated executions
        schema:
          type: boolean
          nullable: true
          default: false
      - name: deleteLogs
        in: query
        description: Whether to delete execution logs
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteMetrics
        in: query
        description: Whether to delete execution metrics
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteStorage
        in: query
        description: Whether to delete execution files in the internal storage
        required: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: deleteByQuery 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/executions/change-status/by-ids:
    post:
      tags:
      - Executions
      summary: Change status of executions by id
      operationId: changeStatusById
      parameters:
      - name: newStatus
        in: query
        description: The new status of the executions
        required: true
        schema:
          $ref: "#/components/schemas/State.Type"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Changed status with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/change-status/by-query:
    post:
      tags:
      - Executions
      summary: Change executions status by query parameters
      operationId: changeStatusByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: newStatus
        in: query
        description: The new status of the executions
        required: true
        schema:
          $ref: "#/components/schemas/State.Type"
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Changed status with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/flows/{namespace}/{flowId}:
    get:
      tags:
      - Executions
      summary: Get flow information's for an execution
      operationId: getFlowForExecution
      parameters:
      - name: namespace
        in: path
        description: The namespace of the flow
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: getFlowForExecution 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowForExecution"
  /api/v1/executions/kill/by-ids:
    delete:
      tags:
      - Executions
      summary: Kill a list of executions
      operationId: killByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Killed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/kill/by-query:
    delete:
      tags:
      - Executions
      summary: Kill executions filter by query parameters
      operationId: killByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      responses:
        "200":
          description: killByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/labels/by-ids:
    post:
      tags:
      - Executions
      summary: Set labels on a list of executions
      operationId: setLabelsByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionController.SetLabelsByIdsRequest"
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Killed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/labels/by-query:
    post:
      tags:
      - Executions
      summary: Set label on executions filter by query parameters
      operationId: setLabelsByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Label"
        required: true
      responses:
        "200":
          description: setLabelsByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/namespaces:
    get:
      tags:
      - Executions
      summary: Get all namespaces that have executable flows
      operationId: listDistinctNamespace
      responses:
        "200":
          description: listDistinctNamespace 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/executions/namespaces/{namespace}/flows:
    get:
      tags:
      - Executions
      summary: Get all flow ids for a namespace
      operationId: getFlowsByNamespace
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowsByNamespace 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowForExecution"
  /api/v1/executions/replay/by-ids:
    post:
      tags:
      - Executions
      summary: Create new executions from old ones. Keep the flow revision
      operationId: replayByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Replayed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/replay/by-query:
    post:
      tags:
      - Executions
      summary: Create new executions from old ones filter by query parameters. Keep
        the flow revision
      operationId: replayByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      responses:
        "200":
          description: replayByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/restart/by-ids:
    post:
      tags:
      - Executions
      summary: Restart a list of executions
      operationId: restartByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Restarted with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/restart/by-query:
    post:
      tags:
      - Executions
      summary: Restart executions filter by query parameters
      operationId: restartByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      responses:
        "200":
          description: restartByQuery 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/executions/resume/by-ids:
    post:
      tags:
      - Executions
      summary: Resume a list of paused executions
      operationId: resumeByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Resumed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/executions/resume/by-query:
    post:
      tags:
      - Executions
      summary: Resume executions filter by query parameters
      operationId: resumeByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      responses:
        "200":
          description: resumeByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/search:
    get:
      tags:
      - Executions
      summary: Search for executions
      operationId: find_3
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      responses:
        "200":
          description: find_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Execution_"
  /api/v1/executions/trigger/{namespace}/{id}:
    post:
      tags:
      - Executions
      summary: Trigger a new execution for a flow
      operationId: trigger
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: wait
        in: query
        description: If the server will wait the end of the execution
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: The flow revision or latest if null
        schema:
          type: integer
          format: int32
          nullable: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              nullable: true
              items:
                type: string
                format: binary
      responses:
        "409":
          description: if the flow is disabled
        "200":
          description: trigger 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutionController.ExecutionResponse"
  /api/v1/executions/webhook/{namespace}/{id}/{key}:
    get:
      tags:
      - Executions
      summary: Trigger a new execution by GET webhook trigger
      operationId: webhookTriggerGet
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerGet 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
    put:
      tags:
      - Executions
      summary: Trigger a new execution by PUT webhook trigger
      operationId: webhookTriggerPut
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerPut 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
    post:
      tags:
      - Executions
      summary: Trigger a new execution by POST webhook trigger
      operationId: webhookTriggerPost
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerPost 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/executions/{executionId}:
    get:
      tags:
      - Executions
      summary: Get an execution
      operationId: get
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: get 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
    delete:
      tags:
      - Executions
      summary: Delete an execution
      operationId: delete_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: deleteLogs
        in: query
        description: Whether to delete execution logs
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteMetrics
        in: query
        description: Whether to delete execution metrics
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteStorage
        in: query
        description: Whether to delete execution files in the internal storage
        required: true
        schema:
          type: boolean
          default: true
      responses:
        "204":
          description: On success
        "200":
          description: delete_1 200 response
  /api/v1/executions/{executionId}/change-status:
    post:
      tags:
      - Executions
      summary: Change the status of an execution
      operationId: changeStatus
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: status
        in: query
        description: The new status of the execution
        required: true
        schema:
          $ref: "#/components/schemas/State.Type"
      responses:
        "200":
          description: changeStatus 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/executions/{executionId}/eval/{taskRunId}:
    post:
      tags:
      - Executions
      summary: Evaluate a variable expression for this taskrun
      operationId: eval
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: taskRunId
        in: path
        description: The taskrun id
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: eval 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionController.EvalResult"
  /api/v1/executions/{executionId}/file:
    get:
      tags:
      - Executions
      summary: Download file for an execution
      operationId: file
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: file 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/v1/executions/{executionId}/file/metas:
    get:
      tags:
      - Executions
      summary: Get file meta information for an execution
      operationId: filesize
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: filesize 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileMetas"
  /api/v1/executions/{executionId}/file/preview:
    get:
      tags:
      - Executions
      summary: Get file preview for an execution
      operationId: filePreview
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      - name: maxRows
        in: query
        description: The max row returns
        required: true
        schema:
          type: integer
          format: int32
      - name: encoding
        in: query
        description: The file encoding as Java charset name. Defaults to UTF-8
        required: true
        schema:
          type: string
          default: UTF-8
        example: ISO-8859-1
      responses:
        "200":
          description: filePreview 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/{executionId}/flow:
    get:
      tags:
      - Executions
      summary: Get flow information's for an execution
      operationId: getFlowForExecutionById
      parameters:
      - name: executionId
        in: path
        description: The execution that you want flow information's
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowForExecutionById 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowForExecution"
  /api/v1/executions/{executionId}/follow:
    get:
      tags:
      - Executions
      summary: Follow an execution
      operationId: follow
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: follow 200 response
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/Event_Execution_"
  /api/v1/executions/{executionId}/graph:
    get:
      tags:
      - Executions
      summary: Generate a graph for an execution
      operationId: flowGraph
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: subflows
        in: query
        description: The subflow tasks to display
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: flowGraph 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowGraph"
  /api/v1/executions/{executionId}/kill:
    delete:
      tags:
      - Executions
      summary: Kill an execution
      operationId: kill
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: isOnKillCascade
        in: query
        description: Specifies whether killing the execution also kill all subflow
          executions.
        required: true
        schema:
          type: boolean
          default: true
      responses:
        "202":
          description: Execution kill was requested successfully
        "409":
          description: if the executions is already finished
        "404":
          description: if the executions is not found
        "200":
          description: kill 200 response
          content:
            text/json:
              schema:
                type: object
  /api/v1/executions/{executionId}/labels:
    post:
      tags:
      - Executions
      summary: Add or update labels of a terminated execution
      operationId: setLabels
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Label"
        required: true
      responses:
        "404":
          description: If the execution cannot be found
        "400":
          description: If the execution is not terminated
        "200":
          description: setLabels 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/{executionId}/replay:
    post:
      tags:
      - Executions
      summary: Create a new execution from an old one and start it from a specified
        task run id
      operationId: replay
      parameters:
      - name: executionId
        in: path
        description: the original execution id to clone
        required: true
        schema:
          type: string
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: revision
        in: query
        description: The flow revision to use for new execution
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: replay 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/executions/{executionId}/restart:
    post:
      tags:
      - Executions
      summary: Restart a new execution from an old one
      operationId: restart
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision to use for new execution
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: restart 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/executions/{executionId}/resume:
    post:
      tags:
      - Executions
      summary: Resume a paused execution.
      operationId: resume
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
                format: binary
        required: true
      responses:
        "204":
          description: On success
        "409":
          description: if the executions is not paused
        "200":
          description: resume 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/executions/{executionId}/resume/validate:
    post:
      tags:
      - Executions
      summary: Validate inputs to resume a paused execution.
      operationId: validateInputsOnResume
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
                format: binary
        required: true
      responses:
        "204":
          description: On success
        "409":
          description: if the executions is not paused
        "200":
          description: validateInputsOnResume 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutionController.ApiValidateExecutionInputsResponse"
  /api/v1/executions/{executionId}/state:
    post:
      tags:
      - Executions
      summary: Change state for a taskrun in an execution
      operationId: changeState
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionController.StateRequest"
        required: true
      responses:
        "200":
          description: changeState 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/executions/{namespace}/{id}:
    post:
      tags:
      - Executions
      summary: Create a new execution for a flow
      operationId: create_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: wait
        in: query
        description: If the server will wait the end of the execution
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: The flow revision or latest if null
        schema:
          type: integer
          format: int32
          nullable: true
      - name: scheduleDate
        in: query
        description: Schedule the flow on a specific date
        schema:
          type: string
          format: date-time
          nullable: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              nullable: true
              items:
                type: string
                format: binary
      responses:
        "409":
          description: if the flow is disabled
        "200":
          description: create_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutionController.ExecutionResponse"
  /api/v1/executions/{namespace}/{id}/validate:
    post:
      tags:
      - Executions
      summary: Validate the creation of a new execution for a flow
      operationId: validateInputsOnCreate
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        required: true
        schema:
          type: array
          items:
            type: string
      - name: revision
        in: query
        description: The flow revision or latest if null
        schema:
          type: integer
          format: int32
          nullable: true
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
                format: binary
        required: true
      responses:
        "409":
          description: if the flow is disabled
        "200":
          description: validateInputsOnCreate 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutionController.ApiValidateExecutionInputsResponse"
  /api/v1/flows:
    post:
      tags:
      - Flows
      summary: Create a flow from json object
      operationId: create_2
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/Flow"
          application/x-yaml:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: create_2 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Flow"
                - $ref: "#/components/schemas/FlowWithSource"
              example: null
      deprecated: true
  /api/v1/flows/delete/by-ids:
    delete:
      tags:
      - Flows
      summary: Delete flows by their IDs.
      operationId: deleteByIds_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: deleteByIds_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/flows/delete/by-query:
    delete:
      tags:
      - Flows
      summary: Delete flows returned by the query parameters.
      operationId: deleteByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: deleteByQuery_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/flows/disable/by-ids:
    post:
      tags:
      - Flows
      summary: Disable flows by their IDs.
      operationId: disableByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: disableByIds 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/flows/disable/by-query:
    post:
      tags:
      - Flows
      summary: Disable flows returned by the query parameters.
      operationId: disableByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: disableByQuery 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/flows/distinct-namespaces:
    get:
      tags:
      - Flows
      summary: List all distinct namespaces
      operationId: listDistinctNamespace_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: listDistinctNamespace_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/flows/enable/by-ids:
    post:
      tags:
      - Flows
      summary: Enable flows by their IDs.
      operationId: enableByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: enableByIds 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/flows/enable/by-query:
    post:
      tags:
      - Flows
      summary: Enable flows returned by the query parameters.
      operationId: enableByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: enableByQuery 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/flows/export/by-ids:
    post:
      tags:
      - Flows
      summary: Export flows as a ZIP archive of yaml sources.
      operationId: exportByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: exportByIds 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/flows/export/by-query:
    get:
      tags:
      - Flows
      summary: Export flows as a ZIP archive of yaml sources.
      operationId: exportByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: exportByQuery 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/flows/graph:
    post:
      tags:
      - Flows
      summary: Generate a graph for a flow source
      operationId: flowGraphSource
      parameters:
      - name: subflows
        in: query
        description: The subflow tasks to display
        schema:
          type: array
          nullable: true
          items:
            type: string
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: flowGraphSource 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowGraph"
  /api/v1/flows/import:
    post:
      tags:
      - Flows
      summary: Import flows as a ZIP archive of yaml sources or a multi-objects YAML
        file.
      operationId: importFlows
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileUpload:
                  type: string
                  description: "The file to import, can be a ZIP archive or a multi-objects\
                    \ YAML file"
                  format: binary
            encoding:
              fileUpload:
                contentType: application/octet-stream
        required: true
      responses:
        "204":
          description: On success
        "200":
          description: importFlows 200 response
  /api/v1/flows/search:
    get:
      tags:
      - Flows
      summary: Search for flows
      operationId: find_4
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Flow_"
  /api/v1/flows/source:
    get:
      tags:
      - Flows
      summary: Search for flows source code
      operationId: source
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: source 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_SearchResult_Flow__"
  /api/v1/flows/validate:
    post:
      tags:
      - Flows
      summary: Validate a list of flows
      operationId: validateFlows
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateFlows 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/flows/validate/task:
    post:
      tags:
      - Flows
      summary: Validate a list of flows
      operationId: validateTask
      parameters:
      - name: section
        in: query
        description: Type of task
        required: true
        schema:
          $ref: "#/components/schemas/FlowController.TaskValidationType"
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
            example: null
          application/json:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: validateTask 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/flows/validate/trigger:
    post:
      tags:
      - Flows
      summary: Validate trigger
      operationId: validateTrigger
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateTrigger 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/flows/{namespace}:
    get:
      tags:
      - Flows
      summary: Retrieve all flows from a given namespace
      operationId: getFlowsByNamespace_1
      parameters:
      - name: namespace
        in: path
        description: Namespace to filter flows
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowsByNamespace_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Flow"
    post:
      tags:
      - Flows
      summary: Update a complete namespace from json object
      description: |-
        All flow will be created / updated for this namespace.
        Flow that already created but not in `flows` will be deleted if the query delete is `true`
      operationId: updateNamespace
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: delete
        in: query
        description: If missing flow should be deleted
        required: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Flow"
            example: null
          application/x-yaml:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: updateNamespace 200 response
          content:
            application/json:
              schema:
                oneOf:
                - type: array
                  items:
                    $ref: "#/components/schemas/Flow"
                - type: array
                  items:
                    $ref: "#/components/schemas/FlowWithSource"
              example: null
      deprecated: true
  /api/v1/flows/{namespace}/{id}:
    get:
      tags:
      - Flows
      summary: Get a flow
      operationId: index_3
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Include the source code
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: Get latest revision by default
        schema:
          type: integer
          format: int32
          nullable: true
      - name: allowDeleted
        in: query
        description: Get flow even if deleted
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: index_3 200 response
          content:
            application/json:
              schema:
                type: object
    put:
      tags:
      - Flows
      summary: Update a flow
      operationId: update
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
            example: null
          '*/*':
            schema:
              $ref: "#/components/schemas/Flow"
            example: null
        required: true
      responses:
        "200":
          description: update 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/FlowWithSource"
                - $ref: "#/components/schemas/Flow"
              example: null
      deprecated: true
    delete:
      tags:
      - Flows
      summary: Delete a flow
      operationId: delete_2
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "200":
          description: delete_2 200 response
  /api/v1/flows/{namespace}/{id}/dependencies:
    get:
      tags:
      - Flows
      summary: Get flow dependencies
      operationId: dependencies
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: destinationOnly
        in: query
        description: "if true, list only destination dependencies, otherwise list\
          \ also source dependencies"
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: dependencies 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowTopologyGraph"
  /api/v1/flows/{namespace}/{id}/graph:
    get:
      tags:
      - Flows
      summary: Generate a graph for a flow
      operationId: flowGraph_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      - name: subflows
        in: query
        description: The subflow tasks to display
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: flowGraph_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowGraph"
  /api/v1/flows/{namespace}/{id}/revisions:
    get:
      tags:
      - Flows
      summary: Get revisions for a flow
      operationId: revisions
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: revisions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowWithSource"
  /api/v1/flows/{namespace}/{id}/tasks/{taskId}:
    get:
      tags:
      - Flows
      summary: Get a flow task
      operationId: flowTask
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: flowTask 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
  /api/v1/flows/{namespace}/{id}/{taskId}:
    patch:
      tags:
      - Flows
      summary: Update a single task on a flow
      operationId: updateTask
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        required: true
      responses:
        "200":
          description: updateTask 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flow"
      deprecated: true
  /api/v1/forgotten-password:
    get:
      summary: Send an email to reset a password.
      description: "Send an email to reset a password. Note that whatever the username\
        \ is found or not, the response will always be 200 to avoid leaking information."
      operationId: forgottenPassword
      parameters:
      - name: username
        in: query
        description: User that has forgotten his password
        required: true
        schema:
          type: string
      responses:
        "200":
          description: forgottenPassword 200 response
          content:
            application/json:
              schema:
                type: string
  /api/v1/groups:
    post:
      tags:
      - Groups
      summary: Create a group
      operationId: create_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          description: create_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
  /api/v1/groups/autocomplete:
    post:
      tags:
      - Groups
      summary: List groups for autocomplete
      operationId: autocomplete
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
  /api/v1/groups/ids:
    post:
      tags:
      - Groups
      summary: List groups by ids
      operationId: ids
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
        required: true
      responses:
        "200":
          description: ids 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
  /api/v1/groups/search:
    get:
      tags:
      - Groups
      summary: Search for groups
      operationId: find_5
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_5 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Group_"
  /api/v1/groups/{id}:
    get:
      tags:
      - Groups
      summary: Get a group
      operationId: index_4
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    put:
      tags:
      - Groups
      summary: Update a group
      operationId: update_1
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          description: update_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    delete:
      tags:
      - Groups
      summary: Delete a group
      operationId: delete_3
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/groups/{id}/members:
    get:
      tags:
      - Groups
      summary: Search for users in a group
      operationId: members
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: members 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ApiUser_"
  /api/v1/groups/{id}/members/{userId}:
    put:
      tags:
      - Groups
      summary: Add a group for a user
      operationId: addGroup
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: addGroup 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
    delete:
      tags:
      - Groups
      summary: Delete a group for a user
      operationId: deleteGroup
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteGroup 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/integrations/{integration}/scim/v2/Groups:
    get:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Find by a combination of query parameters
      operationId: query
      parameters:
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: filter
        in: query
        schema:
          type: string
          nullable: true
      - name: sortBy
        in: query
        schema:
          type: string
          nullable: true
      - name: sortOrder
        in: query
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/SortOrder"
      - name: startIndex
        in: query
        schema:
          type: integer
          format: int32
          nullable: true
      - name: count
        in: query
        schema:
          type: integer
          format: int32
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    post:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Create
      operationId: create_4
      parameters:
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/ScimUser"
          application/json:
            schema:
              $ref: "#/components/schemas/ScimGroup"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: create_4 200 response
          content:
            application/scim+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /api/v1/integrations/{integration}/scim/v2/Groups/.search:
    post:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Search
      operationId: find_6
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        required: true
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
  /api/v1/integrations/{integration}/scim/v2/Groups/{id}:
    get:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Find by id
      operationId: getById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    put:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Update
      operationId: update_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/ScimResource"
          application/json:
            schema:
              $ref: "#/components/schemas/ScimGroup"
        required: true
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    delete:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Delete from the backing store
      operationId: delete_4
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: integration
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: delete_4 200 response
          content:
            application/scim+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
    patch:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Patch a portion of the backing store
      operationId: patch
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/PatchRequest"
          application/json:
            schema:
              $ref: "#/components/schemas/PatchRequest"
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: patch 200 response
          content:
            application/scim+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /api/v1/integrations/{integration}/scim/v2/ResourceTypes:
    get:
      tags:
      - SCIM-Configuration
      description: Get All Resource Types
      operationId: getAllResourceTypes
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceType"
  /api/v1/integrations/{integration}/scim/v2/ResourceTypes/{name}:
    get:
      tags:
      - SCIM-Configuration
      description: Get Resource Type by URN
      operationId: getResourceType
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: integration
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ResourceType"
  /api/v1/integrations/{integration}/scim/v2/Schemas:
    get:
      tags:
      - SCIM-Configuration
      description: Get All Schemas
      operationId: getAllSchemas
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Schema"
  /api/v1/integrations/{integration}/scim/v2/Schemas/{uri}:
    get:
      tags:
      - SCIM-Configuration
      description: Get Schemas by URN
      operationId: getSchema
      parameters:
      - name: uri
        in: path
        required: true
        schema:
          type: string
      - name: integration
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/Schema"
  /api/v1/integrations/{integration}/scim/v2/ServiceProviderConfig:
    get:
      tags:
      - SCIM-Configuration
      description: Get Service Provider Configuration
      operationId: getServiceProviderConfiguration
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ServiceProviderConfiguration"
  /api/v1/integrations/{integration}/scim/v2/Users:
    get:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Find by a combination of query parameters
      operationId: query_1
      parameters:
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: filter
        in: query
        schema:
          type: string
          nullable: true
      - name: sortBy
        in: query
        schema:
          type: string
          nullable: true
      - name: sortOrder
        in: query
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/SortOrder"
      - name: startIndex
        in: query
        schema:
          type: integer
          format: int32
          nullable: true
      - name: count
        in: query
        schema:
          type: integer
          format: int32
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    post:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Create
      operationId: create_5
      parameters:
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/ScimUser"
          application/json:
            schema:
              $ref: "#/components/schemas/ScimUser"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: create_5 200 response
          content:
            application/scim+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /api/v1/integrations/{integration}/scim/v2/Users/.search:
    post:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Search
      operationId: find_7
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        required: true
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
  /api/v1/integrations/{integration}/scim/v2/Users/{id}:
    get:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Find by id
      operationId: getById_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    put:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Update
      operationId: update_3
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/ScimResource"
          application/json:
            schema:
              $ref: "#/components/schemas/ScimUser"
        required: true
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    delete:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Delete from the backing store
      operationId: delete_5
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: integration
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: delete_5 200 response
          content:
            application/scim+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
    patch:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Patch a portion of the backing store
      operationId: patch_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/PatchRequest"
          application/json:
            schema:
              $ref: "#/components/schemas/PatchRequest"
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: patch_1 200 response
          content:
            application/scim+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /api/v1/license-info:
    get:
      tags:
      - Misc
      summary: Get current license information
      operationId: licenseInfo
      responses:
        "200":
          description: licenseInfo 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MiscController.LicenseInfo"
  /api/v1/logs/search:
    get:
      tags:
      - Logs
      summary: Search for logs
      operationId: find_8
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: triggerId
        in: query
        description: A trigger id filter
        schema:
          type: string
          nullable: true
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      responses:
        "200":
          description: find_8 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_LogEntry_"
  /api/v1/logs/{executionId}:
    get:
      tags:
      - Logs
      summary: "Get logs for a specific execution, taskrun or task"
      operationId: findByExecution
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: findByExecution 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogEntry"
    delete:
      tags:
      - Logs
      summary: "Delete logs for a specific execution, taskrun or task"
      operationId: delete_6
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: delete_6 200 response
  /api/v1/logs/{executionId}/download:
    get:
      tags:
      - Logs
      summary: "Download logs for a specific execution, taskrun or task"
      operationId: download
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      responses:
        "200":
          description: download 200 response
          content:
            text/plain:
              schema:
                type: string
                format: binary
  /api/v1/logs/{executionId}/follow:
    get:
      tags:
      - Logs
      summary: Follow logs for a specific execution
      operationId: follow_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      responses:
        "200":
          description: follow_1 200 response
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/Event_LogEntry_"
  /api/v1/logs/{namespace}/{flowId}:
    delete:
      tags:
      - Logs
      summary: "Delete logs for a specific execution, taskrun or task"
      operationId: deleteFromFlow
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        schema:
          type: string
      - name: triggerId
        in: query
        description: The trigger id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteFromFlow 200 response
  /api/v1/me:
    get:
      tags:
      - Auths
      summary: Get current user
      operationId: index_5
      responses:
        "200":
          description: index_5 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentUserController.Me"
    patch:
      tags:
      - Auths
      summary: Updates details for the authenticated user. Returns user's updated
        information upon success.
      operationId: patch_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CurrentUserController.UserDetailsRequest"
        required: true
      responses:
        "200":
          description: patch_2 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/me/api-tokens:
    get:
      tags:
      - Auths
      summary: List all API Tokens for the authenticated user
      operationId: listApiTokens
      responses:
        "200":
          description: listApiTokens 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Auths
      summary: Create new API Token for authenticated user
      operationId: createApiToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiTokenRequest"
        required: true
      responses:
        "200":
          description: createApiToken 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/me/api-tokens/{tokenId}:
    delete:
      tags:
      - Auths
      summary: Delete an API Token for authenticated user
      operationId: deleteApiToken
      parameters:
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/metrics/aggregates/{namespace}/{flowId}/{metric}:
    get:
      tags:
      - Metrics
      summary: Get metrics aggregations for a specific flow
      operationId: aggregateByFlowId
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: metric
        in: path
        description: The metric name
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: "The start datetime, default to now - 30 days"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: "The end datetime, default to now"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: aggregation
        in: query
        description: "The type of aggregation: avg, sum, min or max"
        required: true
        schema:
          type: string
          default: sum
      responses:
        "200":
          description: aggregateByFlowId 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricAggregations"
  /api/v1/metrics/aggregates/{namespace}/{flowId}/{taskId}/{metric}:
    get:
      tags:
      - Metrics
      summary: Get metrics aggregations for a specific flow
      operationId: aggregateByFlowIdAndTaskId
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task Id
        required: true
        schema:
          type: string
      - name: metric
        in: path
        description: The metric name
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: "The start datetime, default to now - 30 days"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: "The end datetime, default to now"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: aggregation
        in: query
        description: "The type of aggregation: avg, sum, min or max"
        required: true
        schema:
          type: string
          default: sum
      responses:
        "200":
          description: aggregateByFlowIdAndTaskId 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricAggregations"
  /api/v1/metrics/names/{namespace}/{flowId}:
    get:
      tags:
      - Metrics
      summary: Get metrics names for a specific flow
      operationId: flowMetrics
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: flowMetrics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/metrics/names/{namespace}/{flowId}/{taskId}:
    get:
      tags:
      - Metrics
      summary: Get metrics names for a specific task in a flow
      operationId: taskMetrics
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: taskMetrics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/metrics/tasks/{namespace}/{flowId}:
    get:
      tags:
      - Metrics
      summary: "Get tasks id that have metrics for a specific flow, include deleted\
        \ or renamed tasks"
      operationId: tasks
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: tasks 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/metrics/{executionId}:
    get:
      tags:
      - Metrics
      summary: Get metrics for a specific execution
      operationId: findByExecution_1
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: findByExecution_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_MetricEntry_"
  /api/v1/namespaces:
    post:
      tags:
      - Namespaces
      summary: Create a namespace
      operationId: create_6
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Namespace"
        required: true
      responses:
        "200":
          description: create_6 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Namespace"
  /api/v1/namespaces/autocomplete:
    post:
      tags:
      - Namespaces
      summary: List namespaces for autocomplete
      operationId: autocomplete_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
      responses:
        "200":
          description: autocomplete_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/namespaces/search:
    get:
      tags:
      - Namespaces
      summary: Search for namespaces
      operationId: find_9
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: existing
        in: query
        description: Return only existing namespace
        schema:
          type: boolean
          nullable: true
          default: false
      responses:
        "200":
          description: find_9 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_NamespaceWithDisabled_"
  /api/v1/namespaces/{id}:
    get:
      tags:
      - Namespaces
      summary: Get a namespace
      operationId: index_6
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_6 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Namespace"
    put:
      tags:
      - Namespaces
      summary: Update a namespace
      operationId: update_4
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Namespace"
        required: true
      responses:
        "200":
          description: update_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Namespace"
    delete:
      tags:
      - Namespaces
      summary: Delete a flow
      operationId: delete_7
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/namespaces/{id}/inherited-plugindefaults:
    get:
      tags:
      - Namespaces
      summary: List inherited plugin defaults
      operationId: inheritedPluginDefaults
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inheritedPluginDefaults 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PluginDefault"
  /api/v1/namespaces/{id}/inherited-variables:
    get:
      tags:
      - Namespaces
      summary: List inherited variables
      operationId: inheritedVariables
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inheritedVariables 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v1/namespaces/{namespace}/dependencies:
    get:
      tags:
      - Flows
      summary: Get flow dependencies
      operationId: dependencies_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: destinationOnly
        in: query
        description: "if true, list only destination dependencies, otherwise list\
          \ also source dependencies"
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: dependencies_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowTopologyGraph"
  /api/v1/namespaces/{namespace}/files:
    get:
      tags:
      - Files
      summary: Get namespace file content
      operationId: file_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: file_1 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    put:
      tags:
      - Files
      summary: Move a file or directory
      operationId: move
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: from
        in: query
        description: The internal storage uri to move from
        required: true
        schema:
          type: string
          format: uri
      - name: to
        in: query
        description: The internal storage uri to move to
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: move 200 response
    post:
      tags:
      - Files
      summary: Create a file
      operationId: createFile
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileContent:
                  type: string
                  format: binary
            encoding:
              fileContent:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: createFile 200 response
    delete:
      tags:
      - Files
      summary: Delete a file or directory
      operationId: delete_8
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri of the file / directory to delete
        required: true
        schema:
          type: string
          format: uri
      responses:
        "200":
          description: delete_8 200 response
  /api/v1/namespaces/{namespace}/files/directory:
    get:
      tags:
      - Files
      summary: List directory content
      operationId: list
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          format: uri
          nullable: true
      responses:
        "200":
          description: list 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileAttributes"
    post:
      tags:
      - Files
      summary: Create a directory
      operationId: createDirectory
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          format: uri
          nullable: true
      responses:
        "200":
          description: createDirectory 200 response
  /api/v1/namespaces/{namespace}/files/export:
    get:
      tags:
      - Files
      summary: Export namespace files as a ZIP
      operationId: export
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: export 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/namespaces/{namespace}/files/search:
    get:
      tags:
      - Files
      summary: Find files which path contain the given string in their URI
      operationId: search_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: The string the file path should contain
        required: true
        schema:
          type: string
      responses:
        "200":
          description: search_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/namespaces/{namespace}/files/stats:
    get:
      tags:
      - Files
      summary: "Get namespace file stats such as size, creation & modification dates\
        \ and type"
      operationId: stats
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          format: uri
          nullable: true
      responses:
        "200":
          description: stats 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileAttributes"
  /api/v1/namespaces/{namespace}/inherited-secrets:
    get:
      tags:
      - Namespaces
      summary: List inherited secrets
      operationId: inheritedSecrets
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inheritedSecrets 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
  /api/v1/namespaces/{namespace}/kv:
    get:
      tags:
      - KV
      summary: List all keys for a namespace
      operationId: list_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: list_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KVEntry"
  /api/v1/namespaces/{namespace}/kv/{key}:
    get:
      tags:
      - KV
      summary: Get value for a key
      operationId: get_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The key
        required: true
        schema:
          type: string
      responses:
        "200":
          description: get_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KVController.TypedValue"
    put:
      tags:
      - KV
      summary: Puts a key-value pair in store
      operationId: put
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The key
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: put 200 response
    delete:
      tags:
      - KV
      summary: Delete a key-value pair
      operationId: delete_9
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The key
        required: true
        schema:
          type: string
      responses:
        "200":
          description: delete_9 200 response
          content:
            application/json:
              schema:
                type: boolean
  /api/v1/namespaces/{namespace}/secrets:
    get:
      tags:
      - Namespaces
      summary: Get secrets for a namespace
      operationId: listSecret
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listSecret 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiSecretMeta"
    put:
      tags:
      - Namespaces
      summary: Update secrets for a namespace
      operationId: putSecrets
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiSecretValue"
        required: true
      responses:
        "200":
          description: putSecrets 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiSecretMeta"
  /api/v1/namespaces/{namespace}/secrets/{key}:
    delete:
      tags:
      - Namespaces
      summary: Delete a secret for a namespace
      operationId: deleteSecret
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The secret key
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteSecret 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    patch:
      tags:
      - Namespaces
      summary: Patch a secret metadata for a namespace
      operationId: patchSecret
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiSecretMeta"
        required: true
      responses:
        "200":
          description: patchSecret 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiSecretMeta"
  /api/v1/plugins:
    get:
      tags:
      - Plugins
      summary: Get list of plugins
      operationId: search_2
      responses:
        "200":
          description: search_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plugin"
  /api/v1/plugins/groups/subgroups:
    get:
      tags:
      - Plugins
      summary: Get plugins group by subgroups
      operationId: subgroups
      responses:
        "200":
          description: subgroups 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plugin"
  /api/v1/plugins/icons:
    get:
      tags:
      - Plugins
      summary: Get plugins icons
      operationId: icons
      responses:
        "200":
          description: icons 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/PluginIcon"
  /api/v1/plugins/icons/groups:
    get:
      tags:
      - Plugins
      summary: Get plugins icons
      operationId: pluginGroupIcons
      responses:
        "200":
          description: pluginGroupIcons 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/PluginIcon"
  /api/v1/plugins/inputs:
    get:
      tags:
      - Plugins
      summary: Get all types for an inputs
      operationId: inputs
      responses:
        "200":
          description: inputs 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InputType"
  /api/v1/plugins/inputs/{type}:
    get:
      tags:
      - Plugins
      summary: Get all json schemas for a type
      description: "The schema will be output as [http://json-schema.org/draft-07/schema](Json\
        \ Schema Draft 7)"
      operationId: inputSchemas
      parameters:
      - name: type
        in: path
        description: The schema needed
        required: true
        schema:
          $ref: "#/components/schemas/Type"
      responses:
        "200":
          description: inputSchemas 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationWithSchema"
  /api/v1/plugins/schemas/{type}:
    get:
      tags:
      - Plugins
      summary: Get all json schemas for a type
      description: "The schema will be output as [http://json-schema.org/draft-07/schema](Json\
        \ Schema Draft 7)"
      operationId: schemas
      parameters:
      - name: type
        in: path
        description: The schema needed
        required: true
        schema:
          $ref: "#/components/schemas/SchemaType"
      - name: arrayOf
        in: query
        description: If schema should be an array of requested type
        schema:
          type: boolean
          nullable: true
          default: false
      responses:
        "200":
          description: schemas 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v1/plugins/{cls}:
    get:
      tags:
      - Plugins
      summary: Get plugin documentation
      operationId: pluginDocumentation
      parameters:
      - name: cls
        in: path
        description: The plugin full class name
        required: true
        schema:
          type: string
      - name: all
        in: query
        description: Include all the properties
        required: true
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: pluginDocumentation 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationWithSchema"
  /api/v1/reset-password:
    post:
      summary: Change a password for given token.
      description: "Change a password for given token. If password does not match\
        \ password policy, use can still retry."
      operationId: resetPassword
      requestBody:
        description: An object containing the token and the new password.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthController.ResetPasswordRequest"
        required: true
      responses:
        "200":
          description: resetPassword 200 response
          content:
            application/json:
              schema:
                type: string
  /api/v1/roles:
    post:
      tags:
      - Roles
      summary: Create a role
      operationId: create_7
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
        required: true
      responses:
        "200":
          description: create_7 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
  /api/v1/roles/autocomplete:
    post:
      tags:
      - Roles
      summary: List roles for autocomplete
      operationId: autocomplete_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
  /api/v1/roles/ids:
    post:
      tags:
      - Roles
      description: List roles by ids
      operationId: ids_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
        required: true
      responses:
        "200":
          description: ids_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
  /api/v1/roles/search:
    get:
      tags:
      - Roles
      summary: Search for roles
      operationId: find_10
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_10 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Role_"
  /api/v1/roles/{id}:
    get:
      tags:
      - Roles
      summary: Get a role
      operationId: index_7
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_7 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    put:
      tags:
      - Roles
      summary: Update a role
      operationId: update_5
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
        required: true
      responses:
        "200":
          description: update_5 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    delete:
      tags:
      - Roles
      summary: Delete a role
      operationId: delete_10
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/security-integrations:
    get:
      tags:
      - SecurityIntegrations
      summary: List all security integrations.
      operationId: list_2
      responses:
        "200":
          description: list_2 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - SecurityIntegrations
      summary: Create a security integration.
      operationId: create_8
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSecurityIntegrationRequest"
        required: true
      responses:
        "200":
          description: create_8 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/security-integrations/{id}:
    get:
      tags:
      - SecurityIntegrations
      summary: Get a security integration.
      operationId: index_8
      parameters:
      - name: id
        in: path
        description: The ID of security integration
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_8 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - SecurityIntegrations
      summary: Delete the security integration.
      operationId: delete_11
      parameters:
      - name: id
        in: path
        description: The ID of security integration
        required: true
        schema:
          type: string
      responses:
        "200":
          description: delete_11 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/security-integrations/{id}/disable:
    post:
      tags:
      - SecurityIntegrations
      summary: Disable the security integration.
      operationId: disable
      parameters:
      - name: id
        in: path
        description: The ID of security integration
        required: true
        schema:
          type: string
      responses:
        "200":
          description: disable 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/security-integrations/{id}/enable:
    post:
      tags:
      - SecurityIntegrations
      summary: Enable the security integration.
      operationId: enable
      parameters:
      - name: id
        in: path
        description: The ID of security integration
        required: true
        schema:
          type: string
      responses:
        "200":
          description: enable 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/setup:
    get:
      tags:
      - Misc
      summary: Currently running configuration
      operationId: setupConfiguration
      responses:
        "200":
          description: setupConfiguration 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SetupConfiguration"
    post:
      tags:
      - Misc
      summary: Create the first user
      operationId: setupKestra
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetupConfiguration.SetupData"
        required: true
      responses:
        "200":
          description: setupKestra 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/stats/executions/daily:
    post:
      tags:
      - Stats
      summary: Get daily statistics for executions
      operationId: dailyStatistics
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.StatisticRequest"
        required: true
      responses:
        "200":
          description: dailyStatistics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DailyExecutionStatistics"
  /api/v1/stats/executions/daily/group-by-flow:
    post:
      tags:
      - Stats
      summary: Get daily statistics for executions group by namespaces and flows
      operationId: dailyGroupByFlowStatistics
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.ByFlowStatisticRequest"
        required: true
      responses:
        "200":
          description: dailyGroupByFlowStatistics 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      $ref: "#/components/schemas/DailyExecutionStatistics"
  /api/v1/stats/executions/daily/group-by-namespace:
    post:
      tags:
      - Stats
      summary: Get daily statistics for executions grouped by namespace
      operationId: dailyStatisticsGroupByNamespace
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.ByNamespaceStatisticRequest"
        required: true
      responses:
        "200":
          description: dailyStatisticsGroupByNamespace 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/ExecutionCountStatistics"
  /api/v1/stats/executions/latest/group-by-flow:
    post:
      tags:
      - Stats
      summary: Get latest execution by flows
      operationId: lastExecutions
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.LastExecutionsRequest"
        required: true
      responses:
        "200":
          description: lastExecutions 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Execution"
  /api/v1/stats/generate-reports:
    get:
      operationId: generate
      parameters:
      - name: from
        in: query
        description: The start date
        schema:
          type: string
          format: date
          nullable: true
      responses:
        "200":
          description: generate 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/stats/logs/daily:
    post:
      tags:
      - Stats
      summary: Get daily statistics for logs
      operationId: logsDailyStatistics
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.LogStatisticRequest"
        required: true
      responses:
        "200":
          description: logsDailyStatistics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogStatistics"
  /api/v1/stats/summary:
    post:
      tags:
      - Stats
      summary: Get summary statistics
      operationId: summary
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.SummaryRequest"
        required: true
      responses:
        "200":
          description: summary 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SummaryStatistics"
  /api/v1/stats/taskruns/daily:
    post:
      tags:
      - Stats
      summary: Get daily statistics for taskRuns
      operationId: taskRunsDailyStatistics
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.StatisticRequest"
        required: true
      responses:
        "200":
          description: taskRunsDailyStatistics 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DailyExecutionStatistics"
  /api/v1/taskruns/search:
    get:
      tags:
      - Executions
      summary: Search for taskruns
      operationId: findTaskRun
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      responses:
        "200":
          description: findTaskRun 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_TaskRun_"
  /api/v1/templates:
    post:
      tags:
      - Templates
      summary: Create a template
      operationId: create_9
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
        required: true
      responses:
        "200":
          description: create_9 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
  /api/v1/templates/delete/by-ids:
    delete:
      tags:
      - Templates
      summary: Delete templates by their IDs.
      operationId: deleteByIds_2
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: deleteByIds_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/templates/delete/by-query:
    delete:
      tags:
      - Templates
      summary: Delete templates returned by the query parameters.
      operationId: deleteByQuery_2
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: deleteByQuery_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/templates/distinct-namespaces:
    get:
      tags:
      - Templates
      summary: List all distinct namespaces
      operationId: listDistinctNamespace_2
      responses:
        "200":
          description: listDistinctNamespace_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/templates/export/by-ids:
    post:
      tags:
      - Templates
      summary: Export templates as a ZIP archive of yaml sources.
      operationId: exportByIds_1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: exportByIds_1 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/templates/export/by-query:
    get:
      tags:
      - Templates
      summary: Export templates as a ZIP archive of yaml sources.
      operationId: exportByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: exportByQuery_1 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/templates/import:
    post:
      tags:
      - Templates
      summary: Import templates as a ZIP archive of yaml sources or a multi-objects
        YAML file.
      operationId: importTemplates
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileUpload:
                  type: string
                  description: "The file to import, can be a ZIP archive or a multi-objects\
                    \ YAML file"
                  format: binary
            encoding:
              fileUpload:
                contentType: application/octet-stream
        required: true
      responses:
        "204":
          description: On success
        "200":
          description: importTemplates 200 response
  /api/v1/templates/search:
    get:
      tags:
      - Templates
      summary: Search for templates
      operationId: find_11
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_11 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Template_"
  /api/v1/templates/validate:
    post:
      tags:
      - Templates
      summary: Validate a list of templates
      operationId: validateTemplates
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateTemplates 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/templates/{namespace}:
    post:
      tags:
      - Templates
      summary: Update a complete namespace from json object
      description: |-
        All Template will be created / updated for this namespace.
        Template already created but not in `templates` will be deleted if the query delete is `true`
      operationId: updateNamespace_1
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: delete
        in: query
        description: If missing template should be deleted
        required: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Template"
        required: true
      responses:
        "200":
          description: updateNamespace_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Template"
  /api/v1/templates/{namespace}/{id}:
    get:
      tags:
      - Templates
      summary: Get a template
      operationId: index_9
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_9 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
    put:
      tags:
      - Templates
      summary: Update a template
      operationId: update_6
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
        required: true
      responses:
        "200":
          description: update_6 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
    delete:
      tags:
      - Templates
      summary: Delete a template
      operationId: delete_12
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "200":
          description: delete_12 200 response
  /api/v1/tenants:
    post:
      tags:
      - Tenants
      summary: Create a tenant
      operationId: create_10
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tenant"
        required: true
      responses:
        "200":
          description: create_10 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
  /api/v1/tenants/bindings:
    post:
      tags:
      - Bindings
      summary: Create a binding
      operationId: create_11
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Binding"
        required: true
      responses:
        "200":
          description: create_11 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractBindingController.BindingDetail"
  /api/v1/tenants/bindings/search:
    get:
      tags:
      - Bindings
      summary: Search for bindings
      operationId: find_12
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: Binding type filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Binding.Type"
      - name: id
        in: query
        description: External id filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_12 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_AbstractBindingController.BindingDetail_"
  /api/v1/tenants/bindings/{id}:
    get:
      tags:
      - Bindings
      summary: Get a binding
      operationId: index_10
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_10 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractBindingController.BindingDetail"
    delete:
      tags:
      - Bindings
      summary: Delete a binding
      operationId: delete_13
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/groups:
    post:
      tags:
      - Groups
      summary: Create a group
      operationId: create_12
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          description: create_12 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
  /api/v1/tenants/groups/autocomplete:
    post:
      tags:
      - Groups
      summary: List groups for autocomplete
      operationId: autocomplete_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
  /api/v1/tenants/groups/ids:
    post:
      tags:
      - Groups
      summary: List groups by ids
      operationId: ids_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
        required: true
      responses:
        "200":
          description: ids_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
  /api/v1/tenants/groups/search:
    get:
      tags:
      - Groups
      summary: Search for groups
      operationId: find_13
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_13 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Group_"
  /api/v1/tenants/groups/{id}:
    get:
      tags:
      - Groups
      summary: Get a group
      operationId: index_11
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_11 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    put:
      tags:
      - Groups
      summary: Update a group
      operationId: update_7
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          description: update_7 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    delete:
      tags:
      - Groups
      summary: Delete a group
      operationId: delete_14
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/groups/{id}/members:
    get:
      tags:
      - Groups
      summary: Search for users in a group
      operationId: members_1
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: members_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ApiUser_"
  /api/v1/tenants/groups/{id}/members/{userId}:
    put:
      tags:
      - Groups
      summary: Add a group for a user
      operationId: addGroup_1
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: addGroup_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
    delete:
      tags:
      - Groups
      summary: Delete a group for a user
      operationId: deleteGroup_1
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteGroup_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/tenants/namespaces/autocomplete:
    post:
      tags:
      - Namespaces
      summary: List namespaces for autocomplete
      operationId: autocomplete_4
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
      responses:
        "200":
          description: autocomplete_4 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/tenants/roles:
    post:
      tags:
      - Roles
      summary: Create a role
      operationId: create_13
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
        required: true
      responses:
        "200":
          description: create_13 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
  /api/v1/tenants/roles/autocomplete:
    post:
      tags:
      - Roles
      summary: List roles for autocomplete
      operationId: autocomplete_5
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_5 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
  /api/v1/tenants/roles/ids:
    post:
      tags:
      - Roles
      description: List roles by ids
      operationId: ids_3
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
        required: true
      responses:
        "200":
          description: ids_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
  /api/v1/tenants/roles/search:
    get:
      tags:
      - Roles
      summary: Search for roles
      operationId: find_14
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_14 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Role_"
  /api/v1/tenants/roles/{id}:
    get:
      tags:
      - Roles
      summary: Get a role
      operationId: index_12
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_12 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    put:
      tags:
      - Roles
      summary: Update a role
      operationId: update_8
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
        required: true
      responses:
        "200":
          description: update_8 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    delete:
      tags:
      - Roles
      summary: Delete a role
      operationId: delete_15
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/search:
    get:
      tags:
      - Tenants
      summary: Search for tenants
      operationId: find_15
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      responses:
        "200":
          description: find_15 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Tenant_"
  /api/v1/tenants/users:
    post:
      tags:
      - Users
      summary: Create a standard user
      operationId: create_14
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiUser"
        required: true
      responses:
        "200":
          description: create_14 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/tenants/users/autocomplete:
    post:
      tags:
      - Users
      summary: List users for autocomplete
      operationId: autocomplete_6
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbstractUserController.UserApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_6 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiUser"
  /api/v1/tenants/users/search:
    get:
      tags:
      - Users
      summary: Search for users
      operationId: find_16
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: The type of user
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/UserType"
      responses:
        "200":
          description: find_16 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ApiUser_"
  /api/v1/tenants/users/service-accounts:
    post:
      tags:
      - Users
      summary: Create a user service account
      operationId: createServiceAccount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiServiceAccount"
        required: true
      responses:
        "200":
          description: createServiceAccount 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiServiceAccount"
  /api/v1/tenants/users/service-accounts/{id}:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: updateServiceAccount
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiServiceAccount"
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/tenants/users/{id}:
    get:
      tags:
      - Users
      summary: Get a user
      operationId: index_13
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
    put:
      tags:
      - Users
      summary: Update a standard user
      operationId: update_9
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiUser"
        required: true
      responses:
        "404":
          description: On user not found
    delete:
      tags:
      - Users
      summary: Delete a user
      operationId: delete_16
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "404":
          description: On user not found
  /api/v1/tenants/users/{id}/api-tokens:
    get:
      tags:
      - Users
      summary: List all API Tokens for specific user
      operationId: listApiTokens_1
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listApiTokens_1 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Users
      summary: Create new API Token for a specific user
      operationId: createApiTokensForUser
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiTokenRequest"
        required: true
      responses:
        "200":
          description: createApiTokensForUser 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/tenants/users/{id}/api-tokens/{tokenId}:
    delete:
      tags:
      - Users
      summary: Delete an API Token for specific user and token id
      operationId: deleteApiToken_1
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/tenants/users/{id}/auths/{uid}:
    delete:
      tags:
      - Users
      summary: Delete an Auth for a user
      operationId: deleteAuth
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: uid
        in: path
        description: The auth id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
  /api/v1/tenants/users/{id}/password:
    put:
      tags:
      - Users
      summary: Create a basic auth password for a standard user
      operationId: index_14
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbstractUserController.PasswordRequest"
        required: true
      responses:
        "200":
          description: index_14 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/tenants/users/{id}/refresh-token:
    delete:
      tags:
      - Users
      summary: Delete a user refresh token
      operationId: deleteRefreshToken
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteRefreshToken 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/tenants/users/{id}/set-superadmin:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: setSuperAdmin
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/tenants/{id}:
    get:
      tags:
      - Tenants
      summary: Get a tenant
      operationId: get_2
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: get_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
    put:
      tags:
      - Tenants
      summary: Update a tenant
      operationId: update_10
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tenant"
        required: true
      responses:
        "200":
          description: update_10 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
    delete:
      tags:
      - Tenants
      summary: Delete a tenant
      operationId: delete_17
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/{id}/logo:
    post:
      tags:
      - Tenants
      summary: Set a tenant logo
      operationId: setLogo
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                logo:
                  type: string
                  description: The logo file
                  format: binary
            encoding:
              logo:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: setLogo 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiTenant"
  /api/v1/tenants/{ressourceTenant}/bindings:
    post:
      tags:
      - Bindings
      summary: Create a binding
      operationId: create_15
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Binding"
        required: true
      responses:
        "200":
          description: create_15 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractBindingController.BindingDetail"
  /api/v1/tenants/{ressourceTenant}/bindings/search:
    get:
      tags:
      - Bindings
      summary: Search for bindings
      operationId: find_17
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: Binding type filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Binding.Type"
      - name: id
        in: query
        description: External id filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_17 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_AbstractBindingController.BindingDetail_"
  /api/v1/tenants/{ressourceTenant}/bindings/{id}:
    get:
      tags:
      - Bindings
      summary: Get a binding
      operationId: index_15
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_15 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractBindingController.BindingDetail"
    delete:
      tags:
      - Bindings
      summary: Delete a binding
      operationId: delete_18
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/{ressourceTenant}/groups:
    post:
      tags:
      - Groups
      summary: Create a group
      operationId: create_16
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          description: create_16 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
  /api/v1/tenants/{ressourceTenant}/groups/autocomplete:
    post:
      tags:
      - Groups
      summary: List groups for autocomplete
      operationId: autocomplete_7
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_7 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
  /api/v1/tenants/{ressourceTenant}/groups/ids:
    post:
      tags:
      - Groups
      summary: List groups by ids
      operationId: ids_4
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
        required: true
      responses:
        "200":
          description: ids_4 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
  /api/v1/tenants/{ressourceTenant}/groups/search:
    get:
      tags:
      - Groups
      summary: Search for groups
      operationId: find_18
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_18 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Group_"
  /api/v1/tenants/{ressourceTenant}/groups/{id}:
    get:
      tags:
      - Groups
      summary: Get a group
      operationId: index_16
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_16 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    put:
      tags:
      - Groups
      summary: Update a group
      operationId: update_11
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          description: update_11 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    delete:
      tags:
      - Groups
      summary: Delete a group
      operationId: delete_19
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/{ressourceTenant}/groups/{id}/members:
    get:
      tags:
      - Groups
      summary: Search for users in a group
      operationId: members_2
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: members_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ApiUser_"
  /api/v1/tenants/{ressourceTenant}/groups/{id}/members/{userId}:
    put:
      tags:
      - Groups
      summary: Add a group for a user
      operationId: addGroup_2
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: addGroup_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
    delete:
      tags:
      - Groups
      summary: Delete a group for a user
      operationId: deleteGroup_2
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteGroup_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/tenants/{ressourceTenant}/namespaces/autocomplete:
    post:
      tags:
      - Namespaces
      summary: List namespaces for autocomplete
      operationId: autocomplete_8
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
      responses:
        "200":
          description: autocomplete_8 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/tenants/{ressourceTenant}/roles:
    post:
      tags:
      - Roles
      summary: Create a role
      operationId: create_17
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
        required: true
      responses:
        "200":
          description: create_17 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
  /api/v1/tenants/{ressourceTenant}/roles/autocomplete:
    post:
      tags:
      - Roles
      summary: List roles for autocomplete
      operationId: autocomplete_9
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_9 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
  /api/v1/tenants/{ressourceTenant}/roles/ids:
    post:
      tags:
      - Roles
      description: List roles by ids
      operationId: ids_5
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
        required: true
      responses:
        "200":
          description: ids_5 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
  /api/v1/tenants/{ressourceTenant}/roles/search:
    get:
      tags:
      - Roles
      summary: Search for roles
      operationId: find_19
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_19 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Role_"
  /api/v1/tenants/{ressourceTenant}/roles/{id}:
    get:
      tags:
      - Roles
      summary: Get a role
      operationId: index_17
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_17 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    put:
      tags:
      - Roles
      summary: Update a role
      operationId: update_12
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
        required: true
      responses:
        "200":
          description: update_12 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    delete:
      tags:
      - Roles
      summary: Delete a role
      operationId: delete_20
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/tenants/{ressourceTenant}/users:
    post:
      tags:
      - Users
      summary: Create a standard user
      operationId: create_18
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiUser"
        required: true
      responses:
        "200":
          description: create_18 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/tenants/{ressourceTenant}/users/autocomplete:
    post:
      tags:
      - Users
      summary: List users for autocomplete
      operationId: autocomplete_10
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbstractUserController.UserApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_10 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiUser"
  /api/v1/tenants/{ressourceTenant}/users/search:
    get:
      tags:
      - Users
      summary: Search for users
      operationId: find_20
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: The type of user
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/UserType"
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_20 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ApiUser_"
  /api/v1/tenants/{ressourceTenant}/users/service-accounts:
    post:
      tags:
      - Users
      summary: Create a user service account
      operationId: createServiceAccount_1
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiServiceAccount"
        required: true
      responses:
        "200":
          description: createServiceAccount_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiServiceAccount"
  /api/v1/tenants/{ressourceTenant}/users/service-accounts/{id}:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: updateServiceAccount_1
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiServiceAccount"
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/tenants/{ressourceTenant}/users/{id}:
    get:
      tags:
      - Users
      summary: Get a user
      operationId: index_18
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
    put:
      tags:
      - Users
      summary: Update a standard user
      operationId: update_13
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiUser"
        required: true
      responses:
        "404":
          description: On user not found
    delete:
      tags:
      - Users
      summary: Delete a user
      operationId: delete_21
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "404":
          description: On user not found
  /api/v1/tenants/{ressourceTenant}/users/{id}/api-tokens:
    get:
      tags:
      - Users
      summary: List all API Tokens for specific user
      operationId: listApiTokens_2
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listApiTokens_2 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Users
      summary: Create new API Token for a specific user
      operationId: createApiTokensForUser_1
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiTokenRequest"
        required: true
      responses:
        "200":
          description: createApiTokensForUser_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/tenants/{ressourceTenant}/users/{id}/api-tokens/{tokenId}:
    delete:
      tags:
      - Users
      summary: Delete an API Token for specific user and token id
      operationId: deleteApiToken_2
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken_2 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/tenants/{ressourceTenant}/users/{id}/auths/{uid}:
    delete:
      tags:
      - Users
      summary: Delete an Auth for a user
      operationId: deleteAuth_1
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: uid
        in: path
        description: The auth id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
  /api/v1/tenants/{ressourceTenant}/users/{id}/password:
    put:
      tags:
      - Users
      summary: Create a basic auth password for a standard user
      operationId: index_19
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbstractUserController.PasswordRequest"
        required: true
      responses:
        "200":
          description: index_19 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/tenants/{ressourceTenant}/users/{id}/refresh-token:
    delete:
      tags:
      - Users
      summary: Delete a user refresh token
      operationId: deleteRefreshToken_1
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteRefreshToken_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/tenants/{ressourceTenant}/users/{id}/set-superadmin:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: setSuperAdmin_1
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/triggers:
    put:
      tags:
      - Triggers
      summary: Update a trigger
      operationId: update_14
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: update_14 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/triggers/backfill/delete:
    post:
      tags:
      - Triggers
      summary: Delete a backfill
      operationId: deleteBackfill
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: deleteBackfill 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/triggers/backfill/delete/by-query:
    post:
      tags:
      - Triggers
      summary: Delete backfill for given triggers
      operationId: deleteBackfillByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: deleteBackfillByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/backfill/delete/by-triggers:
    post:
      tags:
      - Triggers
      summary: Delete backfill for given triggers
      operationId: deleteBackfillByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: deleteBackfillByIds 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/backfill/pause:
    put:
      tags:
      - Triggers
      summary: Pause a backfill
      operationId: pauseBackfill
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: pauseBackfill 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/triggers/backfill/pause/by-query:
    post:
      tags:
      - Triggers
      summary: Pause backfill for given triggers
      operationId: pauseBackfillByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: pauseBackfillByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/backfill/pause/by-triggers:
    post:
      tags:
      - Triggers
      summary: Pause backfill for given triggers
      operationId: pauseBackfillByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: pauseBackfillByIds 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/backfill/unpause:
    put:
      tags:
      - Triggers
      summary: Unpause a backfill
      operationId: unpauseBackfill
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: unpauseBackfill 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/triggers/backfill/unpause/by-query:
    post:
      tags:
      - Triggers
      summary: Unpause backfill for given triggers
      operationId: unpauseBackfillByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: unpauseBackfillByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/backfill/unpause/by-triggers:
    post:
      tags:
      - Triggers
      summary: Unpause backfill for given triggers
      operationId: unpauseBackfillByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: unpauseBackfillByIds 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/restart:
    post:
      tags:
      - Triggers
      summary: Restart a trigger
      operationId: restart_1
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: restart_1 200 response
  /api/v1/triggers/search:
    get:
      tags:
      - Triggers
      summary: Search for triggers
      operationId: search_3
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: workerId
        in: query
        description: The identifier of the worker currently evaluating the trigger
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: search_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_TriggerController.Triggers_"
  /api/v1/triggers/set-disabled/by-query:
    post:
      tags:
      - Triggers
      summary: Delete backfill for given triggers
      operationId: setDisabledByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: disabled
        in: query
        description: The disabled state
        required: true
        schema:
          type: boolean
          default: true
      responses:
        "200":
          description: setDisabledByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/set-disabled/by-triggers:
    post:
      tags:
      - Triggers
      summary: Delete backfill for given triggers
      operationId: setDisabledByIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TriggerController.SetDisabledRequest"
        required: true
      responses:
        "200":
          description: setDisabledByIds 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/unlock/by-query:
    post:
      tags:
      - Triggers
      summary: Unlock triggers by query parameters
      operationId: unlockByQuery
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: unlockByQuery 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/unlock/by-triggers:
    post:
      tags:
      - Triggers
      summary: Unlock given triggers
      operationId: unlockByIds
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: unlockByIds 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/{namespace}/{flowId}:
    get:
      tags:
      - Triggers
      summary: Get all triggers for a flow
      operationId: find_21
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: find_21 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Trigger_"
  /api/v1/triggers/{namespace}/{flowId}/{triggerId}/restart:
    post:
      tags:
      - Triggers
      summary: Restart a trigger
      operationId: restart_2
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: triggerId
        in: path
        description: The trigger id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: restart_2 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/triggers/{namespace}/{flowId}/{triggerId}/unlock:
    post:
      tags:
      - Triggers
      summary: Unlock a trigger
      operationId: unlock
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: triggerId
        in: path
        description: The trigger id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: unlock 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/usages:
    get:
      tags:
      - Misc
      summary: Get instance usage information for the current tenant
      operationId: tenantUsage
      responses:
        "200":
          description: tenantUsage 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Usage_3"
                - $ref: "#/components/schemas/Usage_1"
              example: null
  /api/v1/usages/all:
    get:
      tags:
      - Misc
      summary: Get instance usage information
      operationId: usages
      responses:
        "200":
          description: usages 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usage"
  /api/v1/users:
    post:
      tags:
      - Users
      summary: Create a standard user
      operationId: create_19
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiUser"
        required: true
      responses:
        "200":
          description: create_19 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/users/autocomplete:
    post:
      tags:
      - Users
      summary: List users for autocomplete
      operationId: autocomplete_11
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbstractUserController.UserApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_11 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiUser"
  /api/v1/users/password:
    put:
      tags:
      - Users
      summary: Update login password for authenticated user
      operationId: updateLoginPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserController.UpdatePasswordRequest"
        required: true
      responses:
        "200":
          description: updateLoginPassword 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/users/search:
    get:
      tags:
      - Users
      summary: Search for users
      operationId: find_22
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: The type of user
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/UserType"
      responses:
        "200":
          description: find_22 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ApiUser_"
  /api/v1/users/service-accounts:
    post:
      tags:
      - Users
      summary: Create a user service account
      operationId: createServiceAccount_2
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiServiceAccount"
        required: true
      responses:
        "200":
          description: createServiceAccount_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiServiceAccount"
  /api/v1/users/service-accounts/{id}:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: updateServiceAccount_2
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiServiceAccount"
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/users/{id}:
    get:
      tags:
      - Users
      summary: Get a user
      operationId: index_20
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
    put:
      tags:
      - Users
      summary: Update a standard user
      operationId: update_15
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiUser"
        required: true
      responses:
        "404":
          description: On user not found
    delete:
      tags:
      - Users
      summary: Delete a user
      operationId: delete_22
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "404":
          description: On user not found
  /api/v1/users/{id}/api-tokens:
    get:
      tags:
      - Users
      summary: List all API Tokens for specific user
      operationId: listApiTokens_3
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listApiTokens_3 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Users
      summary: Create new API Token for a specific user
      operationId: createApiTokensForUser_2
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiTokenRequest"
        required: true
      responses:
        "200":
          description: createApiTokensForUser_2 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/users/{id}/api-tokens/{tokenId}:
    delete:
      tags:
      - Users
      summary: Delete an API Token for specific user and token id
      operationId: deleteApiToken_3
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken_3 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/users/{id}/auths/{uid}:
    delete:
      tags:
      - Users
      summary: Delete an Auth for a user
      operationId: deleteAuth_2
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: uid
        in: path
        description: The auth id
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
  /api/v1/users/{id}/password:
    put:
      tags:
      - Users
      summary: Create a basic auth password for a standard user
      operationId: index_21
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbstractUserController.PasswordRequest"
        required: true
      responses:
        "200":
          description: index_21 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/users/{id}/refresh-token:
    delete:
      tags:
      - Users
      summary: Delete a user refresh token
      operationId: deleteRefreshToken_2
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteRefreshToken_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/acls/actions:
    get:
      tags:
      - Misc
      summary: Get list of actions
      operationId: actions_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: actions_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Action"
  /api/v1/{tenant}/acls/permissions:
    get:
      tags:
      - Misc
      summary: Get list of permissions
      operationId: permissions_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: permissions_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
  /api/v1/{tenant}/auditlogs/find:
    post:
      tags:
      - Audit Logs
      summary: Find audit logs
      operationId: find_23
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuditLogController.FindRequest"
        required: true
      responses:
        "200":
          description: find_23 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditLogController.AuditLogWithUser"
  /api/v1/{tenant}/auditlogs/search:
    get:
      tags:
      - Audit Logs
      summary: Search for audit logs
      operationId: search_4
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: executionId
        in: query
        description: An execution filter
        schema:
          type: string
          nullable: true
      - name: userId
        in: query
        description: A user id filter
        schema:
          type: string
          nullable: true
      - name: id
        in: query
        description: A id filter
        schema:
          type: string
          nullable: true
      - name: permission
        in: query
        description: A permission filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Permission"
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: details
        in: query
        description: A list of auditLog details
        schema:
          type: object
          additionalProperties:
            type: string
          nullable: true
      - name: type
        in: query
        description: The event that create the audit log
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/CrudEventType"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: search_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_AuditLogController.AuditLogWithUser_"
  /api/v1/{tenant}/auditlogs/{id}/diff:
    get:
      tags:
      - Audit Logs
      summary: Get the diff of an audit log
      operationId: diff_1
      parameters:
      - name: id
        in: path
        description: The id of the audit log
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: diff_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuditLogController.AuditLogDiff"
  /api/v1/{tenant}/basicAuth:
    post:
      tags:
      - Misc
      summary: Add basic auth to current instance
      operationId: addBasicAuth_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MiscController.BasicAuthCredentials"
        required: true
      responses:
        "200":
          description: addBasicAuth_1 200 response
  /api/v1/{tenant}/bindings:
    post:
      tags:
      - Bindings
      summary: Create a binding
      operationId: create_20
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Binding"
        required: true
      responses:
        "200":
          description: create_20 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractBindingController.BindingDetail"
  /api/v1/{tenant}/bindings/search:
    get:
      tags:
      - Bindings
      summary: Search for bindings
      operationId: find_24
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: Binding type filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Binding.Type"
      - name: id
        in: query
        description: External id filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_24 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_AbstractBindingController.BindingDetail_"
  /api/v1/{tenant}/bindings/{id}:
    get:
      tags:
      - Bindings
      summary: Get a binding
      operationId: index_22
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_22 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractBindingController.BindingDetail"
    delete:
      tags:
      - Bindings
      summary: Delete a binding
      operationId: delete_23
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/{tenant}/blueprints/community:
    get:
      tags:
      - Blueprints
      summary: List all blueprints
      operationId: blueprints_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: string
          nullable: true
      - name: tags
        in: query
        description: A tags filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprints_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_BlueprintController.BlueprintItem_"
  /api/v1/{tenant}/blueprints/community/tags:
    get:
      tags:
      - Blueprint Tags
      summary: List blueprint tags matching the filter
      operationId: blueprintTags_1
      parameters:
      - name: q
        in: query
        description: A string filter to get tags with matching blueprints only
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprintTags_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlueprintController.BlueprintTagItem"
  /api/v1/{tenant}/blueprints/community/{id}:
    get:
      tags:
      - blueprints
      summary: Get a blueprint
      operationId: blueprint_1
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprint_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintController.BlueprintItemWithFlow"
  /api/v1/{tenant}/blueprints/community/{id}/flow:
    get:
      tags:
      - blueprints
      summary: Get a blueprint flow
      operationId: blueprintFlow_1
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprintFlow_1 200 response
          content:
            application/yaml:
              schema:
                type: string
  /api/v1/{tenant}/blueprints/community/{id}/graph:
    get:
      tags:
      - blueprints
      summary: Get a blueprint graph
      operationId: blueprintGraph_1
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: blueprintGraph_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v1/{tenant}/blueprints/custom:
    get:
      tags:
      - Blueprints
      summary: List all internal blueprints
      operationId: internalBlueprints_2
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: string
          nullable: true
      - name: tags
        in: query
        description: A tags filter
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprints_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Blueprint_"
    post:
      tags:
      - Blueprints
      summary: Create a new internal blueprint
      operationId: createInternalBlueprints_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlueprintWithFlow"
        required: true
      responses:
        "200":
          description: createInternalBlueprints_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintWithFlow"
  /api/v1/{tenant}/blueprints/custom/tags:
    get:
      tags:
      - Blueprint Tags
      summary: List all internal blueprint tags
      operationId: internalBlueprintTags_1
      parameters:
      - name: q
        in: query
        description: A string filter to get tags with matching blueprints only
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprintTags_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/{tenant}/blueprints/custom/{id}:
    get:
      tags:
      - blueprints
      summary: Get an internal blueprint
      operationId: internalBlueprint_1
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprint_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintWithFlow"
    put:
      tags:
      - Blueprints
      summary: Update an internal blueprint
      operationId: updateInternalBlueprints_1
      parameters:
      - name: id
        in: path
        description: The id of the internal blueprint to update
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BlueprintWithFlow"
        required: true
      responses:
        "200":
          description: updateInternalBlueprints_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BlueprintWithFlow"
    delete:
      tags:
      - Blueprints
      summary: Delete an internal blueprint
      operationId: internalBlueprints_3
      parameters:
      - name: id
        in: path
        description: The internal blueprint id to delete
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprints_3 200 response
  /api/v1/{tenant}/blueprints/custom/{id}/flow:
    get:
      tags:
      - blueprints
      summary: Get an internal blueprint flow
      operationId: internalBlueprintFlow_1
      parameters:
      - name: id
        in: path
        description: The blueprint id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: internalBlueprintFlow_1 200 response
          content:
            application/yaml:
              schema:
                type: string
  /api/v1/{tenant}/cluster/services/active:
    get:
      tags:
      - Services
      summary: Get details about active services
      operationId: active_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: active_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ClusterController.ApiActiveServiceList"
  /api/v1/{tenant}/cluster/services/search:
    get:
      tags:
      - Services
      summary: Search for service
      operationId: find_25
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: state
        in: query
        description: The state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Service.ServiceState"
      - name: type
        in: query
        description: The server type filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Service.ServiceType"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_25 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ClusterController.ApiServiceInstance_"
  /api/v1/{tenant}/cluster/services/{id}:
    get:
      tags:
      - Services
      summary: Get details about a service
      operationId: index_23
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_23 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceInstance"
  /api/v1/{tenant}/configs:
    get:
      tags:
      - Misc
      summary: Get current configurations
      operationId: configuration_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: configuration_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MiscController.ConfigurationEe"
  /api/v1/{tenant}/executions:
    get:
      tags:
      - Executions
      summary: Search for executions for a flow
      operationId: findByFlowId_1
      parameters:
      - name: namespace
        in: query
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: query
        description: The flow id
        required: true
        schema:
          type: string
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: findByFlowId_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Execution_"
  /api/v1/{tenant}/executions/by-ids:
    delete:
      tags:
      - Executions
      summary: Delete a list of executions
      operationId: deleteByIds_3
      parameters:
      - name: includeNonTerminated
        in: query
        description: Whether to delete non-terminated executions
        schema:
          type: boolean
          nullable: true
          default: false
      - name: deleteLogs
        in: query
        description: Whether to delete execution logs
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteMetrics
        in: query
        description: Whether to delete execution metrics
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteStorage
        in: query
        description: Whether to delete execution files in the internal storage
        required: true
        schema:
          type: boolean
          default: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Deleted with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/{tenant}/executions/by-query:
    delete:
      tags:
      - Executions
      summary: Delete executions filter by query parameters
      operationId: deleteByQuery_3
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: includeNonTerminated
        in: query
        description: Whether to delete non-terminated executions
        schema:
          type: boolean
          nullable: true
          default: false
      - name: deleteLogs
        in: query
        description: Whether to delete execution logs
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteMetrics
        in: query
        description: Whether to delete execution metrics
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteStorage
        in: query
        description: Whether to delete execution files in the internal storage
        required: true
        schema:
          type: boolean
          default: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteByQuery_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/{tenant}/executions/change-status/by-ids:
    post:
      tags:
      - Executions
      summary: Change status of executions by id
      operationId: changeStatusById_1
      parameters:
      - name: newStatus
        in: query
        description: The new status of the executions
        required: true
        schema:
          $ref: "#/components/schemas/State.Type"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Changed status with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/{tenant}/executions/change-status/by-query:
    post:
      tags:
      - Executions
      summary: Change executions status by query parameters
      operationId: changeStatusByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: newStatus
        in: query
        description: The new status of the executions
        required: true
        schema:
          $ref: "#/components/schemas/State.Type"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Changed status with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/{tenant}/executions/flows/{namespace}/{flowId}:
    get:
      tags:
      - Executions
      summary: Get flow information's for an execution
      operationId: getFlowForExecution_1
      parameters:
      - name: namespace
        in: path
        description: The namespace of the flow
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowForExecution_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowForExecution"
  /api/v1/{tenant}/executions/kill/by-ids:
    delete:
      tags:
      - Executions
      summary: Kill a list of executions
      operationId: killByIds_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Killed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/{tenant}/executions/kill/by-query:
    delete:
      tags:
      - Executions
      summary: Kill executions filter by query parameters
      operationId: killByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: killByQuery_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/executions/labels/by-ids:
    post:
      tags:
      - Executions
      summary: Set labels on a list of executions
      operationId: setLabelsByIds_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionController.SetLabelsByIdsRequest"
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Killed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/{tenant}/executions/labels/by-query:
    post:
      tags:
      - Executions
      summary: Set label on executions filter by query parameters
      operationId: setLabelsByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Label"
        required: true
      responses:
        "200":
          description: setLabelsByQuery_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/executions/namespaces:
    get:
      tags:
      - Executions
      summary: Get all namespaces that have executable flows
      operationId: listDistinctNamespace_3
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listDistinctNamespace_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/{tenant}/executions/namespaces/{namespace}/flows:
    get:
      tags:
      - Executions
      summary: Get all flow ids for a namespace
      operationId: getFlowsByNamespace_2
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowsByNamespace_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowForExecution"
  /api/v1/{tenant}/executions/replay/by-ids:
    post:
      tags:
      - Executions
      summary: Create new executions from old ones. Keep the flow revision
      operationId: replayByIds_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Replayed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/{tenant}/executions/replay/by-query:
    post:
      tags:
      - Executions
      summary: Create new executions from old ones filter by query parameters. Keep
        the flow revision
      operationId: replayByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: replayByQuery_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/executions/restart/by-ids:
    post:
      tags:
      - Executions
      summary: Restart a list of executions
      operationId: restartByIds_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Restarted with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/{tenant}/executions/restart/by-query:
    post:
      tags:
      - Executions
      summary: Restart executions filter by query parameters
      operationId: restartByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: restartByQuery_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/{tenant}/executions/resume/by-ids:
    post:
      tags:
      - Executions
      summary: Resume a list of paused executions
      operationId: resumeByIds_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: On success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
        "422":
          description: Resumed with errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkErrorResponse"
  /api/v1/{tenant}/executions/resume/by-query:
    post:
      tags:
      - Executions
      summary: Resume executions filter by query parameters
      operationId: resumeByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: resumeByQuery_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/executions/search:
    get:
      tags:
      - Executions
      summary: Search for executions
      operationId: find_26
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the executions to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: timeRange
        in: query
        description: A time range filter relative to the current time
        schema:
          type: string
          nullable: true
        examples:
          Filter last 5 minutes:
            value: PT5M
          Filter last 24 hours:
            value: P1D
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_26 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Execution_"
  /api/v1/{tenant}/executions/trigger/{namespace}/{id}:
    post:
      tags:
      - Executions
      summary: Trigger a new execution for a flow
      operationId: trigger_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: wait
        in: query
        description: If the server will wait the end of the execution
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: The flow revision or latest if null
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              nullable: true
              items:
                type: string
                format: binary
      responses:
        "409":
          description: if the flow is disabled
        "200":
          description: trigger_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutionController.ExecutionResponse"
  /api/v1/{tenant}/executions/webhook/{namespace}/{id}/{key}:
    get:
      tags:
      - Executions
      summary: Trigger a new execution by GET webhook trigger
      operationId: webhookTriggerGet_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerGet_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
    put:
      tags:
      - Executions
      summary: Trigger a new execution by PUT webhook trigger
      operationId: webhookTriggerPut_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerPut_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
    post:
      tags:
      - Executions
      summary: Trigger a new execution by POST webhook trigger
      operationId: webhookTriggerPost_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The webhook trigger uid
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: webhookTriggerPost_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/{tenant}/executions/{executionId}:
    get:
      tags:
      - Executions
      summary: Get an execution
      operationId: get_3
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: get_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
    delete:
      tags:
      - Executions
      summary: Delete an execution
      operationId: delete_24
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: deleteLogs
        in: query
        description: Whether to delete execution logs
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteMetrics
        in: query
        description: Whether to delete execution metrics
        required: true
        schema:
          type: boolean
          default: true
      - name: deleteStorage
        in: query
        description: Whether to delete execution files in the internal storage
        required: true
        schema:
          type: boolean
          default: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "200":
          description: delete_24 200 response
  /api/v1/{tenant}/executions/{executionId}/change-status:
    post:
      tags:
      - Executions
      summary: Change the status of an execution
      operationId: changeStatus_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: status
        in: query
        description: The new status of the execution
        required: true
        schema:
          $ref: "#/components/schemas/State.Type"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: changeStatus_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/{tenant}/executions/{executionId}/eval/{taskRunId}:
    post:
      tags:
      - Executions
      summary: Evaluate a variable expression for this taskrun
      operationId: eval_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: taskRunId
        in: path
        description: The taskrun id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: eval_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExecutionController.EvalResult"
  /api/v1/{tenant}/executions/{executionId}/file:
    get:
      tags:
      - Executions
      summary: Download file for an execution
      operationId: file_2
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: file_2 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/v1/{tenant}/executions/{executionId}/file/metas:
    get:
      tags:
      - Executions
      summary: Get file meta information for an execution
      operationId: filesize_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: filesize_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileMetas"
  /api/v1/{tenant}/executions/{executionId}/file/preview:
    get:
      tags:
      - Executions
      summary: Get file preview for an execution
      operationId: filePreview_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      - name: maxRows
        in: query
        description: The max row returns
        required: true
        schema:
          type: integer
          format: int32
      - name: encoding
        in: query
        description: The file encoding as Java charset name. Defaults to UTF-8
        required: true
        schema:
          type: string
          default: UTF-8
        example: ISO-8859-1
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: filePreview_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/executions/{executionId}/flow:
    get:
      tags:
      - Executions
      summary: Get flow information's for an execution
      operationId: getFlowForExecutionById_1
      parameters:
      - name: executionId
        in: path
        description: The execution that you want flow information's
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowForExecutionById_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowForExecution"
  /api/v1/{tenant}/executions/{executionId}/follow:
    get:
      tags:
      - Executions
      summary: Follow an execution
      operationId: follow_2
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: follow_2 200 response
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/Event_Execution_"
  /api/v1/{tenant}/executions/{executionId}/graph:
    get:
      tags:
      - Executions
      summary: Generate a graph for an execution
      operationId: flowGraph_2
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: subflows
        in: query
        description: The subflow tasks to display
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: flowGraph_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowGraph"
  /api/v1/{tenant}/executions/{executionId}/kill:
    delete:
      tags:
      - Executions
      summary: Kill an execution
      operationId: kill_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: isOnKillCascade
        in: query
        description: Specifies whether killing the execution also kill all subflow
          executions.
        required: true
        schema:
          type: boolean
          default: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "202":
          description: Execution kill_1 was requested successfully
        "409":
          description: if the executions is already finished
        "404":
          description: if the executions is not found
        "200":
          description: kill_1 200 response
          content:
            text/json:
              schema:
                type: object
  /api/v1/{tenant}/executions/{executionId}/labels:
    post:
      tags:
      - Executions
      summary: Add or update labels of a terminated execution
      operationId: setLabels_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Label"
        required: true
      responses:
        "404":
          description: If the execution cannot be found
        "400":
          description: If the execution is not terminated
        "200":
          description: setLabels_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/executions/{executionId}/replay:
    post:
      tags:
      - Executions
      summary: Create a new execution from an old one and start it from a specified
        task run id
      operationId: replay_1
      parameters:
      - name: executionId
        in: path
        description: the original execution id to clone
        required: true
        schema:
          type: string
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: revision
        in: query
        description: The flow revision to use for new execution
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: replay_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/{tenant}/executions/{executionId}/restart:
    post:
      tags:
      - Executions
      summary: Restart a new execution from an old one
      operationId: restart_3
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision to use for new execution
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: restart_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/{tenant}/executions/{executionId}/resume:
    post:
      tags:
      - Executions
      summary: Resume a paused execution.
      operationId: resume_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
                format: binary
        required: true
      responses:
        "204":
          description: On success
        "409":
          description: if the executions is not paused
        "200":
          description: resume_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/executions/{executionId}/resume/validate:
    post:
      tags:
      - Executions
      summary: Validate inputs to resume a paused execution.
      operationId: validateInputsOnResume_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
                format: binary
        required: true
      responses:
        "204":
          description: On success
        "409":
          description: if the executions is not paused
        "200":
          description: validateInputsOnResume_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutionController.ApiValidateExecutionInputsResponse"
  /api/v1/{tenant}/executions/{executionId}/state:
    post:
      tags:
      - Executions
      summary: Change state for a taskrun in an execution
      operationId: changeState_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExecutionController.StateRequest"
        required: true
      responses:
        "200":
          description: changeState_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Execution"
  /api/v1/{tenant}/executions/{namespace}/{id}:
    post:
      tags:
      - Executions
      summary: Create a new execution for a flow
      operationId: create_21
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: wait
        in: query
        description: If the server will wait the end of the execution
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: The flow revision or latest if null
        schema:
          type: integer
          format: int32
          nullable: true
      - name: scheduleDate
        in: query
        description: Schedule the flow on a specific date
        schema:
          type: string
          format: date-time
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              nullable: true
              items:
                type: string
                format: binary
      responses:
        "409":
          description: if the flow is disabled
        "200":
          description: create_21 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutionController.ExecutionResponse"
  /api/v1/{tenant}/executions/{namespace}/{id}/validate:
    post:
      tags:
      - Executions
      summary: Validate the creation of a new execution for a flow
      operationId: validateInputsOnCreate_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: labels
        in: query
        description: The labels as a list of 'key:value'
        required: true
        schema:
          type: array
          items:
            type: string
      - name: revision
        in: query
        description: The flow revision or latest if null
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: string
                format: binary
        required: true
      responses:
        "409":
          description: if the flow is disabled
        "200":
          description: validateInputsOnCreate_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExecutionController.ApiValidateExecutionInputsResponse"
  /api/v1/{tenant}/flows:
    post:
      tags:
      - Flows
      summary: Create a flow from json object
      operationId: create_22
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/Flow"
          application/x-yaml:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: create_22 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Flow"
                - $ref: "#/components/schemas/FlowWithSource"
              example: null
      deprecated: true
  /api/v1/{tenant}/flows/delete/by-ids:
    delete:
      tags:
      - Flows
      summary: Delete flows by their IDs.
      operationId: deleteByIds_4
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: deleteByIds_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/{tenant}/flows/delete/by-query:
    delete:
      tags:
      - Flows
      summary: Delete flows returned by the query parameters.
      operationId: deleteByQuery_4
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteByQuery_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/{tenant}/flows/disable/by-ids:
    post:
      tags:
      - Flows
      summary: Disable flows by their IDs.
      operationId: disableByIds_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: disableByIds_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/{tenant}/flows/disable/by-query:
    post:
      tags:
      - Flows
      summary: Disable flows returned by the query parameters.
      operationId: disableByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: disableByQuery_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/{tenant}/flows/distinct-namespaces:
    get:
      tags:
      - Flows
      summary: List all distinct namespaces
      operationId: listDistinctNamespace_4
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listDistinctNamespace_4 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/{tenant}/flows/enable/by-ids:
    post:
      tags:
      - Flows
      summary: Enable flows by their IDs.
      operationId: enableByIds_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: enableByIds_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/{tenant}/flows/enable/by-query:
    post:
      tags:
      - Flows
      summary: Enable flows returned by the query parameters.
      operationId: enableByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: enableByQuery_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/{tenant}/flows/export/by-ids:
    post:
      tags:
      - Flows
      summary: Export flows as a ZIP archive of yaml sources.
      operationId: exportByIds_2
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: exportByIds_2 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/{tenant}/flows/export/by-query:
    get:
      tags:
      - Flows
      summary: Export flows as a ZIP archive of yaml sources.
      operationId: exportByQuery_2
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: exportByQuery_2 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/{tenant}/flows/graph:
    post:
      tags:
      - Flows
      summary: Generate a graph for a flow source
      operationId: flowGraphSource_1
      parameters:
      - name: subflows
        in: query
        description: The subflow tasks to display
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: flowGraphSource_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowGraph"
  /api/v1/{tenant}/flows/import:
    post:
      tags:
      - Flows
      summary: Import flows as a ZIP archive of yaml sources or a multi-objects YAML
        file.
      operationId: importFlows_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileUpload:
                  type: string
                  description: "The file to import, can be a ZIP archive or a multi-objects\
                    \ YAML file"
                  format: binary
            encoding:
              fileUpload:
                contentType: application/octet-stream
        required: true
      responses:
        "204":
          description: On success
        "200":
          description: importFlows_1 200 response
  /api/v1/{tenant}/flows/search:
    get:
      tags:
      - Flows
      summary: Search for flows
      operationId: find_27
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: scope
        in: query
        description: The scope of the flows to include
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_27 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Flow_"
  /api/v1/{tenant}/flows/source:
    get:
      tags:
      - Flows
      summary: Search for flows source code
      operationId: source_1
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: source_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_SearchResult_Flow__"
  /api/v1/{tenant}/flows/validate:
    post:
      tags:
      - Flows
      summary: Validate a list of flows
      operationId: validateFlows_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateFlows_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/{tenant}/flows/validate/task:
    post:
      tags:
      - Flows
      summary: Validate a list of flows
      operationId: validateTask_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: section
        in: query
        description: Type of task
        required: true
        schema:
          $ref: "#/components/schemas/FlowController.TaskValidationType"
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
          application/json:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: validateTask_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/{tenant}/flows/validate/trigger:
    post:
      tags:
      - Flows
      summary: Validate trigger
      operationId: validateTrigger_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateTrigger_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/{tenant}/flows/{namespace}:
    get:
      tags:
      - Flows
      summary: Retrieve all flows from a given namespace
      operationId: getFlowsByNamespace_3
      parameters:
      - name: namespace
        in: path
        description: Namespace to filter flows
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: getFlowsByNamespace_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Flow"
    post:
      tags:
      - Flows
      summary: Update a complete namespace from json object
      description: |-
        All flow will be created / updated for this namespace.
        Flow that already created but not in `flows` will be deleted if the query delete is `true`
      operationId: updateNamespace_2
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: delete
        in: query
        description: If missing flow should be deleted
        required: true
        schema:
          type: boolean
          default: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Flow"
          application/x-yaml:
            schema:
              type: string
            example: null
        required: true
      responses:
        "200":
          description: updateNamespace_2 200 response
          content:
            application/json:
              schema:
                oneOf:
                - type: array
                  items:
                    $ref: "#/components/schemas/Flow"
                - type: array
                  items:
                    $ref: "#/components/schemas/FlowWithSource"
              example: null
      deprecated: true
  /api/v1/{tenant}/flows/{namespace}/{id}:
    get:
      tags:
      - Flows
      summary: Get a flow
      operationId: index_24
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: source
        in: query
        description: Include the source code
        required: true
        schema:
          type: boolean
          default: false
      - name: revision
        in: query
        description: Get latest revision by default
        schema:
          type: integer
          format: int32
          nullable: true
      - name: allowDeleted
        in: query
        description: Get flow even if deleted
        required: true
        schema:
          type: boolean
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_24 200 response
          content:
            application/json:
              schema:
                type: object
    put:
      tags:
      - Flows
      summary: Update a flow
      operationId: update_16
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
            example: null
          '*/*':
            schema:
              $ref: "#/components/schemas/Flow"
            example: null
        required: true
      responses:
        "200":
          description: update_16 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/FlowWithSource"
                - $ref: "#/components/schemas/Flow"
              example: null
      deprecated: true
    delete:
      tags:
      - Flows
      summary: Delete a flow
      operationId: delete_25
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "200":
          description: delete_25 200 response
  /api/v1/{tenant}/flows/{namespace}/{id}/dependencies:
    get:
      tags:
      - Flows
      summary: Get flow dependencies
      operationId: dependencies_2
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: destinationOnly
        in: query
        description: "if true, list only destination dependencies, otherwise list\
          \ also source dependencies"
        required: true
        schema:
          type: boolean
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: dependencies_2 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowTopologyGraph"
  /api/v1/{tenant}/flows/{namespace}/{id}/graph:
    get:
      tags:
      - Flows
      summary: Generate a graph for a flow
      operationId: flowGraph_3
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      - name: subflows
        in: query
        description: The subflow tasks to display
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: flowGraph_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowGraph"
  /api/v1/{tenant}/flows/{namespace}/{id}/revisions:
    get:
      tags:
      - Flows
      summary: Get revisions for a flow
      operationId: revisions_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: revisions_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlowWithSource"
  /api/v1/{tenant}/flows/{namespace}/{id}/tasks/{taskId}:
    get:
      tags:
      - Flows
      summary: Get a flow task
      operationId: flowTask_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task id
        required: true
        schema:
          type: string
      - name: revision
        in: query
        description: The flow revision
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: flowTask_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
  /api/v1/{tenant}/flows/{namespace}/{id}/{taskId}:
    patch:
      tags:
      - Flows
      summary: Update a single task on a flow
      operationId: updateTask_1
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        required: true
      responses:
        "200":
          description: updateTask_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Flow"
      deprecated: true
  /api/v1/{tenant}/groups:
    post:
      tags:
      - Groups
      summary: Create a group
      operationId: create_23
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          description: create_23 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
  /api/v1/{tenant}/groups/autocomplete:
    post:
      tags:
      - Groups
      summary: List groups for autocomplete
      operationId: autocomplete_12
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_12 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
  /api/v1/{tenant}/groups/ids:
    post:
      tags:
      - Groups
      summary: List groups by ids
      operationId: ids_6
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
        required: true
      responses:
        "200":
          description: ids_6 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
  /api/v1/{tenant}/groups/search:
    get:
      tags:
      - Groups
      summary: Search for groups
      operationId: find_28
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_28 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Group_"
  /api/v1/{tenant}/groups/{id}:
    get:
      tags:
      - Groups
      summary: Get a group
      operationId: index_25
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_25 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    put:
      tags:
      - Groups
      summary: Update a group
      operationId: update_17
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          description: update_17 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    delete:
      tags:
      - Groups
      summary: Delete a group
      operationId: delete_26
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/{tenant}/groups/{id}/members:
    get:
      tags:
      - Groups
      summary: Search for users in a group
      operationId: members_3
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: members_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ApiUser_"
  /api/v1/{tenant}/groups/{id}/members/{userId}:
    put:
      tags:
      - Groups
      summary: Add a group for a user
      operationId: addGroup_3
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: addGroup_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
    delete:
      tags:
      - Groups
      summary: Delete a group for a user
      operationId: deleteGroup_3
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteGroup_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Groups:
    get:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Find by a combination of query parameters
      operationId: query_2
      parameters:
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: filter
        in: query
        schema:
          type: string
          nullable: true
      - name: sortBy
        in: query
        schema:
          type: string
          nullable: true
      - name: sortOrder
        in: query
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/SortOrder"
      - name: startIndex
        in: query
        schema:
          type: integer
          format: int32
          nullable: true
      - name: count
        in: query
        schema:
          type: integer
          format: int32
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    post:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Create
      operationId: create_24
      parameters:
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/ScimUser"
          application/json:
            schema:
              $ref: "#/components/schemas/ScimGroup"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: create_24 200 response
          content:
            application/scim+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/.search:
    post:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Search
      operationId: find_29
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        required: true
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Groups/{id}:
    get:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Find by id
      operationId: getById_2
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    put:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Update
      operationId: update_18
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/ScimResource"
          application/json:
            schema:
              $ref: "#/components/schemas/ScimGroup"
        required: true
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    delete:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Delete from the backing store
      operationId: delete_27
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: delete_27 200 response
          content:
            application/scim+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
    patch:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Patch a portion of the backing store
      operationId: patch_3
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/PatchRequest"
          application/json:
            schema:
              $ref: "#/components/schemas/PatchRequest"
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: patch_3 200 response
          content:
            application/scim+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/integrations/{integration}/scim/v2/ResourceTypes:
    get:
      tags:
      - SCIM-Configuration
      description: Get All Resource Types
      operationId: getAllResourceTypes_1
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ResourceType"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/ResourceTypes/{name}:
    get:
      tags:
      - SCIM-Configuration
      description: Get Resource Type by URN
      operationId: getResourceType_1
      parameters:
      - name: name
        in: path
        required: true
        schema:
          type: string
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ResourceType"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Schemas:
    get:
      tags:
      - SCIM-Configuration
      description: Get All Schemas
      operationId: getAllSchemas_1
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Schema"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Schemas/{uri}:
    get:
      tags:
      - SCIM-Configuration
      description: Get Schemas by URN
      operationId: getSchema_1
      parameters:
      - name: uri
        in: path
        required: true
        schema:
          type: string
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/Schema"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/ServiceProviderConfig:
    get:
      tags:
      - SCIM-Configuration
      description: Get Service Provider Configuration
      operationId: getServiceProviderConfiguration_1
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ServiceProviderConfiguration"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Users:
    get:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Find by a combination of query parameters
      operationId: query_3
      parameters:
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: filter
        in: query
        schema:
          type: string
          nullable: true
      - name: sortBy
        in: query
        schema:
          type: string
          nullable: true
      - name: sortOrder
        in: query
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/SortOrder"
      - name: startIndex
        in: query
        schema:
          type: integer
          format: int32
          nullable: true
      - name: count
        in: query
        schema:
          type: integer
          format: int32
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    post:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Create
      operationId: create_25
      parameters:
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/ScimUser"
          application/json:
            schema:
              $ref: "#/components/schemas/ScimUser"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: create_25 200 response
          content:
            application/scim+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Users/.search:
    post:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Search
      operationId: find_30
      parameters:
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
          application/json:
            schema:
              $ref: "#/components/schemas/SearchRequest"
        required: true
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
  /api/v1/{tenant}/integrations/{integration}/scim/v2/Users/{id}:
    get:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Find by id
      operationId: getById_3
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    put:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Update
      operationId: update_19
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/ScimResource"
          application/json:
            schema:
              $ref: "#/components/schemas/ScimUser"
        required: true
      responses:
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: OK response
          content:
            application/scim+json:
              schema:
                $ref: "#/components/schemas/ScimResource"
    delete:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Delete from the backing store
      operationId: delete_28
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: delete_28 200 response
          content:
            application/scim+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
    patch:
      tags:
      - SCIM
      summary: "{@inheritDoc}"
      description: Patch a portion of the backing store
      operationId: patch_4
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: attributes
        in: query
        schema:
          type: string
          nullable: true
      - name: excludedAttributes
        in: query
        schema:
          type: string
          nullable: true
      - name: integration
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/scim+json:
            schema:
              $ref: "#/components/schemas/PatchRequest"
          application/json:
            schema:
              $ref: "#/components/schemas/PatchRequest"
        required: true
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "404":
          description: Not found
        "500":
          description: Internal Server Error
        "501":
          description: Not Implemented
        "200":
          description: patch_4 200 response
          content:
            application/scim+json:
              schema:
                type: object
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/logs/search:
    get:
      tags:
      - Logs
      summary: Search for logs
      operationId: find_31
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: triggerId
        in: query
        description: A trigger id filter
        schema:
          type: string
          nullable: true
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_31 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_LogEntry_"
  /api/v1/{tenant}/logs/{executionId}:
    get:
      tags:
      - Logs
      summary: "Get logs for a specific execution, taskrun or task"
      operationId: findByExecution_2
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: findByExecution_2 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogEntry"
    delete:
      tags:
      - Logs
      summary: "Delete logs for a specific execution, taskrun or task"
      operationId: delete_29
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: delete_29 200 response
  /api/v1/{tenant}/logs/{executionId}/download:
    get:
      tags:
      - Logs
      summary: "Download logs for a specific execution, taskrun or task"
      operationId: download_1
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: attempt
        in: query
        description: The attempt number
        schema:
          type: integer
          format: int32
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: download_1 200 response
          content:
            text/plain:
              schema:
                type: string
                format: binary
  /api/v1/{tenant}/logs/{executionId}/follow:
    get:
      tags:
      - Logs
      summary: Follow logs for a specific execution
      operationId: follow_3
      parameters:
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: minLevel
        in: query
        description: The min log level filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: follow_3 200 response
          content:
            text/event-stream:
              schema:
                $ref: "#/components/schemas/Event_LogEntry_"
  /api/v1/{tenant}/logs/{namespace}/{flowId}:
    delete:
      tags:
      - Logs
      summary: "Delete logs for a specific execution, taskrun or task"
      operationId: deleteFromFlow_1
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow identifier
        required: true
        schema:
          type: string
      - name: triggerId
        in: query
        description: The trigger id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteFromFlow_1 200 response
  /api/v1/{tenant}/me:
    get:
      tags:
      - Auths
      summary: Get current user
      operationId: index_26
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_26 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentUserController.Me"
    patch:
      tags:
      - Auths
      summary: Updates details for the authenticated user. Returns user's updated
        information upon success.
      operationId: patch_5
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CurrentUserController.UserDetailsRequest"
        required: true
      responses:
        "200":
          description: patch_5 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/me/api-tokens:
    get:
      tags:
      - Auths
      summary: List all API Tokens for the authenticated user
      operationId: listApiTokens_4
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listApiTokens_4 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Auths
      summary: Create new API Token for authenticated user
      operationId: createApiToken_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiTokenRequest"
        required: true
      responses:
        "200":
          description: createApiToken_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/me/api-tokens/{tokenId}:
    delete:
      tags:
      - Auths
      summary: Delete an API Token for authenticated user
      operationId: deleteApiToken_4
      parameters:
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken_4 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/metrics/aggregates/{namespace}/{flowId}/{metric}:
    get:
      tags:
      - Metrics
      summary: Get metrics aggregations for a specific flow
      operationId: aggregateByFlowId_1
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: metric
        in: path
        description: The metric name
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: "The start datetime, default to now - 30 days"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: "The end datetime, default to now"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: aggregation
        in: query
        description: "The type of aggregation: avg, sum, min or max"
        required: true
        schema:
          type: string
          default: sum
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: aggregateByFlowId_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricAggregations"
  /api/v1/{tenant}/metrics/aggregates/{namespace}/{flowId}/{taskId}/{metric}:
    get:
      tags:
      - Metrics
      summary: Get metrics aggregations for a specific flow
      operationId: aggregateByFlowIdAndTaskId_1
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The task Id
        required: true
        schema:
          type: string
      - name: metric
        in: path
        description: The metric name
        required: true
        schema:
          type: string
      - name: startDate
        in: query
        description: "The start datetime, default to now - 30 days"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: "The end datetime, default to now"
        schema:
          type: string
          format: date-time
          nullable: true
      - name: aggregation
        in: query
        description: "The type of aggregation: avg, sum, min or max"
        required: true
        schema:
          type: string
          default: sum
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: aggregateByFlowIdAndTaskId_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetricAggregations"
  /api/v1/{tenant}/metrics/names/{namespace}/{flowId}:
    get:
      tags:
      - Metrics
      summary: Get metrics names for a specific flow
      operationId: flowMetrics_1
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: flowMetrics_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/{tenant}/metrics/names/{namespace}/{flowId}/{taskId}:
    get:
      tags:
      - Metrics
      summary: Get metrics names for a specific task in a flow
      operationId: taskMetrics_1
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: taskId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: taskMetrics_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/{tenant}/metrics/tasks/{namespace}/{flowId}:
    get:
      tags:
      - Metrics
      summary: "Get tasks id that have metrics for a specific flow, include deleted\
        \ or renamed tasks"
      operationId: tasks_1
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow Id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: tasks_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/{tenant}/metrics/{executionId}:
    get:
      tags:
      - Metrics
      summary: Get metrics for a specific execution
      operationId: findByExecution_3
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: executionId
        in: path
        description: The execution id
        required: true
        schema:
          type: string
      - name: taskRunId
        in: query
        description: The taskrun id
        schema:
          type: string
          nullable: true
      - name: taskId
        in: query
        description: The task id
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: findByExecution_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_MetricEntry_"
  /api/v1/{tenant}/namespaces:
    post:
      tags:
      - Namespaces
      summary: Create a namespace
      operationId: create_26
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Namespace"
        required: true
      responses:
        "200":
          description: create_26 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Namespace"
  /api/v1/{tenant}/namespaces/autocomplete:
    post:
      tags:
      - Namespaces
      summary: List namespaces for autocomplete
      operationId: autocomplete_13
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
      responses:
        "200":
          description: autocomplete_13 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/{tenant}/namespaces/search:
    get:
      tags:
      - Namespaces
      summary: Search for namespaces
      operationId: find_32
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: existing
        in: query
        description: Return only existing namespace
        schema:
          type: boolean
          nullable: true
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_32 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_NamespaceWithDisabled_"
  /api/v1/{tenant}/namespaces/{id}:
    get:
      tags:
      - Namespaces
      summary: Get a namespace
      operationId: index_27
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_27 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Namespace"
    put:
      tags:
      - Namespaces
      summary: Update a namespace
      operationId: update_20
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Namespace"
        required: true
      responses:
        "200":
          description: update_20 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Namespace"
    delete:
      tags:
      - Namespaces
      summary: Delete a flow
      operationId: delete_30
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/{tenant}/namespaces/{id}/inherited-plugindefaults:
    get:
      tags:
      - Namespaces
      summary: List inherited plugin defaults
      operationId: inheritedPluginDefaults_1
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inheritedPluginDefaults_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PluginDefault"
  /api/v1/{tenant}/namespaces/{id}/inherited-variables:
    get:
      tags:
      - Namespaces
      summary: List inherited variables
      operationId: inheritedVariables_1
      parameters:
      - name: id
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inheritedVariables_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v1/{tenant}/namespaces/{namespace}/dependencies:
    get:
      tags:
      - Flows
      summary: Get flow dependencies
      operationId: dependencies_3
      parameters:
      - name: namespace
        in: path
        description: The flow namespace
        required: true
        schema:
          type: string
      - name: destinationOnly
        in: query
        description: "if true, list only destination dependencies, otherwise list\
          \ also source dependencies"
        required: true
        schema:
          type: boolean
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: dependencies_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlowTopologyGraph"
  /api/v1/{tenant}/namespaces/{namespace}/files:
    get:
      tags:
      - Files
      summary: Get namespace file content
      operationId: file_3
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: file_3 200 response
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    put:
      tags:
      - Files
      summary: Move a file or directory
      operationId: move_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: from
        in: query
        description: The internal storage uri to move from
        required: true
        schema:
          type: string
          format: uri
      - name: to
        in: query
        description: The internal storage uri to move to
        required: true
        schema:
          type: string
          format: uri
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: move_1 200 response
    post:
      tags:
      - Files
      summary: Create a file
      operationId: createFile_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        required: true
        schema:
          type: string
          format: uri
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileContent:
                  type: string
                  format: binary
            encoding:
              fileContent:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: createFile_1 200 response
    delete:
      tags:
      - Files
      summary: Delete a file or directory
      operationId: delete_31
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri of the file / directory to delete
        required: true
        schema:
          type: string
          format: uri
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: delete_31 200 response
  /api/v1/{tenant}/namespaces/{namespace}/files/directory:
    get:
      tags:
      - Files
      summary: List directory content
      operationId: list_3
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          format: uri
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: list_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FileAttributes"
    post:
      tags:
      - Files
      summary: Create a directory
      operationId: createDirectory_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          format: uri
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: createDirectory_1 200 response
  /api/v1/{tenant}/namespaces/{namespace}/files/export:
    get:
      tags:
      - Files
      summary: Export namespace files as a ZIP
      operationId: export_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: export_1 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/{tenant}/namespaces/{namespace}/files/search:
    get:
      tags:
      - Files
      summary: Find files which path contain the given string in their URI
      operationId: search_5
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: The string the file path should contain
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: search_5 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/{tenant}/namespaces/{namespace}/files/stats:
    get:
      tags:
      - Files
      summary: "Get namespace file stats such as size, creation & modification dates\
        \ and type"
      operationId: stats_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: The internal storage uri
        schema:
          type: string
          format: uri
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: stats_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileAttributes"
  /api/v1/{tenant}/namespaces/{namespace}/inherited-secrets:
    get:
      tags:
      - Namespaces
      summary: List inherited secrets
      operationId: inheritedSecrets_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inheritedSecrets_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    type: string
  /api/v1/{tenant}/namespaces/{namespace}/kv:
    get:
      tags:
      - KV
      summary: List all keys for a namespace
      operationId: list_4
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: list_4 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/KVEntry"
  /api/v1/{tenant}/namespaces/{namespace}/kv/{key}:
    get:
      tags:
      - KV
      summary: Get value for a key
      operationId: get_4
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The key
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: get_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KVController.TypedValue"
    put:
      tags:
      - KV
      summary: Puts a key-value pair in store
      operationId: put_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The key
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: put_1 200 response
    delete:
      tags:
      - KV
      summary: Delete a key-value pair
      operationId: delete_32
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The key
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: delete_32 200 response
          content:
            application/json:
              schema:
                type: boolean
  /api/v1/{tenant}/namespaces/{namespace}/secrets:
    get:
      tags:
      - Namespaces
      summary: Get secrets for a namespace
      operationId: listSecret_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listSecret_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiSecretMeta"
    put:
      tags:
      - Namespaces
      summary: Update secrets for a namespace
      operationId: putSecrets_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiSecretValue"
        required: true
      responses:
        "200":
          description: putSecrets_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiSecretMeta"
  /api/v1/{tenant}/namespaces/{namespace}/secrets/{key}:
    delete:
      tags:
      - Namespaces
      summary: Delete a secret for a namespace
      operationId: deleteSecret_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: key
        in: path
        description: The secret key
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteSecret_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
    patch:
      tags:
      - Namespaces
      summary: Patch a secret metadata for a namespace
      operationId: patchSecret_1
      parameters:
      - name: namespace
        in: path
        description: The namespace id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiSecretMeta"
        required: true
      responses:
        "200":
          description: patchSecret_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiSecretMeta"
  /api/v1/{tenant}/plugins:
    get:
      tags:
      - Plugins
      summary: Get list of plugins
      operationId: search_6
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: search_6 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plugin"
  /api/v1/{tenant}/plugins/groups/subgroups:
    get:
      tags:
      - Plugins
      summary: Get plugins group by subgroups
      operationId: subgroups_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: subgroups_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Plugin"
  /api/v1/{tenant}/plugins/icons:
    get:
      tags:
      - Plugins
      summary: Get plugins icons
      operationId: icons_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: icons_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/PluginIcon"
  /api/v1/{tenant}/plugins/icons/groups:
    get:
      tags:
      - Plugins
      summary: Get plugins icons
      operationId: pluginGroupIcons_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: pluginGroupIcons_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/PluginIcon"
  /api/v1/{tenant}/plugins/inputs:
    get:
      tags:
      - Plugins
      summary: Get all types for an inputs
      operationId: inputs_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inputs_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InputType"
  /api/v1/{tenant}/plugins/inputs/{type}:
    get:
      tags:
      - Plugins
      summary: Get all json schemas for a type
      description: "The schema will be output as [http://json-schema.org/draft-07/schema](Json\
        \ Schema Draft 7)"
      operationId: inputSchemas_1
      parameters:
      - name: type
        in: path
        description: The schema needed
        required: true
        schema:
          $ref: "#/components/schemas/Type"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: inputSchemas_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationWithSchema"
  /api/v1/{tenant}/plugins/schemas/{type}:
    get:
      tags:
      - Plugins
      summary: Get all json schemas for a type
      description: "The schema will be output as [http://json-schema.org/draft-07/schema](Json\
        \ Schema Draft 7)"
      operationId: schemas_1
      parameters:
      - name: type
        in: path
        description: The schema needed
        required: true
        schema:
          $ref: "#/components/schemas/SchemaType"
      - name: arrayOf
        in: query
        description: If schema should be an array of requested type
        schema:
          type: boolean
          nullable: true
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: schemas_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
  /api/v1/{tenant}/plugins/{cls}:
    get:
      tags:
      - Plugins
      summary: Get plugin documentation
      operationId: pluginDocumentation_1
      parameters:
      - name: cls
        in: path
        description: The plugin full class name
        required: true
        schema:
          type: string
      - name: all
        in: query
        description: Include all the properties
        required: true
        schema:
          type: boolean
          default: false
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: pluginDocumentation_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentationWithSchema"
  /api/v1/{tenant}/roles:
    post:
      tags:
      - Roles
      summary: Create a role
      operationId: create_27
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
        required: true
      responses:
        "200":
          description: create_27 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
  /api/v1/{tenant}/roles/autocomplete:
    post:
      tags:
      - Roles
      summary: List roles for autocomplete
      operationId: autocomplete_14
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_14 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
  /api/v1/{tenant}/roles/ids:
    post:
      tags:
      - Roles
      description: List roles by ids
      operationId: ids_7
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
        required: true
      responses:
        "200":
          description: ids_7 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
  /api/v1/{tenant}/roles/search:
    get:
      tags:
      - Roles
      summary: Search for roles
      operationId: find_33
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_33 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Role_"
  /api/v1/{tenant}/roles/{id}:
    get:
      tags:
      - Roles
      summary: Get a role
      operationId: index_28
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_28 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    put:
      tags:
      - Roles
      summary: Update a role
      operationId: update_21
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
        required: true
      responses:
        "200":
          description: update_21 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    delete:
      tags:
      - Roles
      summary: Delete a role
      operationId: delete_33
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/{tenant}/security-integrations:
    get:
      tags:
      - SecurityIntegrations
      summary: List all security integrations.
      operationId: list_5
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: list_5 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - SecurityIntegrations
      summary: Create a security integration.
      operationId: create_28
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSecurityIntegrationRequest"
        required: true
      responses:
        "200":
          description: create_28 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/security-integrations/{id}:
    get:
      tags:
      - SecurityIntegrations
      summary: Get a security integration.
      operationId: index_29
      parameters:
      - name: id
        in: path
        description: The ID of security integration
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_29 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - SecurityIntegrations
      summary: Delete the security integration.
      operationId: delete_34
      parameters:
      - name: id
        in: path
        description: The ID of security integration
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: delete_34 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/security-integrations/{id}/disable:
    post:
      tags:
      - SecurityIntegrations
      summary: Disable the security integration.
      operationId: disable_1
      parameters:
      - name: id
        in: path
        description: The ID of security integration
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: disable_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/security-integrations/{id}/enable:
    post:
      tags:
      - SecurityIntegrations
      summary: Enable the security integration.
      operationId: enable_1
      parameters:
      - name: id
        in: path
        description: The ID of security integration
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: enable_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/stats/executions/daily:
    post:
      tags:
      - Stats
      summary: Get daily statistics for executions
      operationId: dailyStatistics_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.StatisticRequest"
        required: true
      responses:
        "200":
          description: dailyStatistics_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DailyExecutionStatistics"
  /api/v1/{tenant}/stats/executions/daily/group-by-flow:
    post:
      tags:
      - Stats
      summary: Get daily statistics for executions group by namespaces and flows
      operationId: dailyGroupByFlowStatistics_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.ByFlowStatisticRequest"
        required: true
      responses:
        "200":
          description: dailyGroupByFlowStatistics_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
                  additionalProperties:
                    type: array
                    items:
                      $ref: "#/components/schemas/DailyExecutionStatistics"
  /api/v1/{tenant}/stats/executions/daily/group-by-namespace:
    post:
      tags:
      - Stats
      summary: Get daily statistics for executions grouped by namespace
      operationId: dailyStatisticsGroupByNamespace_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.ByNamespaceStatisticRequest"
        required: true
      responses:
        "200":
          description: dailyStatisticsGroupByNamespace_1 200 response
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/ExecutionCountStatistics"
  /api/v1/{tenant}/stats/executions/latest/group-by-flow:
    post:
      tags:
      - Stats
      summary: Get latest execution by flows
      operationId: lastExecutions_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.LastExecutionsRequest"
        required: true
      responses:
        "200":
          description: lastExecutions_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Execution"
  /api/v1/{tenant}/stats/generate-reports:
    get:
      operationId: generate_1
      parameters:
      - name: from
        in: query
        description: The start date
        schema:
          type: string
          format: date
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: generate_1 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/{tenant}/stats/logs/daily:
    post:
      tags:
      - Stats
      summary: Get daily statistics for logs
      operationId: logsDailyStatistics_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.LogStatisticRequest"
        required: true
      responses:
        "200":
          description: logsDailyStatistics_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LogStatistics"
  /api/v1/{tenant}/stats/summary:
    post:
      tags:
      - Stats
      summary: Get summary statistics
      operationId: summary_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.SummaryRequest"
        required: true
      responses:
        "200":
          description: summary_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SummaryStatistics"
  /api/v1/{tenant}/stats/taskruns/daily:
    post:
      tags:
      - Stats
      summary: Get daily statistics for taskRuns
      operationId: taskRunsDailyStatistics_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatsController.StatisticRequest"
        required: true
      responses:
        "200":
          description: taskRunsDailyStatistics_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DailyExecutionStatistics"
  /api/v1/{tenant}/taskruns/search:
    get:
      tags:
      - Executions
      summary: Search for taskruns
      operationId: findTaskRun_1
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id filter
        schema:
          type: string
          nullable: true
      - name: startDate
        in: query
        description: The start datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: endDate
        in: query
        description: The end datetime
        schema:
          type: string
          format: date-time
          nullable: true
      - name: state
        in: query
        description: A state filter
        schema:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
      - name: labels
        in: query
        description: A labels filter as a list of 'key:value'
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: triggerExecutionId
        in: query
        description: The trigger execution id
        schema:
          type: string
          nullable: true
      - name: childFilter
        in: query
        description: A execution child filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/ExecutionRepositoryInterface.ChildFilter"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: findTaskRun_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_TaskRun_"
  /api/v1/{tenant}/templates:
    post:
      tags:
      - Templates
      summary: Create a template
      operationId: create_29
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
        required: true
      responses:
        "200":
          description: create_29 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
  /api/v1/{tenant}/templates/delete/by-ids:
    delete:
      tags:
      - Templates
      summary: Delete templates by their IDs.
      operationId: deleteByIds_5
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: deleteByIds_5 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/{tenant}/templates/delete/by-query:
    delete:
      tags:
      - Templates
      summary: Delete templates returned by the query parameters.
      operationId: deleteByQuery_5
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteByQuery_5 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BulkResponse"
  /api/v1/{tenant}/templates/distinct-namespaces:
    get:
      tags:
      - Templates
      summary: List all distinct namespaces
      operationId: listDistinctNamespace_5
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listDistinctNamespace_5 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/{tenant}/templates/export/by-ids:
    post:
      tags:
      - Templates
      summary: Export templates as a ZIP archive of yaml sources.
      operationId: exportByIds_3
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/IdWithNamespace"
        required: true
      responses:
        "200":
          description: exportByIds_3 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/{tenant}/templates/export/by-query:
    get:
      tags:
      - Templates
      summary: Export templates as a ZIP archive of yaml sources.
      operationId: exportByQuery_3
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: exportByQuery_3 200 response
          content:
            application/octet-stream:
              schema:
                type: array
                items:
                  type: string
                  format: byte
  /api/v1/{tenant}/templates/import:
    post:
      tags:
      - Templates
      summary: Import templates as a ZIP archive of yaml sources or a multi-objects
        YAML file.
      operationId: importTemplates_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fileUpload:
                  type: string
                  description: "The file to import, can be a ZIP archive or a multi-objects\
                    \ YAML file"
                  format: binary
            encoding:
              fileUpload:
                contentType: application/octet-stream
        required: true
      responses:
        "204":
          description: On success
        "200":
          description: importTemplates_1 200 response
  /api/v1/{tenant}/templates/search:
    get:
      tags:
      - Templates
      summary: Search for templates
      operationId: find_34
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_34 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Template_"
  /api/v1/{tenant}/templates/validate:
    post:
      tags:
      - Templates
      summary: Validate a list of templates
      operationId: validateTemplates_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-yaml:
            schema:
              type: string
        required: true
      responses:
        "200":
          description: validateTemplates_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ValidateConstraintViolation"
  /api/v1/{tenant}/templates/{namespace}:
    post:
      tags:
      - Templates
      summary: Update a complete namespace from json object
      description: |-
        All Template will be created / updated for this namespace.
        Template already created but not in `templates` will be deleted if the query delete is `true`
      operationId: updateNamespace_3
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: delete
        in: query
        description: If missing template should be deleted
        required: true
        schema:
          type: boolean
          default: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Template"
        required: true
      responses:
        "200":
          description: updateNamespace_3 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Template"
  /api/v1/{tenant}/templates/{namespace}/{id}:
    get:
      tags:
      - Templates
      summary: Get a template
      operationId: index_30
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_30 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
    put:
      tags:
      - Templates
      summary: Update a template
      operationId: update_22
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Template"
        required: true
      responses:
        "200":
          description: update_22 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
    delete:
      tags:
      - Templates
      summary: Delete a template
      operationId: delete_35
      parameters:
      - name: namespace
        in: path
        description: The template namespace
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: The template id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "200":
          description: delete_35 200 response
  /api/v1/{tenant}/tenants:
    post:
      tags:
      - Tenants
      summary: Create a tenant
      operationId: create_30
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tenant"
        required: true
      responses:
        "200":
          description: create_30 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
  /api/v1/{tenant}/tenants/bindings:
    post:
      tags:
      - Bindings
      summary: Create a binding
      operationId: create_31
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Binding"
        required: true
      responses:
        "200":
          description: create_31 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractBindingController.BindingDetail"
  /api/v1/{tenant}/tenants/bindings/search:
    get:
      tags:
      - Bindings
      summary: Search for bindings
      operationId: find_35
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: Binding type filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Binding.Type"
      - name: id
        in: query
        description: External id filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_35 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_AbstractBindingController.BindingDetail_"
  /api/v1/{tenant}/tenants/bindings/{id}:
    get:
      tags:
      - Bindings
      summary: Get a binding
      operationId: index_31
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_31 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractBindingController.BindingDetail"
    delete:
      tags:
      - Bindings
      summary: Delete a binding
      operationId: delete_36
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/{tenant}/tenants/groups:
    post:
      tags:
      - Groups
      summary: Create a group
      operationId: create_32
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          description: create_32 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
  /api/v1/{tenant}/tenants/groups/autocomplete:
    post:
      tags:
      - Groups
      summary: List groups for autocomplete
      operationId: autocomplete_15
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_15 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
  /api/v1/{tenant}/tenants/groups/ids:
    post:
      tags:
      - Groups
      summary: List groups by ids
      operationId: ids_8
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
        required: true
      responses:
        "200":
          description: ids_8 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
  /api/v1/{tenant}/tenants/groups/search:
    get:
      tags:
      - Groups
      summary: Search for groups
      operationId: find_36
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_36 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Group_"
  /api/v1/{tenant}/tenants/groups/{id}:
    get:
      tags:
      - Groups
      summary: Get a group
      operationId: index_32
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_32 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    put:
      tags:
      - Groups
      summary: Update a group
      operationId: update_23
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          description: update_23 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    delete:
      tags:
      - Groups
      summary: Delete a group
      operationId: delete_37
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/{tenant}/tenants/groups/{id}/members:
    get:
      tags:
      - Groups
      summary: Search for users in a group
      operationId: members_4
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: members_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ApiUser_"
  /api/v1/{tenant}/tenants/groups/{id}/members/{userId}:
    put:
      tags:
      - Groups
      summary: Add a group for a user
      operationId: addGroup_4
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: addGroup_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
    delete:
      tags:
      - Groups
      summary: Delete a group for a user
      operationId: deleteGroup_4
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteGroup_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/tenants/namespaces/autocomplete:
    post:
      tags:
      - Namespaces
      summary: List namespaces for autocomplete
      operationId: autocomplete_16
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
      responses:
        "200":
          description: autocomplete_16 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/{tenant}/tenants/roles:
    post:
      tags:
      - Roles
      summary: Create a role
      operationId: create_33
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
        required: true
      responses:
        "200":
          description: create_33 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
  /api/v1/{tenant}/tenants/roles/autocomplete:
    post:
      tags:
      - Roles
      summary: List roles for autocomplete
      operationId: autocomplete_17
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_17 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
  /api/v1/{tenant}/tenants/roles/ids:
    post:
      tags:
      - Roles
      description: List roles by ids
      operationId: ids_9
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
        required: true
      responses:
        "200":
          description: ids_9 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
  /api/v1/{tenant}/tenants/roles/search:
    get:
      tags:
      - Roles
      summary: Search for roles
      operationId: find_37
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_37 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Role_"
  /api/v1/{tenant}/tenants/roles/{id}:
    get:
      tags:
      - Roles
      summary: Get a role
      operationId: index_33
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_33 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    put:
      tags:
      - Roles
      summary: Update a role
      operationId: update_24
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
        required: true
      responses:
        "200":
          description: update_24 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    delete:
      tags:
      - Roles
      summary: Delete a role
      operationId: delete_38
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/{tenant}/tenants/search:
    get:
      tags:
      - Tenants
      summary: Search for tenants
      operationId: find_38
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_38 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Tenant_"
  /api/v1/{tenant}/tenants/users:
    post:
      tags:
      - Users
      summary: Create a standard user
      operationId: create_34
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiUser"
        required: true
      responses:
        "200":
          description: create_34 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/tenants/users/autocomplete:
    post:
      tags:
      - Users
      summary: List users for autocomplete
      operationId: autocomplete_18
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbstractUserController.UserApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_18 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/tenants/users/search:
    get:
      tags:
      - Users
      summary: Search for users
      operationId: find_39
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: The type of user
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/UserType"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_39 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ApiUser_"
  /api/v1/{tenant}/tenants/users/service-accounts:
    post:
      tags:
      - Users
      summary: Create a user service account
      operationId: createServiceAccount_3
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiServiceAccount"
        required: true
      responses:
        "200":
          description: createServiceAccount_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiServiceAccount"
  /api/v1/{tenant}/tenants/users/service-accounts/{id}:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: updateServiceAccount_3
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiServiceAccount"
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/{tenant}/tenants/users/{id}:
    get:
      tags:
      - Users
      summary: Get a user
      operationId: index_34
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
    put:
      tags:
      - Users
      summary: Update a standard user
      operationId: update_25
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiUser"
        required: true
      responses:
        "404":
          description: On user not found
    delete:
      tags:
      - Users
      summary: Delete a user
      operationId: delete_39
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "404":
          description: On user not found
  /api/v1/{tenant}/tenants/users/{id}/api-tokens:
    get:
      tags:
      - Users
      summary: List all API Tokens for specific user
      operationId: listApiTokens_5
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listApiTokens_5 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Users
      summary: Create new API Token for a specific user
      operationId: createApiTokensForUser_3
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiTokenRequest"
        required: true
      responses:
        "200":
          description: createApiTokensForUser_3 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/tenants/users/{id}/api-tokens/{tokenId}:
    delete:
      tags:
      - Users
      summary: Delete an API Token for specific user and token id
      operationId: deleteApiToken_5
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken_5 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/tenants/users/{id}/auths/{uid}:
    delete:
      tags:
      - Users
      summary: Delete an Auth for a user
      operationId: deleteAuth_3
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: uid
        in: path
        description: The auth id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
  /api/v1/{tenant}/tenants/users/{id}/password:
    put:
      tags:
      - Users
      summary: Create a basic auth password for a standard user
      operationId: index_35
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbstractUserController.PasswordRequest"
        required: true
      responses:
        "200":
          description: index_35 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/tenants/users/{id}/refresh-token:
    delete:
      tags:
      - Users
      summary: Delete a user refresh token
      operationId: deleteRefreshToken_3
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteRefreshToken_3 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/tenants/users/{id}/set-superadmin:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: setSuperAdmin_2
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/{tenant}/tenants/{id}:
    get:
      tags:
      - Tenants
      summary: Get a tenant
      operationId: get_5
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: get_5 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
    put:
      tags:
      - Tenants
      summary: Update a tenant
      operationId: update_26
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tenant"
        required: true
      responses:
        "200":
          description: update_26 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tenant"
    delete:
      tags:
      - Tenants
      summary: Delete a tenant
      operationId: delete_40
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/{tenant}/tenants/{id}/logo:
    post:
      tags:
      - Tenants
      summary: Set a tenant logo
      operationId: setLogo_1
      parameters:
      - name: id
        in: path
        description: The tenant id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                logo:
                  type: string
                  description: The logo file
                  format: binary
            encoding:
              logo:
                contentType: application/octet-stream
        required: true
      responses:
        "200":
          description: setLogo_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiTenant"
  /api/v1/{tenant}/tenants/{ressourceTenant}/bindings:
    post:
      tags:
      - Bindings
      summary: Create a binding
      operationId: create_35
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Binding"
        required: true
      responses:
        "200":
          description: create_35 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractBindingController.BindingDetail"
  /api/v1/{tenant}/tenants/{ressourceTenant}/bindings/search:
    get:
      tags:
      - Bindings
      summary: Search for bindings
      operationId: find_40
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: Binding type filter
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Binding.Type"
      - name: id
        in: query
        description: External id filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter
        schema:
          type: string
          nullable: true
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_40 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_AbstractBindingController.BindingDetail_"
  /api/v1/{tenant}/tenants/{ressourceTenant}/bindings/{id}:
    get:
      tags:
      - Bindings
      summary: Get a binding
      operationId: index_36
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_36 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AbstractBindingController.BindingDetail"
    delete:
      tags:
      - Bindings
      summary: Delete a binding
      operationId: delete_41
      parameters:
      - name: id
        in: path
        description: The binding id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/{tenant}/tenants/{ressourceTenant}/groups:
    post:
      tags:
      - Groups
      summary: Create a group
      operationId: create_36
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          description: create_36 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
  /api/v1/{tenant}/tenants/{ressourceTenant}/groups/autocomplete:
    post:
      tags:
      - Groups
      summary: List groups for autocomplete
      operationId: autocomplete_19
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_19 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
  /api/v1/{tenant}/tenants/{ressourceTenant}/groups/ids:
    post:
      tags:
      - Groups
      summary: List groups by ids
      operationId: ids_10
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
        required: true
      responses:
        "200":
          description: ids_10 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Group"
  /api/v1/{tenant}/tenants/{ressourceTenant}/groups/search:
    get:
      tags:
      - Groups
      summary: Search for groups
      operationId: find_41
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_41 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Group_"
  /api/v1/{tenant}/tenants/{ressourceTenant}/groups/{id}:
    get:
      tags:
      - Groups
      summary: Get a group
      operationId: index_37
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_37 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    put:
      tags:
      - Groups
      summary: Update a group
      operationId: update_27
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Group"
        required: true
      responses:
        "200":
          description: update_27 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Group"
    delete:
      tags:
      - Groups
      summary: Delete a group
      operationId: delete_42
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/{tenant}/tenants/{ressourceTenant}/groups/{id}/members:
    get:
      tags:
      - Groups
      summary: Search for users in a group
      operationId: members_5
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: members_5 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ApiUser_"
  /api/v1/{tenant}/tenants/{ressourceTenant}/groups/{id}/members/{userId}:
    put:
      tags:
      - Groups
      summary: Add a group for a user
      operationId: addGroup_5
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: addGroup_5 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
    delete:
      tags:
      - Groups
      summary: Delete a group for a user
      operationId: deleteGroup_5
      parameters:
      - name: id
        in: path
        description: The group id
        required: true
        schema:
          type: string
      - name: userId
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteGroup_5 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/tenants/{ressourceTenant}/namespaces/autocomplete:
    post:
      tags:
      - Namespaces
      summary: List namespaces for autocomplete
      operationId: autocomplete_20
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
      responses:
        "200":
          description: autocomplete_20 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/v1/{tenant}/tenants/{ressourceTenant}/roles:
    post:
      tags:
      - Roles
      summary: Create a role
      operationId: create_37
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
        required: true
      responses:
        "200":
          description: create_37 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
  /api/v1/{tenant}/tenants/{ressourceTenant}/roles/autocomplete:
    post:
      tags:
      - Roles
      summary: List roles for autocomplete
      operationId: autocomplete_21
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_21 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
  /api/v1/{tenant}/tenants/{ressourceTenant}/roles/ids:
    post:
      tags:
      - Roles
      description: List roles by ids
      operationId: ids_11
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiIds"
        required: true
      responses:
        "200":
          description: ids_11 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
  /api/v1/{tenant}/tenants/{ressourceTenant}/roles/search:
    get:
      tags:
      - Roles
      summary: Search for roles
      operationId: find_42
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_42 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Role_"
  /api/v1/{tenant}/tenants/{ressourceTenant}/roles/{id}:
    get:
      tags:
      - Roles
      summary: Get a role
      operationId: index_38
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: index_38 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    put:
      tags:
      - Roles
      summary: Update a role
      operationId: update_28
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Role"
        required: true
      responses:
        "200":
          description: update_28 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    delete:
      tags:
      - Roles
      summary: Delete a role
      operationId: delete_43
      parameters:
      - name: id
        in: path
        description: The role id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
  /api/v1/{tenant}/tenants/{ressourceTenant}/users:
    post:
      tags:
      - Users
      summary: Create a standard user
      operationId: create_38
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiUser"
        required: true
      responses:
        "200":
          description: create_38 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/tenants/{ressourceTenant}/users/autocomplete:
    post:
      tags:
      - Users
      summary: List users for autocomplete
      operationId: autocomplete_22
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbstractUserController.UserApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_22 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/tenants/{ressourceTenant}/users/search:
    get:
      tags:
      - Users
      summary: Search for users
      operationId: find_43
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: The type of user
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/UserType"
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_43 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ApiUser_"
  /api/v1/{tenant}/tenants/{ressourceTenant}/users/service-accounts:
    post:
      tags:
      - Users
      summary: Create a user service account
      operationId: createServiceAccount_4
      parameters:
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiServiceAccount"
        required: true
      responses:
        "200":
          description: createServiceAccount_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiServiceAccount"
  /api/v1/{tenant}/tenants/{ressourceTenant}/users/service-accounts/{id}:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: updateServiceAccount_4
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiServiceAccount"
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}:
    get:
      tags:
      - Users
      summary: Get a user
      operationId: index_39
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
    put:
      tags:
      - Users
      summary: Update a standard user
      operationId: update_29
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiUser"
        required: true
      responses:
        "404":
          description: On user not found
    delete:
      tags:
      - Users
      summary: Delete a user
      operationId: delete_44
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "404":
          description: On user not found
  /api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}/api-tokens:
    get:
      tags:
      - Users
      summary: List all API Tokens for specific user
      operationId: listApiTokens_6
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listApiTokens_6 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Users
      summary: Create new API Token for a specific user
      operationId: createApiTokensForUser_4
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiTokenRequest"
        required: true
      responses:
        "200":
          description: createApiTokensForUser_4 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}/api-tokens/{tokenId}:
    delete:
      tags:
      - Users
      summary: Delete an API Token for specific user and token id
      operationId: deleteApiToken_6
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken_6 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}/auths/{uid}:
    delete:
      tags:
      - Users
      summary: Delete an Auth for a user
      operationId: deleteAuth_4
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: uid
        in: path
        description: The auth id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
  /api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}/password:
    put:
      tags:
      - Users
      summary: Create a basic auth password for a standard user
      operationId: index_40
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbstractUserController.PasswordRequest"
        required: true
      responses:
        "200":
          description: index_40 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}/refresh-token:
    delete:
      tags:
      - Users
      summary: Delete a user refresh token
      operationId: deleteRefreshToken_4
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteRefreshToken_4 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/tenants/{ressourceTenant}/users/{id}/set-superadmin:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: setSuperAdmin_3
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: ressourceTenant
        in: path
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/{tenant}/triggers:
    put:
      tags:
      - Triggers
      summary: Update a trigger
      operationId: update_30
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: update_30 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/{tenant}/triggers/backfill/delete:
    post:
      tags:
      - Triggers
      summary: Delete a backfill
      operationId: deleteBackfill_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: deleteBackfill_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/{tenant}/triggers/backfill/delete/by-query:
    post:
      tags:
      - Triggers
      summary: Delete backfill for given triggers
      operationId: deleteBackfillByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteBackfillByQuery_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/triggers/backfill/delete/by-triggers:
    post:
      tags:
      - Triggers
      summary: Delete backfill for given triggers
      operationId: deleteBackfillByIds_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: deleteBackfillByIds_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/triggers/backfill/pause:
    put:
      tags:
      - Triggers
      summary: Pause a backfill
      operationId: pauseBackfill_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: pauseBackfill_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/{tenant}/triggers/backfill/pause/by-query:
    post:
      tags:
      - Triggers
      summary: Pause backfill for given triggers
      operationId: pauseBackfillByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: pauseBackfillByQuery_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/triggers/backfill/pause/by-triggers:
    post:
      tags:
      - Triggers
      summary: Pause backfill for given triggers
      operationId: pauseBackfillByIds_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: pauseBackfillByIds_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/triggers/backfill/unpause:
    put:
      tags:
      - Triggers
      summary: Unpause a backfill
      operationId: unpauseBackfill_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: unpauseBackfill_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/{tenant}/triggers/backfill/unpause/by-query:
    post:
      tags:
      - Triggers
      summary: Unpause backfill for given triggers
      operationId: unpauseBackfillByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: unpauseBackfillByQuery_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/triggers/backfill/unpause/by-triggers:
    post:
      tags:
      - Triggers
      summary: Unpause backfill for given triggers
      operationId: unpauseBackfillByIds_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: unpauseBackfillByIds_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/triggers/restart:
    post:
      tags:
      - Triggers
      summary: Restart a trigger
      operationId: restart_4
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: restart_4 200 response
  /api/v1/{tenant}/triggers/search:
    get:
      tags:
      - Triggers
      summary: Search for triggers
      operationId: search_7
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: workerId
        in: query
        description: The identifier of the worker currently evaluating the trigger
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: search_7 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_TriggerController.Triggers_"
  /api/v1/{tenant}/triggers/set-disabled/by-query:
    post:
      tags:
      - Triggers
      summary: Delete backfill for given triggers
      operationId: setDisabledByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: disabled
        in: query
        description: The disabled state
        required: true
        schema:
          type: boolean
          default: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: setDisabledByQuery_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/triggers/set-disabled/by-triggers:
    post:
      tags:
      - Triggers
      summary: Delete backfill for given triggers
      operationId: setDisabledByIds_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TriggerController.SetDisabledRequest"
        required: true
      responses:
        "200":
          description: setDisabledByIds_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/triggers/unlock/by-query:
    post:
      tags:
      - Triggers
      summary: Unlock triggers by query parameters
      operationId: unlockByQuery_1
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: unlockByQuery_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/triggers/unlock/by-triggers:
    post:
      tags:
      - Triggers
      summary: Unlock given triggers
      operationId: unlockByIds_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/Trigger"
        required: true
      responses:
        "200":
          description: unlockByIds_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/triggers/{namespace}/{flowId}:
    get:
      tags:
      - Triggers
      summary: Get all triggers for a flow
      operationId: find_44
      parameters:
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: namespace
        in: query
        description: A namespace filter prefix
        schema:
          type: string
          nullable: true
      - name: flowId
        in: query
        description: A flow id
        schema:
          type: string
          nullable: true
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_44 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_Trigger_"
  /api/v1/{tenant}/triggers/{namespace}/{flowId}/{triggerId}/restart:
    post:
      tags:
      - Triggers
      summary: Restart a trigger
      operationId: restart_5
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: triggerId
        in: path
        description: The trigger id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: restart_5 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/triggers/{namespace}/{flowId}/{triggerId}/unlock:
    post:
      tags:
      - Triggers
      summary: Unlock a trigger
      operationId: unlock_1
      parameters:
      - name: namespace
        in: path
        description: The namespace
        required: true
        schema:
          type: string
      - name: flowId
        in: path
        description: The flow id
        required: true
        schema:
          type: string
      - name: triggerId
        in: path
        description: The trigger id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: unlock_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trigger"
  /api/v1/{tenant}/usages:
    get:
      tags:
      - Misc
      summary: Get instance usage information for the current tenant
      operationId: tenantUsage_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: tenantUsage_1 200 response
          content:
            application/json:
              schema:
                oneOf:
                - $ref: "#/components/schemas/Usage_4"
                - $ref: "#/components/schemas/Usage_2"
              example: null
  /api/v1/{tenant}/usages/all:
    get:
      tags:
      - Misc
      summary: Get instance usage information
      operationId: usages_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: usages_1 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Usage"
  /api/v1/{tenant}/users:
    post:
      tags:
      - Users
      summary: Create a standard user
      operationId: create_39
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiUser"
        required: true
      responses:
        "200":
          description: create_39 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/users/autocomplete:
    post:
      tags:
      - Users
      summary: List users for autocomplete
      operationId: autocomplete_23
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbstractUserController.UserApiAutocomplete"
        required: true
      responses:
        "200":
          description: autocomplete_23 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/users/password:
    put:
      tags:
      - Users
      summary: Update login password for authenticated user
      operationId: updateLoginPassword_1
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserController.UpdatePasswordRequest"
        required: true
      responses:
        "200":
          description: updateLoginPassword_1 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/users/search:
    get:
      tags:
      - Users
      summary: Search for users
      operationId: find_45
      parameters:
      - name: q
        in: query
        description: A string filter
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        description: The current page
        required: true
        schema:
          type: integer
          format: int32
          default: 1
      - name: size
        in: query
        description: The current page size
        required: true
        schema:
          type: integer
          format: int32
          default: 10
      - name: sort
        in: query
        description: The sort of current page
        schema:
          type: array
          nullable: true
          items:
            type: string
      - name: type
        in: query
        description: The type of user
        schema:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/UserType"
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: find_45 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedResults_ApiUser_"
  /api/v1/{tenant}/users/service-accounts:
    post:
      tags:
      - Users
      summary: Create a user service account
      operationId: createServiceAccount_5
      parameters:
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiServiceAccount"
        required: true
      responses:
        "200":
          description: createServiceAccount_5 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiServiceAccount"
  /api/v1/{tenant}/users/service-accounts/{id}:
    put:
      tags:
      - Users
      summary: Update a user service account
      operationId: updateServiceAccount_5
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiServiceAccount"
        required: true
      responses:
        "404":
          description: On user not found
  /api/v1/{tenant}/users/{id}:
    get:
      tags:
      - Users
      summary: Get a user
      operationId: index_41
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
    put:
      tags:
      - Users
      summary: Update a standard user
      operationId: update_31
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiUser"
        required: true
      responses:
        "404":
          description: On user not found
    delete:
      tags:
      - Users
      summary: Delete a user
      operationId: delete_45
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: On success
        "404":
          description: On user not found
  /api/v1/{tenant}/users/{id}/api-tokens:
    get:
      tags:
      - Users
      summary: List all API Tokens for specific user
      operationId: listApiTokens_7
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: listApiTokens_7 200 response
          content:
            application/json:
              schema:
                type: object
    post:
      tags:
      - Users
      summary: Create new API Token for a specific user
      operationId: createApiTokensForUser_5
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateApiTokenRequest"
        required: true
      responses:
        "200":
          description: createApiTokensForUser_5 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/users/{id}/api-tokens/{tokenId}:
    delete:
      tags:
      - Users
      summary: Delete an API Token for specific user and token id
      operationId: deleteApiToken_7
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tokenId
        in: path
        description: The token id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteApiToken_7 200 response
          content:
            application/json:
              schema:
                type: object
  /api/v1/{tenant}/users/{id}/auths/{uid}:
    delete:
      tags:
      - Users
      summary: Delete an Auth for a user
      operationId: deleteAuth_5
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: uid
        in: path
        description: The auth id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "404":
          description: On user not found
  /api/v1/{tenant}/users/{id}/password:
    put:
      tags:
      - Users
      summary: Create a basic auth password for a standard user
      operationId: index_42
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AbstractUserController.PasswordRequest"
        required: true
      responses:
        "200":
          description: index_42 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
  /api/v1/{tenant}/users/{id}/refresh-token:
    delete:
      tags:
      - Users
      summary: Delete a user refresh token
      operationId: deleteRefreshToken_5
      parameters:
      - name: id
        in: path
        description: The user id
        required: true
        schema:
          type: string
      - name: tenant
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: deleteRefreshToken_5 200 response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiUser"
components:
  schemas:
    AbstractBindingController.BindingDetail:
      required:
      - binding
      - group
      - role
      - user
      type: object
      properties:
        binding:
          $ref: "#/components/schemas/Binding"
        role:
          $ref: "#/components/schemas/Role"
        user:
          $ref: "#/components/schemas/ApiUser"
        group:
          $ref: "#/components/schemas/Group"
    AbstractCollection_AbstractBindingController.BindingDetail_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_ApiUser_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_AuditLogController.AuditLogWithUser_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_BlueprintController.BlueprintItem_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Blueprint_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_ClusterController.ApiServiceInstance_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Execution_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Flow_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Group_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_LogEntry_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_MetricEntry_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_NamespaceWithDisabled_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Role_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_SearchResult_Flow__:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_TaskRun_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Template_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Tenant_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_TriggerController.Triggers_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractCollection_Trigger_:
      type: object
      properties:
        empty:
          type: boolean
    AbstractFlow:
      required:
      - deleted
      - disabled
      - id
      - namespace
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9._-]*"
          type: string
        namespace:
          pattern: "^[a-z0-9][a-z0-9._-]*"
          type: string
        revision:
          minimum: 1
          type: integer
          format: int32
        inputs:
          type: array
          items:
            $ref: "#/components/schemas/Input_Object_"
        disabled:
          type: boolean
        deleted:
          type: boolean
    AbstractGraph:
      type: object
      properties:
        uid:
          type: string
        type:
          type: string
        error:
          type: boolean
    AbstractList_AbstractBindingController.BindingDetail_:
      $ref: "#/components/schemas/AbstractCollection_AbstractBindingController.BindingDetail_"
    AbstractList_ApiUser_:
      $ref: "#/components/schemas/AbstractCollection_ApiUser_"
    AbstractList_AuditLogController.AuditLogWithUser_:
      $ref: "#/components/schemas/AbstractCollection_AuditLogController.AuditLogWithUser_"
    AbstractList_BlueprintController.BlueprintItem_:
      $ref: "#/components/schemas/AbstractCollection_BlueprintController.BlueprintItem_"
    AbstractList_Blueprint_:
      $ref: "#/components/schemas/AbstractCollection_Blueprint_"
    AbstractList_ClusterController.ApiServiceInstance_:
      $ref: "#/components/schemas/AbstractCollection_ClusterController.ApiServiceInstance_"
    AbstractList_Execution_:
      $ref: "#/components/schemas/AbstractCollection_Execution_"
    AbstractList_Flow_:
      $ref: "#/components/schemas/AbstractCollection_Flow_"
    AbstractList_Group_:
      $ref: "#/components/schemas/AbstractCollection_Group_"
    AbstractList_LogEntry_:
      $ref: "#/components/schemas/AbstractCollection_LogEntry_"
    AbstractList_MetricEntry_:
      $ref: "#/components/schemas/AbstractCollection_MetricEntry_"
    AbstractList_NamespaceWithDisabled_:
      $ref: "#/components/schemas/AbstractCollection_NamespaceWithDisabled_"
    AbstractList_Role_:
      $ref: "#/components/schemas/AbstractCollection_Role_"
    AbstractList_SearchResult_Flow__:
      $ref: "#/components/schemas/AbstractCollection_SearchResult_Flow__"
    AbstractList_TaskRun_:
      $ref: "#/components/schemas/AbstractCollection_TaskRun_"
    AbstractList_Template_:
      $ref: "#/components/schemas/AbstractCollection_Template_"
    AbstractList_Tenant_:
      $ref: "#/components/schemas/AbstractCollection_Tenant_"
    AbstractList_TriggerController.Triggers_:
      $ref: "#/components/schemas/AbstractCollection_TriggerController.Triggers_"
    AbstractList_Trigger_:
      $ref: "#/components/schemas/AbstractCollection_Trigger_"
    AbstractMetricEntry_Object_:
      required:
      - name
      type: object
      properties:
        type:
          type: string
        value: {}
        name:
          type: string
        tags:
          type: object
          additionalProperties:
            type: string
        timestamp:
          type: string
          format: date-time
    AbstractRetry:
      type: object
    AbstractTrigger:
      required:
      - disabled
      - id
      - type
      type: object
      properties:
        minLogLevel:
          deprecated: true
          allOf:
          - $ref: "#/components/schemas/Level"
        id:
          title: A unique ID for the whole flow.
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          title: The class name for this current trigger.
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
        description:
          type: string
        conditions:
          title: List of conditions in order to limit the flow trigger.
          type: array
          items:
            $ref: "#/components/schemas/Condition"
        disabled:
          type: boolean
        workerGroup:
          $ref: "#/components/schemas/WorkerGroup"
        logLevel:
          $ref: "#/components/schemas/Level"
        labels:
          title: The labels to pass to the execution created.
          type: array
          items:
            $ref: "#/components/schemas/Label"
        stopAfter:
          title: List of execution states after which a trigger should be stopped
            (a.k.a. disabled).
          type: array
          items:
            $ref: "#/components/schemas/State.Type"
        logToFile:
          type: boolean
    AbstractTriggerForExecution:
      required:
      - id
      - type
      type: object
      properties:
        id:
          title: A unique ID for the whole flow.
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          title: The class name for this current trigger.
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
    AbstractUser:
      required:
      - type
      - username
      type: object
      properties:
        type:
          $ref: "#/components/schemas/UserType"
        groupList:
          type: array
          items:
            $ref: "#/components/schemas/AbstractUser.GroupIdentifier"
        groups:
          type: array
          items:
            type: object
        id:
          type: string
        username:
          pattern: "^[a-zA-Z0-9_!#$%&’*+-=?`{|}~^.-@]+$"
          type: string
        description:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          pattern: "^$|^[a-zA-Z0-9_!#$%&’*+/=?`{|}~^.-]+@[a-zA-Z0-9.-]+$"
          type: string
        providers:
          type: array
          items:
            $ref: "#/components/schemas/AbstractUser.TenantIdentityProvider"
    AbstractUser.GroupIdentifier:
      required:
      - groupId
      - membership
      - tenantId
      type: object
      properties:
        tenantId:
          type: string
          nullable: true
        groupId:
          type: string
        membership:
          $ref: "#/components/schemas/AbstractUser.GroupIdentifier.Membership"
    AbstractUser.GroupIdentifier.Membership:
      type: string
      enum:
      - OWNER
      - MEMBER
    AbstractUser.TenantIdentityProvider:
      type: object
      allOf:
      - $ref: "#/components/schemas/IdentityProvider"
      - properties:
          tenantId:
            type: string
            nullable: true
    AbstractUserController.PasswordRequest:
      required:
      - password
      type: object
      properties:
        password:
          type: string
    AbstractUserController.UserApiAutocomplete:
      type: object
      allOf:
      - $ref: "#/components/schemas/ApiAutocomplete"
      - properties:
          username:
            type: string
            nullable: true
    AclService.NamespaceRole:
      required:
      - namespaceId
      - role
      type: object
      properties:
        role:
          $ref: "#/components/schemas/Role"
        namespaceId:
          type: string
    Action:
      type: string
      enum:
      - READ
      - CREATE
      - UPDATE
      - DELETE
    ApiAuth:
      required:
      - name
      - type
      - uid
      type: object
      properties:
        uid:
          type: string
        type:
          type: string
        name:
          type: string
    ApiAutocomplete:
      type: object
      properties:
        q:
          type: string
          nullable: true
        ids:
          type: array
          nullable: true
          items:
            type: string
    ApiIds:
      required:
      - ids
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
    ApiSecretMeta:
      required:
      - description
      - key
      - tags
      type: object
      properties:
        key:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/ApiSecretTag"
    ApiSecretTag:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ApiSecretValue:
      required:
      - description
      - key
      - tags
      - value
      type: object
      properties:
        tags:
          type: array
          items:
            $ref: "#/components/schemas/ApiSecretTag"
        key:
          minLength: 1
          type: string
        value:
          minLength: 1
          type: string
        description:
          type: string
    ApiServiceAccount:
      required:
      - description
      - groupList
      - id
      - username
      type: object
      properties:
        id:
          type: string
          description: the user's ID.
        username:
          pattern: "^(?=.{1,63}$)[a-z0-9]+(?:-[a-z0-9]+)*$"
          type: string
          description: the user's name.
        description:
          type: string
          description: the user's description.
        groupList:
          type: array
          items:
            $ref: "#/components/schemas/AbstractUser.GroupIdentifier"
      description: A User Service Account.
    ApiTenant:
      required:
      - deleted
      - logo
      type: object
      allOf:
      - $ref: "#/components/schemas/Tenant"
      - properties:
          deleted:
            type: boolean
          logo:
            type: string
    ApiUser:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractUser"
      - properties:
          auths:
            type: array
            items:
              $ref: "#/components/schemas/ApiAuth"
    ArrayListTotal_AbstractBindingController.BindingDetail_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_AbstractBindingController.BindingDetail_"
      - $ref: "#/components/schemas/AbstractList_AbstractBindingController.BindingDetail_"
      - $ref: "#/components/schemas/AbstractCollection_AbstractBindingController.BindingDetail_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_ApiUser_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_ApiUser_"
      - $ref: "#/components/schemas/AbstractList_ApiUser_"
      - $ref: "#/components/schemas/AbstractCollection_ApiUser_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_AuditLogController.AuditLogWithUser_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_AuditLogController.AuditLogWithUser_"
      - $ref: "#/components/schemas/AbstractList_AuditLogController.AuditLogWithUser_"
      - $ref: "#/components/schemas/AbstractCollection_AuditLogController.AuditLogWithUser_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_BlueprintController.BlueprintItem_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_BlueprintController.BlueprintItem_"
      - $ref: "#/components/schemas/AbstractList_BlueprintController.BlueprintItem_"
      - $ref: "#/components/schemas/AbstractCollection_BlueprintController.BlueprintItem_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Blueprint_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_Blueprint_"
      - $ref: "#/components/schemas/AbstractList_Blueprint_"
      - $ref: "#/components/schemas/AbstractCollection_Blueprint_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_ClusterController.ApiServiceInstance_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_ClusterController.ApiServiceInstance_"
      - $ref: "#/components/schemas/AbstractList_ClusterController.ApiServiceInstance_"
      - $ref: "#/components/schemas/AbstractCollection_ClusterController.ApiServiceInstance_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Execution_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_Execution_"
      - $ref: "#/components/schemas/AbstractList_Execution_"
      - $ref: "#/components/schemas/AbstractCollection_Execution_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Flow_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_Flow_"
      - $ref: "#/components/schemas/AbstractList_Flow_"
      - $ref: "#/components/schemas/AbstractCollection_Flow_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Group_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_Group_"
      - $ref: "#/components/schemas/AbstractList_Group_"
      - $ref: "#/components/schemas/AbstractCollection_Group_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_LogEntry_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_LogEntry_"
      - $ref: "#/components/schemas/AbstractList_LogEntry_"
      - $ref: "#/components/schemas/AbstractCollection_LogEntry_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_MetricEntry_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_MetricEntry_"
      - $ref: "#/components/schemas/AbstractList_MetricEntry_"
      - $ref: "#/components/schemas/AbstractCollection_MetricEntry_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_NamespaceWithDisabled_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_NamespaceWithDisabled_"
      - $ref: "#/components/schemas/AbstractList_NamespaceWithDisabled_"
      - $ref: "#/components/schemas/AbstractCollection_NamespaceWithDisabled_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Role_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_Role_"
      - $ref: "#/components/schemas/AbstractList_Role_"
      - $ref: "#/components/schemas/AbstractCollection_Role_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_SearchResult_Flow__:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_SearchResult_Flow__"
      - $ref: "#/components/schemas/AbstractList_SearchResult_Flow__"
      - $ref: "#/components/schemas/AbstractCollection_SearchResult_Flow__"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_TaskRun_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_TaskRun_"
      - $ref: "#/components/schemas/AbstractList_TaskRun_"
      - $ref: "#/components/schemas/AbstractCollection_TaskRun_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Template_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_Template_"
      - $ref: "#/components/schemas/AbstractList_Template_"
      - $ref: "#/components/schemas/AbstractCollection_Template_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Tenant_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_Tenant_"
      - $ref: "#/components/schemas/AbstractList_Tenant_"
      - $ref: "#/components/schemas/AbstractCollection_Tenant_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_TriggerController.Triggers_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_TriggerController.Triggers_"
      - $ref: "#/components/schemas/AbstractList_TriggerController.Triggers_"
      - $ref: "#/components/schemas/AbstractCollection_TriggerController.Triggers_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayListTotal_Trigger_:
      required:
      - total
      type: object
      allOf:
      - $ref: "#/components/schemas/ArrayList_Trigger_"
      - $ref: "#/components/schemas/AbstractList_Trigger_"
      - $ref: "#/components/schemas/AbstractCollection_Trigger_"
      - properties:
          total:
            type: integer
            format: int64
    ArrayList_AbstractBindingController.BindingDetail_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_AbstractBindingController.BindingDetail_"
      - $ref: "#/components/schemas/AbstractCollection_AbstractBindingController.BindingDetail_"
      - properties:
          first:
            $ref: "#/components/schemas/AbstractBindingController.BindingDetail"
          last:
            $ref: "#/components/schemas/AbstractBindingController.BindingDetail"
          empty:
            type: boolean
    ArrayList_ApiUser_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_ApiUser_"
      - $ref: "#/components/schemas/AbstractCollection_ApiUser_"
      - properties:
          first:
            $ref: "#/components/schemas/ApiUser"
          last:
            $ref: "#/components/schemas/ApiUser"
          empty:
            type: boolean
    ArrayList_AuditLogController.AuditLogWithUser_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_AuditLogController.AuditLogWithUser_"
      - $ref: "#/components/schemas/AbstractCollection_AuditLogController.AuditLogWithUser_"
      - properties:
          first:
            $ref: "#/components/schemas/AuditLogController.AuditLogWithUser"
          last:
            $ref: "#/components/schemas/AuditLogController.AuditLogWithUser"
          empty:
            type: boolean
    ArrayList_BlueprintController.BlueprintItem_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_BlueprintController.BlueprintItem_"
      - $ref: "#/components/schemas/AbstractCollection_BlueprintController.BlueprintItem_"
      - properties:
          first:
            $ref: "#/components/schemas/BlueprintController.BlueprintItem"
          last:
            $ref: "#/components/schemas/BlueprintController.BlueprintItem"
          empty:
            type: boolean
    ArrayList_Blueprint_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_Blueprint_"
      - $ref: "#/components/schemas/AbstractCollection_Blueprint_"
      - properties:
          first:
            $ref: "#/components/schemas/Blueprint"
          last:
            $ref: "#/components/schemas/Blueprint"
          empty:
            type: boolean
    ArrayList_ClusterController.ApiServiceInstance_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_ClusterController.ApiServiceInstance_"
      - $ref: "#/components/schemas/AbstractCollection_ClusterController.ApiServiceInstance_"
      - properties:
          first:
            $ref: "#/components/schemas/ClusterController.ApiServiceInstance"
          last:
            $ref: "#/components/schemas/ClusterController.ApiServiceInstance"
          empty:
            type: boolean
    ArrayList_Execution_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_Execution_"
      - $ref: "#/components/schemas/AbstractCollection_Execution_"
      - properties:
          first:
            $ref: "#/components/schemas/Execution"
          last:
            $ref: "#/components/schemas/Execution"
          empty:
            type: boolean
    ArrayList_Flow_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_Flow_"
      - $ref: "#/components/schemas/AbstractCollection_Flow_"
      - properties:
          first:
            $ref: "#/components/schemas/Flow"
          last:
            $ref: "#/components/schemas/Flow"
          empty:
            type: boolean
    ArrayList_Group_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_Group_"
      - $ref: "#/components/schemas/AbstractCollection_Group_"
      - properties:
          first:
            $ref: "#/components/schemas/Group"
          last:
            $ref: "#/components/schemas/Group"
          empty:
            type: boolean
    ArrayList_LogEntry_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_LogEntry_"
      - $ref: "#/components/schemas/AbstractCollection_LogEntry_"
      - properties:
          first:
            $ref: "#/components/schemas/LogEntry"
          last:
            $ref: "#/components/schemas/LogEntry"
          empty:
            type: boolean
    ArrayList_MetricEntry_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_MetricEntry_"
      - $ref: "#/components/schemas/AbstractCollection_MetricEntry_"
      - properties:
          first:
            $ref: "#/components/schemas/MetricEntry"
          last:
            $ref: "#/components/schemas/MetricEntry"
          empty:
            type: boolean
    ArrayList_NamespaceWithDisabled_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_NamespaceWithDisabled_"
      - $ref: "#/components/schemas/AbstractCollection_NamespaceWithDisabled_"
      - properties:
          first:
            $ref: "#/components/schemas/NamespaceWithDisabled"
          last:
            $ref: "#/components/schemas/NamespaceWithDisabled"
          empty:
            type: boolean
    ArrayList_Role_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_Role_"
      - $ref: "#/components/schemas/AbstractCollection_Role_"
      - properties:
          first:
            $ref: "#/components/schemas/Role"
          last:
            $ref: "#/components/schemas/Role"
          empty:
            type: boolean
    ArrayList_SearchResult_Flow__:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_SearchResult_Flow__"
      - $ref: "#/components/schemas/AbstractCollection_SearchResult_Flow__"
      - properties:
          first:
            $ref: "#/components/schemas/SearchResult_Flow_"
          last:
            $ref: "#/components/schemas/SearchResult_Flow_"
          empty:
            type: boolean
    ArrayList_TaskRun_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_TaskRun_"
      - $ref: "#/components/schemas/AbstractCollection_TaskRun_"
      - properties:
          first:
            $ref: "#/components/schemas/TaskRun"
          last:
            $ref: "#/components/schemas/TaskRun"
          empty:
            type: boolean
    ArrayList_Template_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_Template_"
      - $ref: "#/components/schemas/AbstractCollection_Template_"
      - properties:
          first:
            $ref: "#/components/schemas/Template"
          last:
            $ref: "#/components/schemas/Template"
          empty:
            type: boolean
    ArrayList_Tenant_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_Tenant_"
      - $ref: "#/components/schemas/AbstractCollection_Tenant_"
      - properties:
          first:
            $ref: "#/components/schemas/Tenant"
          last:
            $ref: "#/components/schemas/Tenant"
          empty:
            type: boolean
    ArrayList_TriggerController.Triggers_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_TriggerController.Triggers_"
      - $ref: "#/components/schemas/AbstractCollection_TriggerController.Triggers_"
      - properties:
          first:
            $ref: "#/components/schemas/TriggerController.Triggers"
          last:
            $ref: "#/components/schemas/TriggerController.Triggers"
          empty:
            type: boolean
    ArrayList_Trigger_:
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractList_Trigger_"
      - $ref: "#/components/schemas/AbstractCollection_Trigger_"
      - properties:
          first:
            $ref: "#/components/schemas/Trigger"
          last:
            $ref: "#/components/schemas/Trigger"
          empty:
            type: boolean
    AttributeReference:
      type: object
      properties:
        fullAttributeName:
          type: string
        fullyQualifiedAttributeName:
          type: string
        attributeBase:
          type: string
        urn:
          type: string
        attributeName:
          type: string
        subAttributeName:
          type: string
    AuditLog:
      required:
      - appliedPatch
      - date
      - deleted
      - detail
      - id
      - ipAddress
      - revertPatch
      - type
      - userId
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/CrudEventType"
        detail:
          $ref: "#/components/schemas/AuditLogDetail"
        date:
          type: string
          format: date-time
        userId:
          type: string
        ipAddress:
          type: string
        deleted:
          type: boolean
        appliedPatch:
          type: array
          items:
            type: object
        revertPatch:
          type: array
          items:
            type: object
    AuditLogController.AuditLogDiff:
      required:
      - after
      - before
      type: object
      properties:
        before:
          type: string
        after:
          type: string
    AuditLogController.AuditLogWithUser:
      required:
      - auditLog
      - user
      type: object
      properties:
        auditLog:
          $ref: "#/components/schemas/AuditLog"
        user:
          $ref: "#/components/schemas/ApiUser"
    AuditLogController.FindRequest:
      required:
      - detail
      - permission
      - type
      type: object
      properties:
        permission:
          $ref: "#/components/schemas/Permission"
        type:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/CrudEventType"
        detail:
          type: object
          additionalProperties: true
    AuditLogDetail:
      required:
      - cls
      - permission
      - type
      type: object
      properties:
        type:
          type: string
        cls:
          type: string
        permission:
          $ref: "#/components/schemas/Permission"
        id:
          type: string
    AuthController.Auth:
      type: object
      properties:
        loginPassword:
          type: boolean
        mailsEnabled:
          type: boolean
        oauths:
          type: array
          items:
            type: string
    AuthController.ResetPasswordRequest:
      required:
      - password
      - token
      type: object
      properties:
        token:
          type: string
        password:
          type: string
    Backfill:
      title: A backfill configuration.
      required:
      - start
      type: object
      properties:
        start:
          title: The start date.
          type: string
          format: date-time
        end:
          title: The end date.
          type: string
          format: date-time
        currentDate:
          title: The current date of the backfill being done.
          type: string
          format: date-time
        paused:
          title: Whether the backfill is paused.
          type: boolean
        inputs:
          title: The inputs to pass to the backfilled executions.
          allOf:
          - type: object
            additionalProperties: true
          - {}
        labels:
          title: The labels to pass to the backfilled executions.
          type: array
          items:
            $ref: "#/components/schemas/Label"
        previousNextExecutionDate:
          title: The nextExecutionDate before the backfill was created.
          type: string
          format: date-time
    BaseResource_PatchRequest_:
      type: object
      properties:
        schemas:
          minItems: 1
          type: array
          items:
            type: string
    BaseResource_ScimResource_:
      type: object
      properties:
        schemas:
          minItems: 1
          type: array
          items:
            type: string
    BaseResource_SearchRequest_:
      type: object
      properties:
        schemas:
          minItems: 1
          type: array
          items:
            type: string
    Binding:
      required:
      - deleted
      - externalId
      - id
      - namespaceId
      - roleId
      - type
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/Binding.Type"
        externalId:
          type: string
        roleId:
          type: string
        namespaceId:
          type: string
        deleted:
          type: boolean
    Binding.Type:
      type: string
      enum:
      - USER
      - GROUP
    Blueprint:
      required:
      - deleted
      - description
      - id
      - includedTasks
      - publishedAt
      - tags
      - title
      type: object
      properties:
        id:
          type: string
        title:
          maxLength: 150
          minLength: 1
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        includedTasks:
          type: array
          items:
            type: string
        publishedAt:
          type: string
          format: date-time
        deleted:
          type: boolean
    BlueprintController.BlueprintItem:
      required:
      - description
      - id
      - includedTasks
      - publishedAt
      - tags
      - title
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        includedTasks:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        publishedAt:
          type: string
          format: date-time
    BlueprintController.BlueprintItemWithFlow:
      type: object
      allOf:
      - $ref: "#/components/schemas/BlueprintController.BlueprintItem"
      - properties:
          flow:
            type: string
    BlueprintController.BlueprintTagItem:
      required:
      - id
      - name
      - publishedAt
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        publishedAt:
          type: string
          format: date-time
    BlueprintWithFlow:
      required:
      - deleted
      - flow
      type: object
      allOf:
      - $ref: "#/components/schemas/Blueprint"
      - properties:
          deleted:
            type: boolean
          flow:
            minLength: 1
            type: string
    BulkErrorResponse:
      type: object
      properties:
        message:
          type: string
        invalids: {}
    BulkResponse:
      type: object
      properties:
        count:
          type: integer
          format: int32
    ClusterController.ApiActiveService:
      required:
      - total
      - type
      type: object
      properties:
        type:
          $ref: "#/components/schemas/Service.ServiceType"
        total:
          type: integer
          format: int64
    ClusterController.ApiActiveServiceList:
      required:
      - services
      - total
      type: object
      properties:
        total:
          type: integer
          format: int32
        services:
          type: array
          items:
            $ref: "#/components/schemas/ClusterController.ApiActiveService"
    ClusterController.ApiServerInstance:
      required:
      - hostname
      - id
      - type
      - version
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/ServerInstance.Type"
        version:
          type: string
        hostname:
          type: string
    ClusterController.ApiServiceInstance:
      required:
      - createdAt
      - id
      - server
      - state
      - type
      - updatedAt
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/Service.ServiceType"
        state:
          $ref: "#/components/schemas/Service.ServiceState"
        server:
          $ref: "#/components/schemas/ClusterController.ApiServerInstance"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Collection_Action_:
      type: object
      properties:
        empty:
          type: boolean
    Collection_Object_:
      type: object
      properties:
        empty:
          type: boolean
    Concurrency:
      required:
      - behavior
      - limit
      type: object
      properties:
        limit:
          minimum: 0
          exclusiveMinimum: true
          type: integer
          format: int32
        behavior:
          $ref: "#/components/schemas/Concurrency.Behavior"
    Concurrency.Behavior:
      type: string
      enum:
      - QUEUE
      - CANCEL
      - FAIL
    Condition:
      required:
      - type
      type: object
      properties:
        type:
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
    ConfigurationUsage:
      type: object
      properties:
        repositoryType:
          type: string
        queueType:
          type: string
        storageType:
          type: string
        secretType:
          type: string
        javaSecurityEnabled:
          type: boolean
    CreateApiTokenRequest:
      required:
      - description
      - extended
      - maxAge
      - name
      type: object
      properties:
        name:
          pattern: "^(?=.{1,63}$)[a-z0-9]+(?:-[a-z0-9]+)*$"
          type: string
        description:
          type: string
        maxAge:
          type: string
        extended:
          type: boolean
    CreateSecurityIntegrationRequest:
      required:
      - description
      - name
      - type
      type: object
      properties:
        name:
          pattern: "^(?=.{1,63}$)[a-z0-9]+(?:-[a-z0-9]+)*$"
          type: string
          description: The name of security integration.
        description:
          type: string
          description: The description of security integration.
        type:
          $ref: "#/components/schemas/SecurityIntegration.Type"
      description: Create SecurityIntegration Request
    CrudEventType:
      type: string
      enum:
      - READ
      - CREATE
      - UPDATE
      - DELETE
      - LOGIN
      - LOGOUT
    CurrentUserController.Me:
      required:
      - roles
      - tenants
      - user
      type: object
      properties:
        user:
          $ref: "#/components/schemas/ApiUser"
        roles:
          type: array
          items:
            $ref: "#/components/schemas/AclService.NamespaceRole"
        tenants:
          type: array
          items:
            $ref: "#/components/schemas/ApiTenant"
    CurrentUserController.UserDetailsRequest:
      required:
      - email
      - firstName
      - lastName
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    DailyExecutionStatistics:
      required:
      - duration
      - executionCounts
      - groupBy
      - startDate
      type: object
      properties:
        startDate:
          type: string
          format: date-time
        duration:
          $ref: "#/components/schemas/DailyExecutionStatistics.Duration"
        executionCounts:
          properties:
            CREATED:
              type: integer
              format: int64
            RUNNING:
              type: integer
              format: int64
            PAUSED:
              type: integer
              format: int64
            RESTARTED:
              type: integer
              format: int64
            KILLING:
              type: integer
              format: int64
            SUCCESS:
              type: integer
              format: int64
            WARNING:
              type: integer
              format: int64
            FAILED:
              type: integer
              format: int64
            KILLED:
              type: integer
              format: int64
            CANCELLED:
              type: integer
              format: int64
            QUEUED:
              type: integer
              format: int64
            RETRYING:
              type: integer
              format: int64
            RETRIED:
              type: integer
              format: int64
        groupBy:
          type: string
    DailyExecutionStatistics.Duration:
      required:
      - avg
      - count
      - max
      - min
      - sum
      type: object
      properties:
        min:
          type: string
        avg:
          type: string
        max:
          type: string
        sum:
          type: string
        count:
          type: integer
          format: int64
    DependsOn:
      type: object
      properties:
        inputs:
          type: array
          nullable: true
          items:
            type: string
        condition:
          type: string
          nullable: true
    DocumentationWithSchema:
      type: object
      properties:
        markdown:
          type: string
        schema:
          $ref: "#/components/schemas/Schema_1"
    Email:
      type: object
      properties:
        type:
          type: string
        value:
          type: string
        primary:
          type: boolean
      description: Scim core schema.
    Event_Execution_:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Execution"
        id:
          type: string
        name:
          type: string
        comment:
          type: string
        retry:
          type: string
    Event_LogEntry_:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/LogEntry"
        id:
          type: string
        name:
          type: string
        comment:
          type: string
        retry:
          type: string
    ExecutableTask.SubflowId:
      required:
      - flowId
      - namespace
      - revision
      type: object
      properties:
        namespace:
          type: string
        flowId:
          type: string
        revision:
          type: integer
          format: int32
          nullable: true
    Execution:
      required:
      - deleted
      - flowId
      - flowRevision
      - id
      - inputs
      - labels
      - metadata
      - namespace
      - originalId
      - outputs
      - parentId
      - scheduleDate
      - state
      - taskRunList
      - trigger
      - variables
      type: object
      properties:
        id:
          type: string
        namespace:
          type: string
        flowId:
          type: string
        flowRevision:
          type: integer
          format: int32
        taskRunList:
          type: array
          items:
            $ref: "#/components/schemas/TaskRun"
        inputs:
          type: object
          additionalProperties: true
        outputs:
          type: object
          additionalProperties: true
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
        variables:
          type: object
          additionalProperties: true
        state:
          $ref: "#/components/schemas/State"
        parentId:
          type: string
        originalId:
          type: string
        trigger:
          $ref: "#/components/schemas/ExecutionTrigger"
        deleted:
          type: boolean
        metadata:
          $ref: "#/components/schemas/ExecutionMetadata"
        scheduleDate:
          type: string
          format: date-time
          nullable: true
    ExecutionController.ApiValidateExecutionInputsResponse:
      required:
      - id
      - inputs
      - namespace
      type: object
      properties:
        id:
          type: string
        namespace:
          type: string
        inputs:
          type: array
          items:
            $ref: "#/components/schemas/ExecutionController.ApiValidateExecutionInputsResponse.ApiInputAndValue"
    ExecutionController.ApiValidateExecutionInputsResponse.ApiInputAndValue:
      required:
      - enabled
      - errors
      - input
      - value
      type: object
      properties:
        input:
          $ref: "#/components/schemas/Input_Object_"
        value: {}
        enabled:
          type: boolean
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ExecutionController.ApiValidateExecutionInputsResponse.ApiInputError"
    ExecutionController.ApiValidateExecutionInputsResponse.ApiInputError:
      required:
      - message
      type: object
      properties:
        message:
          type: string
    ExecutionController.EvalResult:
      type: object
      properties:
        result:
          type: string
        error:
          type: string
        stackTrace:
          type: string
    ExecutionController.ExecutionResponse:
      required:
      - deleted
      - url
      type: object
      allOf:
      - $ref: "#/components/schemas/Execution"
      - properties:
          deleted:
            type: boolean
          url:
            type: string
            format: uri
    ExecutionController.SetLabelsByIdsRequest:
      required:
      - executionLabels
      - executionsId
      type: object
      properties:
        executionsId:
          type: array
          items:
            type: string
        executionLabels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
    ExecutionController.StateRequest:
      required:
      - state
      - taskRunId
      type: object
      properties:
        taskRunId:
          type: string
        state:
          $ref: "#/components/schemas/State.Type"
    ExecutionCountStatistics:
      required:
      - counts
      - total
      type: object
      properties:
        counts:
          properties:
            CREATED:
              type: integer
              format: int64
            RUNNING:
              type: integer
              format: int64
            PAUSED:
              type: integer
              format: int64
            RESTARTED:
              type: integer
              format: int64
            KILLING:
              type: integer
              format: int64
            SUCCESS:
              type: integer
              format: int64
            WARNING:
              type: integer
              format: int64
            FAILED:
              type: integer
              format: int64
            KILLED:
              type: integer
              format: int64
            CANCELLED:
              type: integer
              format: int64
            QUEUED:
              type: integer
              format: int64
            RETRYING:
              type: integer
              format: int64
            RETRIED:
              type: integer
              format: int64
        total:
          type: integer
          format: int64
    ExecutionMetadata:
      required:
      - attemptNumber
      - originalCreatedDate
      type: object
      properties:
        attemptNumber:
          type: integer
          format: int32
        originalCreatedDate:
          type: string
          format: date-time
    ExecutionRepositoryInterface.ChildFilter:
      type: string
      enum:
      - CHILD
      - MAIN
    ExecutionRepositoryInterface.FlowFilter:
      required:
      - id
      - namespace
      type: object
      properties:
        namespace:
          type: string
        id:
          type: string
    ExecutionTrigger:
      required:
      - id
      - logFile
      - type
      - variables
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        variables:
          type: object
          additionalProperties: true
        logFile:
          type: string
          format: uri
    ExecutionUsage:
      type: object
      properties:
        dailyExecutionsCount:
          type: array
          items:
            $ref: "#/components/schemas/DailyExecutionStatistics"
        dailyTaskRunsCount:
          type: array
          items:
            $ref: "#/components/schemas/DailyExecutionStatistics"
    FileAttributes:
      type: object
      properties:
        fileName:
          type: string
        lastModifiedTime:
          type: integer
          format: int64
        creationTime:
          type: integer
          format: int64
        type:
          $ref: "#/components/schemas/FileAttributes.FileType"
        size:
          type: integer
          format: int64
        metadata:
          type: object
          additionalProperties:
            type: string
    FileAttributes.FileType:
      type: string
      enum:
      - File
      - Directory
    FileMetas:
      required:
      - size
      type: object
      properties:
        size:
          type: integer
          format: int64
    Filter:
      required:
      - filter
      type: object
      properties:
        filter:
          type: string
        expression:
          $ref: "#/components/schemas/FilterExpression"
    FilterExpression:
      type: object
    Flow:
      required:
      - deleted
      - tasks
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractFlow"
      - properties:
          deleted:
            type: boolean
          taskDefaults:
            type: array
            deprecated: true
            items:
              $ref: "#/components/schemas/PluginDefault"
          description:
            type: string
          labels:
            type: object
            allOf:
            - oneOf:
              - $ref: "#/components/schemas/List_Object_"
              - $ref: "#/components/schemas/Map_Object.Object_"
            oneOf:
            - $ref: "#/components/schemas/List_Object_"
            - $ref: "#/components/schemas/Map_Object.Object_"
          variables:
            type: object
            additionalProperties: true
          tasks:
            minItems: 1
            type: array
            items:
              $ref: "#/components/schemas/Task"
          errors:
            type: array
            items:
              $ref: "#/components/schemas/Task"
          listeners:
            type: array
            deprecated: true
            items:
              $ref: "#/components/schemas/Listener"
          triggers:
            type: array
            items:
              $ref: "#/components/schemas/AbstractTrigger"
          pluginDefaults:
            type: array
            items:
              $ref: "#/components/schemas/PluginDefault"
          concurrency:
            $ref: "#/components/schemas/Concurrency"
          outputs:
            title: Output values available and exposes to other flows.
            type: array
            description: Output values make information about the execution of your
              Flow available and expose for other Kestra flows to use. Output values
              are similar to return values in programming languages.
            items:
              $ref: "#/components/schemas/Output"
          retry:
            $ref: "#/components/schemas/AbstractRetry"
    FlowController.TaskValidationType:
      type: string
      enum:
      - TASKS
      - TRIGGERS
    FlowForExecution:
      required:
      - deleted
      - tasks
      type: object
      allOf:
      - $ref: "#/components/schemas/AbstractFlow"
      - properties:
          deleted:
            type: boolean
          tasks:
            minItems: 1
            type: array
            items:
              $ref: "#/components/schemas/TaskForExecution"
          triggers:
            type: array
            items:
              $ref: "#/components/schemas/AbstractTriggerForExecution"
    FlowGraph:
      required:
      - clusters
      - edges
      - flowables
      - nodes
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/AbstractGraph"
        edges:
          type: array
          items:
            $ref: "#/components/schemas/FlowGraph.Edge"
        clusters:
          type: array
          items:
            $ref: "#/components/schemas/FlowGraph.Cluster"
        flowables:
          type: array
          items:
            type: string
    FlowGraph.Cluster:
      required:
      - cluster
      - end
      - nodes
      - parents
      - start
      type: object
      properties:
        cluster:
          $ref: "#/components/schemas/AbstractGraph"
        nodes:
          type: array
          items:
            type: string
        parents:
          type: array
          items:
            type: string
        start:
          type: string
        end:
          type: string
    FlowGraph.Edge:
      required:
      - relation
      - source
      - target
      type: object
      properties:
        source:
          type: string
        target:
          type: string
        relation:
          $ref: "#/components/schemas/Relation"
    FlowNode:
      required:
      - id
      - namespace
      - uid
      type: object
      properties:
        uid:
          type: string
        namespace:
          type: string
        id:
          type: string
    FlowRelation:
      type: string
      enum:
      - FLOW_TASK
      - FLOW_TRIGGER
    FlowScope:
      type: string
      enum:
      - USER
      - SYSTEM
    FlowTopologyGraph:
      required:
      - edges
      - nodes
      type: object
      properties:
        nodes:
          type: array
          items:
            $ref: "#/components/schemas/FlowNode"
        edges:
          type: array
          items:
            $ref: "#/components/schemas/FlowTopologyGraph.Edge"
    FlowTopologyGraph.Edge:
      required:
      - relation
      - source
      - target
      type: object
      properties:
        source:
          type: string
        target:
          type: string
        relation:
          $ref: "#/components/schemas/FlowRelation"
    FlowUsage:
      type: object
      properties:
        count:
          type: integer
          format: int32
        namespacesCount:
          type: integer
          format: int64
        taskTypeCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
        triggerTypeCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
        taskRunnerTypeCount:
          type: object
          additionalProperties:
            type: integer
            format: int64
    FlowWithSource:
      required:
      - deleted
      type: object
      allOf:
      - $ref: "#/components/schemas/Flow"
      - $ref: "#/components/schemas/AbstractFlow"
      - properties:
          deleted:
            type: boolean
          source:
            type: string
    Group:
      required:
      - deleted
      - description
      - id
      - name
      - provider
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        deleted:
          type: boolean
        provider:
          $ref: "#/components/schemas/IdentityProvider"
    GroupMembership:
      type: object
      properties:
        value:
          type: string
        ref:
          type: string
        display:
          type: string
        type:
          $ref: "#/components/schemas/GroupMembership.Type"
    GroupMembership.Type:
      type: string
      enum:
      - USER
      - GROUP
    GroupUsage:
      type: object
      properties:
        count:
          type: integer
          format: int64
    HostUsage:
      type: object
      properties:
        uuid:
          type: string
        hardware:
          $ref: "#/components/schemas/HostUsage.Hardware"
        os:
          $ref: "#/components/schemas/HostUsage.Os"
        jvm:
          $ref: "#/components/schemas/HostUsage.Jvm"
    HostUsage.Hardware:
      type: object
      properties:
        logicalProcessorCount:
          type: integer
          format: int32
        physicalProcessorCount:
          type: integer
          format: int64
        maxFreq:
          type: integer
          format: int64
        memory:
          type: integer
          format: int64
        knownVmMacAddr:
          type: boolean
        knownDockerMacAddr:
          type: boolean
    HostUsage.Jvm:
      type: object
      properties:
        name:
          type: string
        vendor:
          type: string
        version:
          type: string
    HostUsage.Os:
      type: object
      properties:
        family:
          type: string
        version:
          type: string
        codeName:
          type: string
        buildNumber:
          type: string
    IdWithNamespace:
      type: object
      properties:
        namespace:
          type: string
        id:
          type: string
    IdentityProvider:
      required:
      - attributes
      - externalId
      - securityIntegrationId
      - securityIntegrationName
      type: object
      properties:
        attributes:
          type: object
          additionalProperties: true
        externalId:
          type: string
        securityIntegrationId:
          type: string
        securityIntegrationName:
          type: string
    InputType:
      required:
      - cls
      - type
      type: object
      properties:
        type:
          type: string
        cls:
          type: string
    Input_Object_:
      required:
      - id
      - type
      type: object
      properties:
        name:
          type: string
          deprecated: true
        id:
          title: The ID of the input.
          minLength: 1
          pattern: "^[a-zA-Z0-9][.a-zA-Z0-9_-]*"
          type: string
        type:
          title: The type of the input.
          allOf:
          - $ref: "#/components/schemas/Type"
        description:
          title: The description of the input.
          type: string
        dependsOn:
          title: The dependencies of the input.
          allOf:
          - $ref: "#/components/schemas/DependsOn"
        required:
          type: boolean
        defaults:
          title: The default value to use if no value is specified.
        displayName:
          title: The display name of the input.
          maxLength: 64
          type: string
    KVController.TypedValue:
      required:
      - type
      - value
      type: object
      properties:
        type:
          $ref: "#/components/schemas/KVType"
        value: {}
    KVEntry:
      required:
      - creationDate
      - expirationDate
      - key
      - updateDate
      type: object
      properties:
        key:
          type: string
        creationDate:
          type: string
          format: date-time
        updateDate:
          type: string
          format: date-time
        expirationDate:
          type: string
          format: date-time
    KVType:
      type: string
      enum:
      - STRING
      - NUMBER
      - BOOLEAN
      - DATETIME
      - DATE
      - DURATION
      - JSON
    Label:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    Level:
      type: string
      enum:
      - ERROR
      - WARN
      - INFO
      - DEBUG
      - TRACE
    List_Action_:
      type: object
      allOf:
      - $ref: "#/components/schemas/SequencedCollection_Action_"
      - $ref: "#/components/schemas/Collection_Action_"
      - properties:
          empty:
            type: boolean
          first:
            $ref: "#/components/schemas/Action"
          last:
            $ref: "#/components/schemas/Action"
    List_Object_:
      type: object
      allOf:
      - $ref: "#/components/schemas/SequencedCollection_Object_"
      - $ref: "#/components/schemas/Collection_Object_"
      - properties:
          empty:
            type: boolean
          first: {}
          last: {}
    Listener:
      required:
      - conditions
      - description
      - tasks
      type: object
      properties:
        description:
          type: string
        conditions:
          type: array
          items:
            $ref: "#/components/schemas/Condition"
        tasks:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Task"
    LogEntry:
      required:
      - attemptNumber
      - deleted
      - executionId
      - flowId
      - level
      - message
      - namespace
      - taskId
      - taskRunId
      - thread
      - timestamp
      - triggerId
      type: object
      properties:
        namespace:
          type: string
        flowId:
          type: string
        taskId:
          type: string
          nullable: true
        executionId:
          type: string
          nullable: true
        taskRunId:
          type: string
          nullable: true
        attemptNumber:
          type: integer
          format: int32
          nullable: true
        triggerId:
          type: string
          nullable: true
        timestamp:
          type: string
          format: date-time
        level:
          $ref: "#/components/schemas/Level"
        thread:
          type: string
        message:
          type: string
        deleted:
          type: boolean
    LogStatistics:
      required:
      - counts
      - groupBy
      - timestamp
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        counts:
          properties:
            ERROR:
              type: integer
              format: int64
            WARN:
              type: integer
              format: int64
            INFO:
              type: integer
              format: int64
            DEBUG:
              type: integer
              format: int64
            TRACE:
              type: integer
              format: int64
        groupBy:
          type: string
    Map_Object.Object_:
      type: object
      properties:
        empty:
          type: boolean
    Meta:
      type: object
      properties:
        resourceType:
          minLength: 1
          type: string
        created:
          type: string
          format: date-time
        lastModified:
          type: string
          format: date-time
        location:
          type: string
        version:
          type: string
    Metric:
      required:
      - baseUnit
      - description
      - name
      - tags
      - type
      - value
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        description:
          type: string
        baseUnit:
          type: string
        tags:
          type: array
          items:
            $ref: "#/components/schemas/Metric.Tag"
        value: {}
    Metric.Tag:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    MetricAggregation:
      required:
      - date
      - name
      - value
      type: object
      properties:
        name:
          type: string
        value:
          type: number
          format: double
        date:
          type: string
          format: date-time
    MetricAggregations:
      required:
      - aggregations
      - groupBy
      type: object
      properties:
        groupBy:
          type: string
        aggregations:
          type: array
          items:
            $ref: "#/components/schemas/MetricAggregation"
    MetricEntry:
      required:
      - deleted
      - executionId
      - flowId
      - name
      - namespace
      - tags
      - taskId
      - taskRunId
      - timestamp
      - type
      - value
      type: object
      properties:
        namespace:
          type: string
        flowId:
          type: string
        taskId:
          type: string
          nullable: true
        executionId:
          type: string
          nullable: true
        taskRunId:
          type: string
          nullable: true
        type:
          type: string
        name:
          type: string
        value:
          type: number
          format: double
        timestamp:
          type: string
          format: date-time
        tags:
          type: object
          additionalProperties:
            type: string
          nullable: true
        deleted:
          type: boolean
    MiscController.BasicAuthCredentials:
      required:
      - password
      - uid
      - username
      type: object
      properties:
        uid:
          type: string
        username:
          type: string
        password:
          type: string
    MiscController.Configuration:
      type: object
      properties:
        uuid:
          type: string
        version:
          type: string
        commitId:
          type: string
        commitDate:
          type: string
          format: date-time
        isTaskRunEnabled:
          type: boolean
        isAnonymousUsageEnabled:
          type: boolean
        isTemplateEnabled:
          type: boolean
        environment:
          $ref: "#/components/schemas/MiscController.Environment"
        preview:
          $ref: "#/components/schemas/MiscController.Preview"
        isBasicAuthEnabled:
          type: boolean
    MiscController.ConfigurationEe:
      type: object
      allOf:
      - $ref: "#/components/schemas/MiscController.Configuration"
      - properties:
          tenants:
            $ref: "#/components/schemas/TenantConfiguration"
          secretsEnabled:
            type: boolean
    MiscController.Environment:
      required:
      - color
      - name
      type: object
      properties:
        name:
          type: string
        color:
          type: string
    MiscController.LicenseInfo:
      required:
      - expired
      - expiry
      - type
      type: object
      properties:
        type:
          type: string
        expiry:
          type: string
          format: date-time
        expired:
          type: boolean
    MiscController.Preview:
      required:
      - initial
      - max
      type: object
      properties:
        initial:
          type: integer
          format: int32
        max:
          type: integer
          format: int32
    Name:
      type: object
      properties:
        familyName:
          type: string
        givenName:
          type: string
      description: Scim core schema.
    Namespace:
      required:
      - allowedNamespaces
      - deleted
      - description
      - id
      - pluginDefaults
      - variables
      - workerGroup
      type: object
      allOf:
      - $ref: "#/components/schemas/Namespace_1"
      - properties:
          id:
            pattern: "^[a-z0-9][a-z0-9._-]*"
            type: string
          deleted:
            type: boolean
          allowedTriggers:
            type: array
            deprecated: true
            items:
              $ref: "#/components/schemas/Namespace.AllowedTrigger"
          description:
            type: string
          variables:
            type: object
            additionalProperties: true
          pluginDefaults:
            type: array
            items:
              $ref: "#/components/schemas/PluginDefault"
          allowedNamespaces:
            type: array
            items:
              $ref: "#/components/schemas/Namespace.AllowedNamespace"
          workerGroup:
            $ref: "#/components/schemas/WorkerGroup"
    Namespace.AllowedNamespace:
      required:
      - namespace
      type: object
      properties:
        namespace:
          type: string
    Namespace.AllowedTrigger:
      required:
      - flowId
      - namespace
      type: object
      properties:
        namespace:
          type: string
        flowId:
          type: string
    NamespaceUsage:
      type: object
      properties:
        count:
          type: integer
          format: int64
    NamespaceWithDisabled:
      required:
      - deleted
      - disabled
      - id
      type: object
      allOf:
      - $ref: "#/components/schemas/Namespace"
      - $ref: "#/components/schemas/Namespace_3"
      - properties:
          id:
            pattern: "^[a-z0-9][a-z0-9._-]*"
            type: string
          deleted:
            type: boolean
          description:
            type: string
          variables:
            type: object
            additionalProperties: true
          pluginDefaults:
            type: array
            items:
              $ref: "#/components/schemas/PluginDefault"
          allowedNamespaces:
            type: array
            items:
              $ref: "#/components/schemas/Namespace.AllowedNamespace"
          workerGroup:
            $ref: "#/components/schemas/WorkerGroup"
          disabled:
            type: boolean
    Output:
      required:
      - id
      - type
      - value
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][.a-zA-Z0-9_-]*"
          type: string
        description:
          type: string
        value: {}
        type:
          $ref: "#/components/schemas/Type"
    PageRequest:
      type: object
      properties:
        startIndex:
          type: integer
          format: int32
        count:
          type: integer
          format: int32
    PagedResults_AbstractBindingController.BindingDetail_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_AbstractBindingController.BindingDetail_"
        total:
          type: integer
          format: int64
    PagedResults_ApiUser_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_ApiUser_"
        total:
          type: integer
          format: int64
    PagedResults_AuditLogController.AuditLogWithUser_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_AuditLogController.AuditLogWithUser_"
        total:
          type: integer
          format: int64
    PagedResults_BlueprintController.BlueprintItem_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_BlueprintController.BlueprintItem_"
        total:
          type: integer
          format: int64
    PagedResults_Blueprint_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_Blueprint_"
        total:
          type: integer
          format: int64
    PagedResults_ClusterController.ApiServiceInstance_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_ClusterController.ApiServiceInstance_"
        total:
          type: integer
          format: int64
    PagedResults_Execution_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_Execution_"
        total:
          type: integer
          format: int64
    PagedResults_Flow_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_Flow_"
        total:
          type: integer
          format: int64
    PagedResults_Group_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_Group_"
        total:
          type: integer
          format: int64
    PagedResults_LogEntry_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_LogEntry_"
        total:
          type: integer
          format: int64
    PagedResults_MetricEntry_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_MetricEntry_"
        total:
          type: integer
          format: int64
    PagedResults_NamespaceWithDisabled_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_NamespaceWithDisabled_"
        total:
          type: integer
          format: int64
    PagedResults_Role_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_Role_"
        total:
          type: integer
          format: int64
    PagedResults_SearchResult_Flow__:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_SearchResult_Flow__"
        total:
          type: integer
          format: int64
    PagedResults_TaskRun_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_TaskRun_"
        total:
          type: integer
          format: int64
    PagedResults_Template_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_Template_"
        total:
          type: integer
          format: int64
    PagedResults_Tenant_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_Tenant_"
        total:
          type: integer
          format: int64
    PagedResults_TriggerController.Triggers_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_TriggerController.Triggers_"
        total:
          type: integer
          format: int64
    PagedResults_Trigger_:
      required:
      - results
      - total
      type: object
      properties:
        results:
          $ref: "#/components/schemas/ArrayListTotal_Trigger_"
        total:
          type: integer
          format: int64
    PatchOperation:
      type: object
      properties:
        operation:
          $ref: "#/components/schemas/PatchOperation.Type"
        path:
          $ref: "#/components/schemas/PatchOperationPath"
        value: {}
    PatchOperation.Type:
      type: string
      enum:
      - ADD
      - REMOVE
      - REPLACE
    PatchOperationPath:
      required:
      - valuePathExpression
      type: object
      properties:
        valuePathExpression:
          $ref: "#/components/schemas/ValuePathExpression"
    PatchRequest:
      type: object
      allOf:
      - $ref: "#/components/schemas/BaseResource_PatchRequest_"
      - properties:
          patchOperationList:
            type: array
            items:
              $ref: "#/components/schemas/PatchOperation"
    Permission:
      type: string
      enum:
      - FLOW
      - BLUEPRINT
      - TEMPLATE
      - NAMESPACE
      - EXECUTION
      - USER
      - GROUP
      - ROLE
      - BINDING
      - AUDITLOG
      - SECRET
      - KVSTORE
      - IMPERSONATE
      - SETTING
      - INFRASTRUCTURE
      - TENANT
    Plugin:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
        license:
          type: string
        longDescription:
          type: string
        group:
          type: string
        version:
          type: string
        manifest:
          type: object
          additionalProperties:
            type: string
        tasks:
          type: array
          items:
            type: string
        triggers:
          type: array
          items:
            type: string
        conditions:
          type: array
          items:
            type: string
        controllers:
          type: array
          items:
            type: string
        storages:
          type: array
          items:
            type: string
        secrets:
          type: array
          items:
            type: string
        taskRunners:
          type: array
          items:
            type: string
        guides:
          type: array
          items:
            type: string
        aliases:
          type: array
          items:
            type: string
        categories:
          type: array
          items:
            $ref: "#/components/schemas/PluginSubGroup.PluginCategory"
        subGroup:
          type: string
    PluginDefault:
      required:
      - forced
      - type
      - values
      type: object
      properties:
        type:
          type: string
        forced:
          type: boolean
        values:
          type: object
          additionalProperties: true
    PluginIcon:
      type: object
      properties:
        name:
          type: string
        icon:
          type: string
        flowable:
          type: boolean
    PluginSubGroup.PluginCategory:
      type: string
      enum:
      - DATABASE
      - MESSAGING
      - SCRIPT
      - TRANSFORMATION
      - BATCH
      - ALERTING
      - CLOUD
      - STORAGE
      - OTHER
      - TOOL
      - AI
      - CORE
      - INGESTION
      - BI
    PluginUsage:
      type: object
      properties:
        manifest:
          type: object
          additionalProperties:
            type: string
    Relation:
      required:
      - relationType
      - value
      type: object
      properties:
        relationType:
          $ref: "#/components/schemas/RelationType"
        value:
          type: string
    RelationType:
      type: string
      enum:
      - SEQUENTIAL
      - CHOICE
      - ERROR
      - PARALLEL
      - DYNAMIC
    ResourceType:
      type: object
      allOf:
      - $ref: "#/components/schemas/ScimResourceWithOptionalId"
      - $ref: "#/components/schemas/ScimResource"
      - $ref: "#/components/schemas/BaseResource_ScimResource_"
      - properties:
          id:
            type: string
          name:
            minLength: 1
            type: string
          description:
            type: string
          endpoint:
            minLength: 1
            type: string
          schemaUrn:
            minLength: 1
            type: string
          schemaExtensions:
            type: array
            items:
              $ref: "#/components/schemas/ResourceType.SchemaExtensionConfiguration"
    ResourceType.SchemaExtensionConfiguration:
      type: object
      properties:
        schemaUrn:
          minLength: 1
          type: string
        required:
          type: boolean
    Role:
      required:
      - deleted
      - description
      - id
      - isDefault
      - isManaged
      - name
      - permissions
      type: object
      properties:
        isManaged:
          type: boolean
        id:
          type: string
        name:
          type: string
        description:
          type: string
        permissions:
          properties:
            FLOW:
              $ref: "#/components/schemas/List_Action_"
            BLUEPRINT:
              $ref: "#/components/schemas/List_Action_"
            TEMPLATE:
              $ref: "#/components/schemas/List_Action_"
            NAMESPACE:
              $ref: "#/components/schemas/List_Action_"
            EXECUTION:
              $ref: "#/components/schemas/List_Action_"
            USER:
              $ref: "#/components/schemas/List_Action_"
            GROUP:
              $ref: "#/components/schemas/List_Action_"
            ROLE:
              $ref: "#/components/schemas/List_Action_"
            BINDING:
              $ref: "#/components/schemas/List_Action_"
            AUDITLOG:
              $ref: "#/components/schemas/List_Action_"
            SECRET:
              $ref: "#/components/schemas/List_Action_"
            KVSTORE:
              $ref: "#/components/schemas/List_Action_"
            IMPERSONATE:
              $ref: "#/components/schemas/List_Action_"
            SETTING:
              $ref: "#/components/schemas/List_Action_"
            INFRASTRUCTURE:
              $ref: "#/components/schemas/List_Action_"
            TENANT:
              $ref: "#/components/schemas/List_Action_"
        isDefault:
          type: boolean
        deleted:
          type: boolean
    RoleUsage:
      type: object
      properties:
        count:
          type: integer
          format: int64
    Schema:
      required:
      - id
      type: object
      properties:
        attributes:
          maxItems: 65535
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Schema.Attribute"
        id:
          maxLength: 65535
          minLength: 1
          type: string
        name:
          type: string
        description:
          type: string
        meta:
          $ref: "#/components/schemas/Meta"
    Schema.Attribute:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/Schema.Attribute"
        urn:
          type: string
        name:
          pattern: "\\p{Alpha}(-|_|\\p{Alnum})*"
          type: string
        type:
          $ref: "#/components/schemas/Schema.Attribute.Type"
        subAttributes:
          type: array
          items:
            $ref: "#/components/schemas/Schema.Attribute"
        multiValued:
          type: boolean
        description:
          type: string
        required:
          type: boolean
        canonicalValues:
          type: array
          items:
            type: string
        caseExact:
          type: boolean
        mutability:
          $ref: "#/components/schemas/Schema.Attribute.Mutability"
        returned:
          $ref: "#/components/schemas/Schema.Attribute.Returned"
        uniqueness:
          $ref: "#/components/schemas/Schema.Attribute.Uniqueness"
        referenceTypes:
          type: array
          items:
            type: string
        accessor:
          $ref: "#/components/schemas/Schema.AttributeAccessor"
        scimResourceIdReference:
          type: boolean
    Schema.Attribute.Mutability:
      type: string
      enum:
      - IMMUTABLE
      - READ_ONLY
      - READ_WRITE
      - WRITE_ONLY
    Schema.Attribute.Returned:
      type: string
      enum:
      - ALWAYS
      - DEFAULT
      - NEVER
      - REQUEST
    Schema.Attribute.Type:
      type: string
      enum:
      - BINARY
      - BOOLEAN
      - COMPLEX
      - DATE_TIME
      - DECIMAL
      - INTEGER
      - REFERENCE
      - STRING
    Schema.Attribute.Uniqueness:
      type: string
      enum:
      - GLOBAL
      - NONE
      - SERVER
    Schema.AttributeAccessor:
      type: object
    SchemaType:
      type: string
      enum:
      - flow
      - template
      - task
      - trigger
      - plugindefault
    Schema_1:
      type: object
      properties:
        properties:
          type: object
          additionalProperties: true
        outputs:
          type: object
          additionalProperties: true
        definitions:
          type: object
          additionalProperties: true
    ScimExtension:
      type: object
      properties:
        urn:
          type: string
    ScimGroup:
      type: object
      allOf:
      - $ref: "#/components/schemas/ScimResource"
      - $ref: "#/components/schemas/BaseResource_ScimResource_"
      - properties:
          displayName:
            type: string
          members:
            type: array
            items:
              $ref: "#/components/schemas/GroupMembership"
    ScimResource:
      required:
      - meta
      - resourceType
      type: object
      allOf:
      - $ref: "#/components/schemas/BaseResource_ScimResource_"
      - properties:
          baseUrn:
            type: string
          extensions:
            type: object
            additionalProperties:
              $ref: "#/components/schemas/ScimExtension"
          meta:
            $ref: "#/components/schemas/Meta"
          id:
            minLength: 1
            type: string
          externalId:
            type: string
          resourceType:
            type: string
    ScimResourceWithOptionalId:
      type: object
      allOf:
      - $ref: "#/components/schemas/ScimResource"
      - $ref: "#/components/schemas/BaseResource_ScimResource_"
      - properties:
          id:
            type: string
    ScimUser:
      type: object
      description: Scim core schema.
      allOf:
      - $ref: "#/components/schemas/ScimResource"
      - $ref: "#/components/schemas/BaseResource_ScimResource_"
      - properties:
          primaryEmailAddress:
            nullable: true
            allOf:
            - $ref: "#/components/schemas/Email"
          active:
            type: boolean
          emails:
            type: array
            items:
              $ref: "#/components/schemas/Email"
          userName:
            type: string
          name:
            $ref: "#/components/schemas/Name"
          groups:
            type: array
            items:
              $ref: "#/components/schemas/UserGroup"
    SearchRequest:
      type: object
      allOf:
      - $ref: "#/components/schemas/BaseResource_SearchRequest_"
      - properties:
          pageRequest:
            $ref: "#/components/schemas/PageRequest"
          sortRequest:
            $ref: "#/components/schemas/SortRequest"
          attributes:
            type: array
            items:
              $ref: "#/components/schemas/AttributeReference"
          excludedAttributes:
            type: array
            items:
              $ref: "#/components/schemas/AttributeReference"
          filter:
            $ref: "#/components/schemas/Filter"
          sortBy:
            $ref: "#/components/schemas/AttributeReference"
          sortOrder:
            $ref: "#/components/schemas/SortOrder"
          startIndex:
            type: integer
            format: int32
          count:
            type: integer
            format: int32
    SearchResult_Flow_:
      required:
      - fragments
      - model
      type: object
      properties:
        model:
          $ref: "#/components/schemas/Flow"
        fragments:
          type: array
          items:
            type: string
    SecurityIntegration.Type:
      type: string
      enum:
      - SCIM
    SequencedCollection_Action_:
      type: object
      allOf:
      - $ref: "#/components/schemas/Collection_Action_"
      - properties:
          first:
            $ref: "#/components/schemas/Action"
          last:
            $ref: "#/components/schemas/Action"
    SequencedCollection_Object_:
      type: object
      allOf:
      - $ref: "#/components/schemas/Collection_Object_"
      - properties:
          first: {}
          last: {}
    ServerConfig:
      required:
      - liveness
      - terminationGracePeriod
      type: object
      properties:
        workerTaskRestartStrategy:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/WorkerTaskRestartStrategy"
        terminationGracePeriod:
          type: string
          default: 5m
        liveness:
          $ref: "#/components/schemas/ServerConfig.Liveness"
    ServerConfig.Liveness:
      required:
      - enabled
      - heartbeatInterval
      - initialDelay
      - interval
      - timeout
      type: object
      properties:
        enabled:
          type: boolean
          default: true
        interval:
          type: string
          default: 5s
        timeout:
          type: string
          default: 45s
        initialDelay:
          type: string
          default: 45s
        heartbeatInterval:
          type: string
          default: 3s
    ServerInstance:
      required:
      - hostname
      - id
      - metrics
      - props
      - type
      - version
      type: object
      properties:
        id:
          type: string
        type:
          $ref: "#/components/schemas/ServerInstance.Type"
        version:
          type: string
        hostname:
          type: string
        props:
          type: object
          additionalProperties: true
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/Metric"
    ServerInstance.Type:
      type: string
      enum:
      - SERVER
      - STANDALONE
    ServerType:
      type: string
      enum:
      - EXECUTOR
      - INDEXER
      - SCHEDULER
      - STANDALONE
      - WEBSERVER
      - WORKER
    Service.ServiceState:
      type: string
      enum:
      - CREATED
      - RUNNING
      - ERROR
      - DISCONNECTED
      - TERMINATING
      - TERMINATED_GRACEFULLY
      - TERMINATED_FORCED
      - NOT_RUNNING
      - EMPTY
    Service.ServiceType:
      type: string
      enum:
      - EXECUTOR
      - INDEXER
      - SCHEDULER
      - WEBSERVER
      - WORKER
    ServiceInstance:
      required:
      - config
      - createdAt
      - events
      - id
      - metrics
      - props
      - seqId
      - server
      - state
      - type
      - updatedAt
      type: object
      properties:
        server:
          $ref: "#/components/schemas/ServerInstance"
        metrics:
          type: array
          items:
            $ref: "#/components/schemas/Metric"
        state:
          $ref: "#/components/schemas/Service.ServiceState"
        id:
          type: string
        type:
          $ref: "#/components/schemas/Service.ServiceType"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        events:
          type: array
          items:
            $ref: "#/components/schemas/ServiceInstance.TimestampedEvent"
        config:
          $ref: "#/components/schemas/ServerConfig"
        props:
          type: object
          additionalProperties: true
        seqId:
          type: integer
          format: int64
    ServiceInstance.TimestampedEvent:
      required:
      - state
      - ts
      - type
      - value
      type: object
      properties:
        ts:
          type: string
          format: date-time
        value:
          type: string
        type:
          type: string
        state:
          $ref: "#/components/schemas/Service.ServiceState"
    ServiceProviderConfiguration:
      type: object
      allOf:
      - $ref: "#/components/schemas/ScimResourceWithOptionalId"
      - $ref: "#/components/schemas/ScimResource"
      - $ref: "#/components/schemas/BaseResource_ScimResource_"
      - properties:
          id:
            type: string
          documentationUrl:
            type: string
          patch:
            $ref: "#/components/schemas/ServiceProviderConfiguration.SupportedConfiguration"
          bulk:
            $ref: "#/components/schemas/ServiceProviderConfiguration.BulkConfiguration"
          filter:
            $ref: "#/components/schemas/ServiceProviderConfiguration.FilterConfiguration"
          changePassword:
            $ref: "#/components/schemas/ServiceProviderConfiguration.SupportedConfiguration"
          sort:
            $ref: "#/components/schemas/ServiceProviderConfiguration.SupportedConfiguration"
          etag:
            $ref: "#/components/schemas/ServiceProviderConfiguration.SupportedConfiguration"
          authenticationSchemes:
            type: array
            items:
              $ref: "#/components/schemas/ServiceProviderConfiguration.AuthenticationSchema"
    ServiceProviderConfiguration.AuthenticationSchema:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ServiceProviderConfiguration.AuthenticationSchema.Type"
        name:
          type: string
        description:
          type: string
        specUri:
          type: string
        documentationUri:
          type: string
    ServiceProviderConfiguration.AuthenticationSchema.Type:
      type: string
      enum:
      - OAUTH
      - OAUTH2
      - OAUTH_BEARER
      - HTTP_BASIC
      - HTTP_DIGEST
    ServiceProviderConfiguration.BulkConfiguration:
      type: object
      allOf:
      - $ref: "#/components/schemas/ServiceProviderConfiguration.SupportedConfiguration"
      - properties:
          maxOperations:
            type: integer
            format: int32
          maxPayloadSize:
            type: integer
            format: int32
    ServiceProviderConfiguration.FilterConfiguration:
      type: object
      allOf:
      - $ref: "#/components/schemas/ServiceProviderConfiguration.SupportedConfiguration"
      - properties:
          maxResults:
            type: integer
            format: int32
    ServiceProviderConfiguration.SupportedConfiguration:
      type: object
      properties:
        supported:
          type: boolean
    ServiceUsage:
      required:
      - dailyStatistics
      type: object
      properties:
        dailyStatistics:
          type: array
          items:
            $ref: "#/components/schemas/ServiceUsage.DailyServiceStatistics"
    ServiceUsage.DailyServiceStatistics:
      required:
      - type
      - values
      type: object
      properties:
        type:
          type: string
        values:
          type: array
          items:
            $ref: "#/components/schemas/ServiceUsage.DailyStatistics"
    ServiceUsage.DailyStatistics:
      required:
      - avg
      - date
      - max
      - min
      type: object
      properties:
        date:
          type: string
          format: date
        min:
          type: integer
          format: int64
        max:
          type: integer
          format: int64
        avg:
          type: integer
          format: int64
    SetupConfiguration:
      required:
      - done
      - passwordRegexp
      type: object
      properties:
        done:
          type: boolean
        multiTenancyEnabled:
          type: boolean
        defaultTenantEnabled:
          type: boolean
        repositoryType:
          type: string
        queueType:
          type: string
        storageType:
          type: string
        secretType:
          type: string
        passwordRegexp:
          type: string
    SetupConfiguration.SetupData:
      required:
      - password
      - tenant
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        tenant:
          $ref: "#/components/schemas/Tenant"
    SortOrder:
      type: string
      enum:
      - ASCENDING
      - DESCENDING
    SortRequest:
      type: object
      properties:
        sortBy:
          $ref: "#/components/schemas/AttributeReference"
        sortOrder:
          $ref: "#/components/schemas/SortOrder"
    State:
      required:
      - current
      type: object
      properties:
        duration:
          type: string
          readOnly: true
        startDate:
          type: string
          format: date-time
          readOnly: true
        endDate:
          type: string
          format: date-time
          nullable: true
          readOnly: true
        current:
          $ref: "#/components/schemas/State.Type"
        histories:
          type: array
          items:
            $ref: "#/components/schemas/State.History"
    State.History:
      required:
      - date
      - state
      type: object
      properties:
        state:
          $ref: "#/components/schemas/State.Type"
        date:
          type: string
          format: date-time
    State.Type:
      type: string
      enum:
      - CREATED
      - RUNNING
      - PAUSED
      - RESTARTED
      - KILLING
      - SUCCESS
      - WARNING
      - FAILED
      - KILLED
      - CANCELLED
      - QUEUED
      - RETRYING
      - RETRIED
    StatsController.ByFlowStatisticRequest:
      type: object
      properties:
        q:
          type: string
          nullable: true
        namespace:
          type: string
          nullable: true
        flowId:
          type: string
          nullable: true
        flows:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/ExecutionRepositoryInterface.FlowFilter"
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        namespaceOnly:
          type: boolean
          nullable: true
    StatsController.ByNamespaceStatisticRequest:
      type: object
      properties:
        namespace:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
    StatsController.LastExecutionsRequest:
      type: object
      properties:
        flows:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/ExecutionRepositoryInterface.FlowFilter"
    StatsController.LogStatisticRequest:
      type: object
      properties:
        q:
          type: string
          nullable: true
        namespace:
          type: string
          nullable: true
        flowId:
          type: string
          nullable: true
        logLevel:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Level"
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
    StatsController.StatisticRequest:
      type: object
      properties:
        q:
          type: string
          nullable: true
        scope:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/FlowScope"
        namespace:
          type: string
          nullable: true
        flowId:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
        state:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
    StatsController.SummaryRequest:
      type: object
      properties:
        namespace:
          type: string
          nullable: true
        startDate:
          type: string
          format: date-time
          nullable: true
        endDate:
          type: string
          format: date-time
          nullable: true
    SummaryStatistics:
      required:
      - flows
      - triggers
      type: object
      properties:
        flows:
          type: integer
          format: int32
        triggers:
          type: integer
          format: int32
    Task:
      required:
      - id
      - type
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
        description:
          type: string
        retry:
          $ref: "#/components/schemas/AbstractRetry"
        timeout:
          type: string
        disabled:
          type: boolean
        workerGroup:
          $ref: "#/components/schemas/WorkerGroup"
        logLevel:
          $ref: "#/components/schemas/Level"
        allowFailure:
          type: boolean
        logToFile:
          type: boolean
    TaskForExecution:
      required:
      - id
      - type
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
        type:
          minLength: 1
          pattern: "\\p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*(\\.\\\
            p{javaJavaIdentifierStart}\\p{javaJavaIdentifierPart}*)*"
          type: string
        tasks:
          type: array
          items:
            $ref: "#/components/schemas/TaskForExecution"
        inputs:
          type: array
          items:
            $ref: "#/components/schemas/Input_Object_"
        subflowId:
          $ref: "#/components/schemas/ExecutableTask.SubflowId"
    TaskRun:
      required:
      - attempts
      - executionId
      - flowId
      - id
      - iteration
      - namespace
      - outputs
      - parentTaskRunId
      - state
      - taskId
      - value
      type: object
      properties:
        items:
          type: string
          deprecated: true
        id:
          type: string
        executionId:
          type: string
        namespace:
          type: string
        flowId:
          type: string
        taskId:
          type: string
        parentTaskRunId:
          type: string
        value:
          type: string
        attempts:
          type: array
          items:
            $ref: "#/components/schemas/TaskRunAttempt"
        outputs:
          type: object
          additionalProperties: true
        state:
          $ref: "#/components/schemas/State"
        iteration:
          type: integer
          format: int32
    TaskRunAttempt:
      required:
      - logFile
      - state
      type: object
      properties:
        metrics:
          type: array
          deprecated: true
          items:
            $ref: "#/components/schemas/AbstractMetricEntry_Object_"
        state:
          $ref: "#/components/schemas/State"
        logFile:
          type: string
          format: uri
    Template:
      required:
      - deleted
      - description
      - errors
      - id
      - namespace
      - tasks
      type: object
      properties:
        id:
          minLength: 1
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9._-]*"
          type: string
        namespace:
          pattern: "^[a-z0-9][a-z0-9._-]*"
          type: string
        description:
          type: string
        tasks:
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/Task"
        errors:
          type: array
          items:
            $ref: "#/components/schemas/Task"
        deleted:
          type: boolean
    Tenant:
      required:
      - deleted
      - id
      - name
      - workerGroup
      type: object
      properties:
        id:
          pattern: "^[a-z0-9][a-z0-9_-]*"
          type: string
        name:
          type: string
        deleted:
          type: boolean
        workerGroup:
          $ref: "#/components/schemas/WorkerGroup"
    TenantConfiguration:
      type: object
      properties:
        enabled:
          type: boolean
        defaultTenant:
          type: boolean
    TenantUsage:
      type: object
      properties:
        count:
          type: integer
          format: int64
    Trigger:
      type: object
      allOf:
      - $ref: "#/components/schemas/TriggerContext"
      - properties:
          executionId:
            type: string
            nullable: true
          executionCurrentState:
            nullable: true
            allOf:
            - $ref: "#/components/schemas/State.Type"
          updatedDate:
            type: string
            format: date-time
            nullable: true
          evaluateRunningDate:
            type: string
            format: date-time
            nullable: true
          workerId:
            type: string
            nullable: true
    TriggerContext:
      required:
      - date
      - flowId
      - namespace
      - triggerId
      type: object
      properties:
        disabled:
          type: boolean
        tenantId:
          pattern: "^[a-z0-9][a-z0-9_-]"
          type: string
        namespace:
          type: string
        flowId:
          type: string
        triggerId:
          type: string
        date:
          type: string
          format: date-time
        nextExecutionDate:
          type: string
          format: date-time
          nullable: true
        backfill:
          nullable: true
          allOf:
          - $ref: "#/components/schemas/Backfill"
        stopAfter:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/State.Type"
    TriggerController.SetDisabledRequest:
      required:
      - disabled
      - triggers
      type: object
      properties:
        triggers:
          type: array
          items:
            $ref: "#/components/schemas/Trigger"
        disabled:
          type: boolean
    TriggerController.Triggers:
      required:
      - abstractTrigger
      - triggerContext
      type: object
      properties:
        abstractTrigger:
          $ref: "#/components/schemas/AbstractTrigger"
        triggerContext:
          $ref: "#/components/schemas/Trigger"
    Type:
      type: string
      enum:
      - STRING
      - ENUM
      - SELECT
      - INT
      - FLOAT
      - BOOLEAN
      - DATETIME
      - DATE
      - TIME
      - DURATION
      - FILE
      - JSON
      - URI
      - SECRET
      - ARRAY
      - MULTISELECT
      - YAML
    Usage:
      required:
      - configurations
      - environments
      - executions
      - flows
      - host
      - instanceUuid
      - plugins
      - serverType
      - startTime
      - startUuid
      - uri
      - uuid
      - version
      - zoneId
      type: object
      properties:
        uuid:
          type: string
        startUuid:
          type: string
        instanceUuid:
          type: string
        serverType:
          $ref: "#/components/schemas/ServerType"
        version:
          type: string
        zoneId:
          type: string
        uri:
          type: string
          nullable: true
        environments:
          type: array
          nullable: true
          items:
            type: string
        startTime:
          type: string
          format: date-time
        host:
          $ref: "#/components/schemas/HostUsage"
        configurations:
          $ref: "#/components/schemas/ConfigurationUsage"
        plugins:
          type: array
          items:
            $ref: "#/components/schemas/PluginUsage"
        flows:
          $ref: "#/components/schemas/FlowUsage"
        executions:
          $ref: "#/components/schemas/ExecutionUsage"
    Usage_1:
      type: object
      allOf:
      - $ref: "#/components/schemas/Usage"
      - properties:
          groups:
            $ref: "#/components/schemas/GroupUsage"
          users:
            $ref: "#/components/schemas/UserUsage"
          roles:
            $ref: "#/components/schemas/RoleUsage"
          namespaces:
            $ref: "#/components/schemas/NamespaceUsage"
          tenants:
            $ref: "#/components/schemas/TenantUsage"
          services:
            $ref: "#/components/schemas/ServiceUsage"
    Usage_2:
      type: object
      allOf:
      - $ref: "#/components/schemas/Usage"
      - properties:
          groups:
            $ref: "#/components/schemas/GroupUsage"
          users:
            $ref: "#/components/schemas/UserUsage"
          roles:
            $ref: "#/components/schemas/RoleUsage"
          namespaces:
            $ref: "#/components/schemas/NamespaceUsage"
          tenants:
            $ref: "#/components/schemas/TenantUsage"
          services:
            $ref: "#/components/schemas/ServiceUsage"
    Usage_3:
      type: object
      allOf:
      - $ref: "#/components/schemas/Usage"
      - properties:
          groups:
            $ref: "#/components/schemas/GroupUsage"
          users:
            $ref: "#/components/schemas/UserUsage"
          roles:
            $ref: "#/components/schemas/RoleUsage"
          namespaces:
            $ref: "#/components/schemas/NamespaceUsage"
          tenants:
            $ref: "#/components/schemas/TenantUsage"
          services:
            $ref: "#/components/schemas/ServiceUsage"
    Usage_4:
      type: object
      allOf:
      - $ref: "#/components/schemas/Usage"
      - properties:
          groups:
            $ref: "#/components/schemas/GroupUsage"
          users:
            $ref: "#/components/schemas/UserUsage"
          roles:
            $ref: "#/components/schemas/RoleUsage"
          namespaces:
            $ref: "#/components/schemas/NamespaceUsage"
          tenants:
            $ref: "#/components/schemas/TenantUsage"
          services:
            $ref: "#/components/schemas/ServiceUsage"
    UserController.UpdatePasswordRequest:
      required:
      - newPassword
      - oldPassword
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    UserGroup:
      type: object
      properties:
        value:
          type: string
        ref:
          type: string
        display:
          type: string
        type:
          $ref: "#/components/schemas/UserGroup.Type"
    UserGroup.Type:
      type: string
      enum:
      - DIRECT
      - INDIRECT
    UserType:
      type: string
      enum:
      - STANDARD
      - SERVICE_ACCOUNT
      - SUPER_ADMIN
    UserUsage:
      required:
      - apiKeyCount
      - basicAuthCount
      - count
      - oidcCount
      type: object
      properties:
        count:
          type: integer
          format: int64
        apiKeyCount:
          type: integer
          format: int64
        oidcCount:
          type: integer
          format: int64
        basicAuthCount:
          type: integer
          format: int64
    ValidateConstraintViolation:
      required:
      - constraints
      - deprecationPaths
      - flow
      - index
      - namespace
      - outdated
      - warnings
      type: object
      properties:
        flow:
          type: string
        namespace:
          type: string
        index:
          type: integer
          format: int32
        constraints:
          type: string
        outdated:
          type: boolean
        deprecationPaths:
          type: array
          items:
            type: string
        warnings:
          type: array
          items:
            type: string
    ValuePathExpression:
      required:
      - attributePath
      type: object
      properties:
        attributePath:
          $ref: "#/components/schemas/AttributeReference"
        attributeExpression:
          $ref: "#/components/schemas/FilterExpression"
    WorkerGroup:
      type: object
      properties:
        key:
          pattern: "^[a-zA-Z0-9][a-zA-Z0-9_-]*"
          type: string
    WorkerTaskRestartStrategy:
      type: string
      enum:
      - NEVER
      - IMMEDIATELY
      - AFTER_TERMINATION_GRACE_PERIOD
