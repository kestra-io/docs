# Flow declaration with a mandatory unique ID, a namespace, and an optional description.
# Flow ID must be unique within a namespace.
id: welcome
namespace: company.team
description: Welcome to Kestra!

# Flow inputs: each input has a name, a type, and an optional default value.
inputs:
  # We define one input of name 'user' with a default value 'Kestra user'
  - id: user
    type: STRING
    defaults: Kestra user

# List of tasks that will be executed one after the other.
# Each task must have an identifier unique for the flow and a type.
# Check the task documentation for a full list of attributes.
tasks:
    # This task logs a message to the terminal.
    # The message is passed using the 'format' attribute.
    # We use Pebble expressions defined with curly brackets to access the input variables.
  - id: hello
    type: io.kestra.plugin.core.log.Log
    message: Hey there, {{ inputs.user }}!

    # This task extracts data from an API.
  - id: api
    type: io.kestra.plugin.core.http.Request
    uri: https://dummyjson.com/products

    # This task runs a Python script.
  - id: python
    type: io.kestra.plugin.scripts.python.Script
    containerImage: python:slim
    beforeCommands:
      - pip install polars
    warningOnStdErr: false
    outputFiles:
      - "products.csv"
    script: |
      import polars as pl
      data = {{outputs.api.body | jq('.products') | first}}
      df = pl.from_dicts(data)
      df.glimpse()
      df.select(["brand", "price"]).write_csv("products.csv")

    # Run a DuckDB query.
  - id: sqlQuery
    type: io.kestra.plugin.jdbc.duckdb.Query
    inputFiles:
      in.csv: "{{ outputs.python.outputFiles['products.csv'] }}"
    sql: |
      SELECT brand, round(avg(price), 2) as avg_price
      FROM read_csv_auto('{{workingDir}}/in.csv', header=True)
      GROUP BY brand
      ORDER BY avg_price DESC;
    store: true

 # To run the flow in an automated fashion, add one or more 'triggers'.
triggers:
  # Here we use the 'Schedule' trigger to run the flow every minute.
  - id: everyMinute
    type: io.kestra.plugin.core.trigger.Schedule
    cron: "*/1 * * * *"
    inputs:
      name: Kestra pro user
