---
// do not prerender dynamic blogs pages
export const prerender = false;

import { slugify, subGroupName, type Plugin } from "@kestra-io/ui-libs";
import { getCollection } from "astro:content";
import Layout from "../../components/layout.astro";
import NavSideBar from "../../../components/docs/NavSideBar.vue";
import Breadcrumb from "../../../components/layout/Breadcrumb.vue";
import NavToc from "../../../components/docs/NavToc.vue";
import { generateNavigationFromSubgroups } from "../../utils/plugins/generateNavigation";
import PluginsMDCRender from "../../../components/plugins/PluginsMDCRender.vue";
import { generatePageNames, recursivePages } from "../../../utils/navigation";
import { nuxtBlocksFromJsonSchema, nuxtBlocksFromSubGroupsWrappers } from "../../utils/plugins/nuxtBlocks";
import { getIcon } from "../../utils/plugins/getPluginIcon";
import { $fetch } from "../../utils/fetch";
import { getPluginsWithoutDeprecated } from "../../utils/plugins/getListOfPlugins";

const pluginsData = await getCollection('plugins');
const navigation = generateNavigationFromSubgroups(pluginsData.map(p => p.data as any));
const pageNames = generatePageNames(navigation[0])
const pageList = recursivePages(navigation[0])


const params = Astro.params as { slug: string };

const nonProps = {
    slug: params.slug,
    navigation,
    pageNames,
    pageList
}

const splitRouteSlug = params.slug.split("/");

const lowerCasePluginType = splitRouteSlug[splitRouteSlug.length - 1].includes(".") ? splitRouteSlug[splitRouteSlug?.length - 1].replace(/.md$/, "") : undefined;
let pluginType: string | undefined = undefined;

const pageName = nonProps.pageNames[nonProps.slug] ?? (lowerCasePluginType ? lowerCasePluginType.split(".").slice(-1)[0] : undefined);

if (lowerCasePluginType !== undefined) {
    let splitPluginType = lowerCasePluginType.split(".");
    const packageName = splitPluginType.slice(0, splitPluginType.length - 1).join(".");
    pluginType = `${packageName}.${nonProps.pageNames[params.slug] ?? splitPluginType[splitPluginType.length - 1]}`;
}

const page = pluginType === undefined
    ? nuxtBlocksFromSubGroupsWrappers(await $fetch(`https://api.kestra.io/v1/plugins/${splitRouteSlug[0]}/subgroups`))
    : nuxtBlocksFromJsonSchema((await $fetch(`https://api.kestra.io/v1/plugins/definitions/${pluginType}`)).schema);

function getSubGroup(){
    const maybeSubGroup = splitRouteSlug?.[1];
    return maybeSubGroup?.includes(".") ? undefined : maybeSubGroup;
}

const subGroup = getSubGroup();

const pluginsWithoutDeprecated = getPluginsWithoutDeprecated("plugins" in page.body ? page.body.plugins : []);

const subGroupWrapper = subGroup === undefined || pluginType !== undefined ? undefined : pluginsWithoutDeprecated.find(p => slugify(subGroupName(p)) === subGroup);

const {pageIcon, icons} = await getIcon(splitRouteSlug?.[0], pluginType, "group" in page.body ? page.body.group : undefined, subGroupWrapper?.subGroup);

const transformTitle = (text: string) => {
    return text
        .replace(/([A-Z])/g, '&#x200B;$1')
        .replace(/([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])/g, '');
}
---

<Layout>
     <div class="container-fluid bd-gutter bd-layout">
        <NavSideBar type="plugins" navigation={nonProps.navigation} slug={`/plugins/${params.slug}`} client:load/>
        <article class="bd-main order-1">
            <div class="bd-title">
                <Breadcrumb slug={params.slug} pageList={nonProps.pageList} pageNames={nonProps.pageNames} />
                <h1 v-if="page && pageName" class="py-0 title">
                    {pageIcon && <img
                        src={pageIcon}
                        alt={pageName}
                        width="40"
                        height="40"
                        loading="lazy"
                        class="me-3 page-icon"
                    />}
                    <span class="text-capitalize" set:html={transformTitle(pageName)} />
                </h1>
            </div>
            <NavToc rate-helpful page={page} capitalize class="my-md-0 my-4 right-menu"/>

            {page && <PluginsMDCRender
                page={page}
                pluginName={pageName ?? ""}
                pluginType={pluginType}
                plugins={pluginsWithoutDeprecated}
                icons={icons}
                client:idle
            />}
        </article>
    </div>
</Layout>


<style lang="scss">
    @import "../../../assets/styles/variable";

    :global(.plugin-title) {
        font-size: 1.5em;
    }

    .container-fluid {
        gap: calc($spacer * 4);
        overflow-x: unset;

        .bd-title {
            margin-top: calc($spacer * 4);
            @include media-breakpoint-down(lg) {
                margin-top: calc($spacer * 1);
            }

            h1 {
                @media only screen and (min-width: 1920px) {
                    max-width: 71.25rem;
                }
            }
        }

        .bd-main {
            gap: calc($spacer * 2) calc($spacer * 4);
            @include media-breakpoint-down(sm) {
                gap: calc($spacer * 2) calc($spacer * 7);
            }
        }

        .bd-content {
            margin: 0 auto 2em auto;
            @media only screen and (min-width: 1920px) {
                max-width: 71.25rem
            }
        }

        .title {
            font-size: $h2-font-size;
            font-weight: 400;
            line-height: 3.25rem;
            margin: 0 auto;
        }
    }

    :global(p) {
        line-height: 1.75rem;
        font-size: $h6-font-size !important;
    }

    :global(.bd-markdown > h2) {
        margin-top: calc($spacer * 4.12);
        border-top: 1px solid $black-6;
        padding-top: calc($spacer * 3.125);
        margin-bottom: 2rem;

        a {
            border-left: 5px solid $purple-36;
            padding-left: calc($spacer * 0.6);
            font-size: calc($font-size-base * 1.87);
        }
    }


    :global(p > a) {
        text-decoration: underline;
    }

    :global(h2 > a) {
        font-weight: 600;
        line-height: 2.375rem;
        margin: 0;
    }

    :global(h3 > a ) {
        color: $white !important;
        font-size: 1.5rem;
        font-weight: 600;
        line-height: 2.375rem;
    }

    :global(h4 > a ) {
        color: $white !important;
        font-weight: 600;
    }

    :global(h5) {
        color: $white !important;
        font-weight: 600;
    }

    .bd-main :global(p > a), .bd-main :global(ul a) {
        color: $purple-36;
    }

    .container, :global(h2 > a) {
        color: $white !important;
    }

    :global(p > code), :global(li > code), :global(a > code), :global(table code) {
        color: $white-3;
        text-decoration: none !important;
        border-radius: 0.25rem;
        padding: 0 calc($spacer / 4);
    }

    :global(.code-block), :global(p > code), :global(li > code), :global(a > code), :global(table code) {
        border: $block-border;
        background-color: $black-2 !important;
    }

    :global(p > strong > code) {
        color: $white-3;
        text-decoration: none !important;
        border-radius: 0.25rem;
        padding: 0 calc($spacer / 4);
    }

    :global(li > mark) {
        background-color: $link-color;
    }

    :global(.docs-prev-next a) {
        span {
            color: $link-color;
        }

        .directory {
            color: $white;
        }
    }

    :global(.btn) {
        span {
            color: $link-color;
        }

        &:hover {

            span {
                color: $white;
            }
        }
    }

    :global(table) {
        td, th {
            background-color: $black-2;
            border: $block-border;
            color: $white;

            a {
                color: $link-color;
            }
        }
    }

    :global(.bd-markdown > h2 > a > span ) {
        display: inline !important;
    }

    :global(.alert-info) {
        display: flex;
        gap: 12px;
        padding: 16px;
        background-color: var(--ks-background-info);
        border: 1px solid var(--ks-border-info);
        border-left-width: 5px;
        border-radius: 8px;

        &::before {
            content: '!';
            min-width: 20px;
            height: 20px;
            margin-top: 4px;
            border-radius: 50%;
            background: var(--ks-content-info);
            color: $black;
            font: 600 13px/20px sans-serif;
            text-align: center;
        }

        p { color: var(--ks-content-info); }
    }
</style>