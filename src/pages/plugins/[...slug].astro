---
import { slugify, subGroupName, type Plugin } from "@kestra-io/ui-libs";
import { getCollection } from "astro:content";
import Layout from "../../components/layout.astro";
import NavSideBar from "../../../components/docs/NavSideBar.vue";
import Breadcrumb from "../../../components/layout/Breadcrumb.vue";
import NavToc from "../../../components/docs/NavToc.vue";
import { generateNavigationFromSubgroups } from "../../utils/plugins/generateNavigation";
import PluginsMDCRender from "../../../components/plugins/PluginsMDCRender.vue";
import { generatePageNames, recursivePages } from "../../../utils/navigation";
import { nuxtBlocksFromJsonSchema, nuxtBlocksFromSubGroupsWrappers } from "../../utils/plugins/nuxtBlocks";
import { getIcon } from "../../utils/plugins/getPluginIcon";
import { $fetch } from "../../utils/fetch";
import { getPluginsWithoutDeprecated } from "../../utils/plugins/getListOfPlugins";

export async function getStaticPaths() {
	const pluginsData = await getCollection('plugins');
    const navigation = generateNavigationFromSubgroups(pluginsData.map(p => p.data as any));
    const pageNames = generatePageNames(navigation[0])
    const pageList = recursivePages(navigation[0])


	return pageList.filter((slug) => slug !== undefined).map((slug) => ({
		params: { slug: slug.replace(/^\/plugins\//, '') },
		props: {
            slug,
            navigation,
            pageNames,
            pageList
        },
	}));
}

interface Props {
    slug: string
    navigation: any[]
    pageList: string[]
    pageNames: Record<string, string>
}
const props = Astro.props as Props;
const params = Astro.params as { slug: string };


const splitRouteSlug = params.slug.split("/");

const lowerCasePluginType = splitRouteSlug[splitRouteSlug.length - 1].includes(".") ? splitRouteSlug[splitRouteSlug?.length - 1].replace(/.md$/, "") : undefined;
let pluginType: string | undefined = undefined;

const pageName = props.pageNames[props.slug] ?? (lowerCasePluginType ? lowerCasePluginType.split(".").slice(-1)[0] : undefined);

if (lowerCasePluginType !== undefined) {
    let splitPluginType = lowerCasePluginType.split(".");
    const packageName = splitPluginType.slice(0, splitPluginType.length - 1).join(".");
    pluginType = `${packageName}.${props.pageNames[params.slug] ?? splitPluginType[splitPluginType.length - 1]}`;
}

const page = pluginType === undefined
    ? nuxtBlocksFromSubGroupsWrappers(await $fetch(`https://api.kestra.io/v1/plugins/${splitRouteSlug[0]}/subgroups`))
    : nuxtBlocksFromJsonSchema((await $fetch(`https://api.kestra.io/v1/plugins/definitions/${pluginType}`)).schema);

function getSubGroup(){
    const maybeSubGroup = splitRouteSlug?.[1];
    return maybeSubGroup?.includes(".") ? undefined : maybeSubGroup;
}

const subGroup = getSubGroup();

const pluginsWithoutDeprecated = getPluginsWithoutDeprecated("plugins" in page.body ? page.body.plugins : []);

const subGroupWrapper = subGroup === undefined || pluginType !== undefined ? undefined : pluginsWithoutDeprecated.find(p => slugify(subGroupName(p)) === subGroup);

const {pageIcon, icons} = await getIcon(splitRouteSlug?.[0], pluginType, "group" in page.body ? page.body.group : undefined, subGroupWrapper?.subGroup);

const transformTitle = (text: string) => {
    return text
        .replace(/([A-Z])/g, '&#x200B;$1')
        .replace(/([\u2700-\u27BF]|[\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83E[\uDD10-\uDDFF])/g, '');
}
---

<Layout>
     <div class="container-fluid bd-gutter bd-layout">
        <NavSideBar type="plugins" navigation={props.navigation} slug={`/plugins/${params.slug}`} client:load/>
        <article class="bd-main order-1">
            <div class="bd-title">
                <Breadcrumb slug={params.slug} pageList={props.pageList} pageNames={props.pageNames} />
                <h1 v-if="page && pageName" class="py-0 title">
                    {pageIcon && <img
                        src={pageIcon}
                        alt={pageName}
                        width="40"
                        height="40"
                        loading="lazy"
                        class="me-3 page-icon"
                    />}
                    <span class="text-capitalize" set:html={transformTitle(pageName)} />
                </h1>
            </div>
            <NavToc rate-helpful page={page} capitalize class="my-md-0 my-4 right-menu"/>

            {page && <PluginsMDCRender
                page={page}
                pluginName={pageName ?? ""}
                pluginType={pluginType}
                plugins={pluginsWithoutDeprecated}
                icons={icons}
                client:idle
            />}
        </article>
    </div>
</Layout>