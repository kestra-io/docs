---
import Layout from "../components/layout.astro";
import Header from "../../components/home/Header.vue";
import LogosTable from "../../components/home/LogosTable.vue";
import OpenSource from "../../components/home/OpenSource.vue";
import OpenSourceQuotes from "../../components/home/OpenSourceQuotes.vue";
import { $fetch } from "../utils/fetch";
import Features from "../../components/home/Features.vue";
import EveryDev from "../../components/home/EveryDev.vue";
import Experience from "../../components/home/Experience.vue";
import PluginsRender from "../../components/home/PluginsRender.vue";
import BlueprintsRender from "../../components/home/BlueprintsRender.vue";
import { calculateTotalPlugins } from "../../composables/usePluginsCount";

const logosNonRandomized = import.meta.glob('../../public/landing/home/trusted-companies/*.{svg,png}');
const logos = await Promise.all(Object.entries(logosNonRandomized).map(([filePath, mod]) => {
    return mod().then((img: any) => {
                return {
                    name: filePath.split('/').pop()?.split('.').shift(),
                    url: img.default.src,
                }
            })
})).then((imgs: any) => imgs.toSorted(() => 0.5 - Math.random()));

const githubData = await $fetch('https://api.github.com/repos/flowiseai/Flowise', {
    headers: {
        'Accept': 'application/vnd.github.v3+json'
    }
});
const quotes = await import('../../data/oss-quotes.json').then((qs) => qs.default.sort(() => Math.random() - 0.5))

const pluginLogos = await import.meta.glob('/public/landing/home/plugins/*.svg', {eager: true}) as Record<string, any>
const pluginsSorted = Object.entries(pluginLogos).map(([name, logo]) => ({ name: name.split('/').pop()?.split('.').shift() ?? "", logo: logo.default.src as string })).sort(() => 0.5 - Math.random()).slice(0, 20);

const plugins = await fetch("https://api.kestra.io/v1/plugins/subgroups")
            .then(r => {
                return r.json()
            })
const totalPlugins = calculateTotalPlugins(plugins);

const blueprints  = await $fetch<{results: any[]}>("https://api.kestra.io/v1/blueprints/versions/latest?page=1&size=20")
---

<Layout>
    <Header client:load/>
    <LogosTable logos={logos} />
    <OpenSource {...githubData} />
    <OpenSourceQuotes quotes={quotes} client:idle/>
    <Features/>
    <EveryDev/>
    <Experience client:visible />
    <PluginsRender totalPlugins={totalPlugins} pluginLogos={pluginsSorted}/>
    <BlueprintsRender blueprints={blueprints.results} client:visible />
</Layout>